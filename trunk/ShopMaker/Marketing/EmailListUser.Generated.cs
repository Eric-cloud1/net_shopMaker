//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Marketing;
using MakerShop.Utility;

namespace MakerShop.Marketing
{
    /// <summary>
    /// This class represents a EmailListUser object in the database.
    /// </summary>
    public partial class EmailListUser : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public EmailListUser() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="emailListId">Value of EmailListId.</param>
        /// <param name="email">Value of Email.</param>
        /// </summary>
        public EmailListUser(Int32 emailListId, String email)
        {
            this.EmailListId = emailListId;
            this.Email = email;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "EmailListId");
          columnNames.Add(prefix + "Email");
          columnNames.Add(prefix + "SignupDate");
          columnNames.Add(prefix + "SignupIP");
          columnNames.Add(prefix + "LastSendDate");
          columnNames.Add(prefix + "FailureCount");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given EmailListUser object from the given database data reader.
        /// </summary>
        /// <param name="emailListUser">The EmailListUser object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(EmailListUser emailListUser, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            emailListUser.EmailListId = dr.GetInt32(0);
            emailListUser.Email = dr.GetString(1);
            emailListUser.SignupDate = LocaleHelper.ToLocalTime(dr.GetDateTime(2));
            emailListUser.SignupIP = NullableData.GetString(dr, 3);
            emailListUser.LastSendDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 4));
            emailListUser.FailureCount = dr.GetInt16(5);
            emailListUser.IsDirty = false;
        }

#endregion

        private Int32 _EmailListId;
        private String _Email = string.Empty;
        private DateTime _SignupDate;
        private String _SignupIP = string.Empty;
        private DateTime _LastSendDate;
        private Int16 _FailureCount;
        private bool _IsDirty;

        /// <summary>
        /// EmailListId
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int32 EmailListId
        {
            get { return this._EmailListId; }
            set
            {
                if (this._EmailListId != value)
                {
                    this._EmailListId = value;
                    this.IsDirty = true;
                    this._EmailList = null;
                }
            }
        }

        /// <summary>
        /// Email
        /// </summary>
        [DataObjectField(true, false, false)]
        public String Email
        {
            get { return this._Email; }
            set
            {
                if (this._Email != value)
                {
                    this._Email = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// SignupDate
        /// </summary>
        public DateTime SignupDate
        {
            get { return this._SignupDate; }
            set
            {
                if (this._SignupDate != value)
                {
                    this._SignupDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// SignupIP
        /// </summary>
        public String SignupIP
        {
            get { return this._SignupIP; }
            set
            {
                if (this._SignupIP != value)
                {
                    this._SignupIP = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastSendDate
        /// </summary>
        public DateTime LastSendDate
        {
            get { return this._LastSendDate; }
            set
            {
                if (this._LastSendDate != value)
                {
                    this._LastSendDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FailureCount
        /// </summary>
        public Int16 FailureCount
        {
            get { return this._FailureCount; }
            set
            {
                if (this._FailureCount != value)
                {
                    this._FailureCount = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this EmailListUser object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private EmailList _EmailList;

        /// <summary>
        /// The EmailList object that this EmailListUser object is associated with
        /// </summary>
        public EmailList EmailList
        {
            get
            {
                if (!this.EmailListLoaded)
                {
                    this._EmailList = EmailListDataSource.Load(this.EmailListId);
                }
                return this._EmailList;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool EmailListLoaded { get { return ((this._EmailList != null) && (this._EmailList.EmailListId == this.EmailListId)); } }

#endregion

        /// <summary>
        /// Deletes this EmailListUser object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_EmailListUsers");
            deleteQuery.Append(" WHERE EmailListId = @emailListId AND Email = @email");
            Database database = Token.Instance.Database;
            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null);
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@EmailListId", System.Data.DbType.Int32, this.EmailListId);
                database.AddInParameter(deleteCommand, "@Email", System.Data.DbType.String, this.Email);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this EmailListUser object from the database for the given primary key.
        /// </summary>
        /// <param name="emailListId">Value of EmailListId of the object to load.</param>
        /// <param name="email">Value of Email of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 emailListId, String email)
        {
            bool result = false;
            this.EmailListId = emailListId;
            this.Email = email;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_EmailListUsers");
            selectQuery.Append(" WHERE EmailListId = @emailListId AND Email = @email");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@emailListId", System.Data.DbType.Int32, emailListId);
            database.AddInParameter(selectCommand, "@email", System.Data.DbType.String, email);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this EmailListUser object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;
                
                //SET DEFAULT FOR DATE FIELD
                if (this.SignupDate == System.DateTime.MinValue) this.SignupDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_EmailListUsers");
                    selectQuery.Append(" WHERE EmailListId = @emailListId AND Email = @email");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@EmailListId", System.Data.DbType.Int32, this.EmailListId);
                        database.AddInParameter(selectCommand, "@Email", System.Data.DbType.String, this.Email);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_EmailListUsers SET ");
                    updateQuery.Append("SignupDate = @SignupDate");
                    updateQuery.Append(", SignupIP = @SignupIP");
                    updateQuery.Append(", LastSendDate = @LastSendDate");
                    updateQuery.Append(", FailureCount = @FailureCount");
                    updateQuery.Append(" WHERE EmailListId = @EmailListId AND Email = @Email");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@EmailListId", System.Data.DbType.Int32, this.EmailListId);
                        database.AddInParameter(updateCommand, "@Email", System.Data.DbType.String, this.Email);
                        database.AddInParameter(updateCommand, "@SignupDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.SignupDate));
                        database.AddInParameter(updateCommand, "@SignupIP", System.Data.DbType.String, NullableData.DbNullify(this.SignupIP));
                        database.AddInParameter(updateCommand, "@LastSendDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastSendDate)));
                        database.AddInParameter(updateCommand, "@FailureCount", System.Data.DbType.Int16, this.FailureCount);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_EmailListUsers (EmailListId, Email, SignupDate, SignupIP, LastSendDate, FailureCount)");
                    insertQuery.Append(" VALUES (@EmailListId, @Email, @SignupDate, @SignupIP, @LastSendDate, @FailureCount)");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@EmailListId", System.Data.DbType.Int32, this.EmailListId);
                        database.AddInParameter(insertCommand, "@Email", System.Data.DbType.String, this.Email);
                        database.AddInParameter(insertCommand, "@SignupDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.SignupDate));
                        database.AddInParameter(insertCommand, "@SignupIP", System.Data.DbType.String, NullableData.DbNullify(this.SignupIP));
                        database.AddInParameter(insertCommand, "@LastSendDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastSendDate)));
                        database.AddInParameter(insertCommand, "@FailureCount", System.Data.DbType.Int16, this.FailureCount);
                        //RESULT IS NUMBER OF RECORDS AFFECTED;
                        result = database.ExecuteNonQuery(insertCommand);
                    }
                }
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
