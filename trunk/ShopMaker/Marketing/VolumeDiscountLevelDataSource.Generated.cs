//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Utility;

namespace MakerShop.Marketing
{
    /// <summary>
    /// DataSource class for VolumeDiscountLevel objects
    /// </summary>
    public partial class VolumeDiscountLevelDataSource
    {
        /// <summary>
        /// Deletes a VolumeDiscountLevel object from the database
        /// </summary>
        /// <param name="volumeDiscountLevel">The VolumeDiscountLevel object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(VolumeDiscountLevel volumeDiscountLevel)
        {
            return volumeDiscountLevel.Delete();
        }

        /// <summary>
        /// Deletes a VolumeDiscountLevel object with given id from the database
        /// </summary>
        /// <param name="volumeDiscountLevelId">Value of VolumeDiscountLevelId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 volumeDiscountLevelId)
        {
            VolumeDiscountLevel volumeDiscountLevel = new VolumeDiscountLevel();
            if (volumeDiscountLevel.Load(volumeDiscountLevelId)) return volumeDiscountLevel.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a VolumeDiscountLevel object to the database.
        /// </summary>
        /// <param name="volumeDiscountLevel">The VolumeDiscountLevel object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(VolumeDiscountLevel volumeDiscountLevel) { return volumeDiscountLevel.Save(); }

        /// <summary>
        /// Loads a VolumeDiscountLevel object for given Id from the database.
        /// </summary>
        /// <param name="volumeDiscountLevelId">Value of VolumeDiscountLevelId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded VolumeDiscountLevel object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevel Load(Int32 volumeDiscountLevelId)
        {
            return VolumeDiscountLevelDataSource.Load(volumeDiscountLevelId, true);
        }

        /// <summary>
        /// Loads a VolumeDiscountLevel object for given Id from the database.
        /// </summary>
        /// <param name="volumeDiscountLevelId">Value of VolumeDiscountLevelId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded VolumeDiscountLevel object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevel Load(Int32 volumeDiscountLevelId, bool useCache)
        {
            if (volumeDiscountLevelId == 0) return null;
            VolumeDiscountLevel volumeDiscountLevel = null;
            string key = "VolumeDiscountLevel_" + volumeDiscountLevelId.ToString();
            if (useCache)
            {
                volumeDiscountLevel = ContextCache.GetObject(key) as VolumeDiscountLevel;
                if (volumeDiscountLevel != null) return volumeDiscountLevel;
            }
            volumeDiscountLevel = new VolumeDiscountLevel();
            if (volumeDiscountLevel.Load(volumeDiscountLevelId))
            {
                if (useCache) ContextCache.SetObject(key, volumeDiscountLevel);
                return volumeDiscountLevel;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of VolumeDiscountLevel objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the VolumeDiscountLevel objects that should be loaded.</param>
        /// <returns>The number of VolumeDiscountLevel objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_VolumeDiscountLevels" + whereClause);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of VolumeDiscountLevel objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of VolumeDiscountLevel objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevelCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of VolumeDiscountLevel objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of VolumeDiscountLevel objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevelCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of VolumeDiscountLevel objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of VolumeDiscountLevel objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevelCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of VolumeDiscountLevel objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of VolumeDiscountLevel objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevelCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "MinValue,MaxValue,DiscountAmount";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + VolumeDiscountLevel.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_VolumeDiscountLevels");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            VolumeDiscountLevelCollection results = new VolumeDiscountLevelCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        VolumeDiscountLevel volumeDiscountLevel = new VolumeDiscountLevel();
                        VolumeDiscountLevel.LoadDataReader(volumeDiscountLevel, dr);
                        results.Add(volumeDiscountLevel);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of VolumeDiscountLevel objects for the given VolumeDiscountId in the database.
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// </summary>
        /// <returns>The Number of VolumeDiscountLevel objects for the given VolumeDiscountId in the database.</returns>
        public static int CountForVolumeDiscount(Int32 volumeDiscountId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_VolumeDiscountLevels WHERE VolumeDiscountId = @volumeDiscountId");
            database.AddInParameter(selectCommand, "@volumeDiscountId", System.Data.DbType.Int32, volumeDiscountId);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of VolumeDiscountLevel objects for the given VolumeDiscountId from the database
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <returns>A collection of VolumeDiscountLevel objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevelCollection LoadForVolumeDiscount(Int32 volumeDiscountId)
        {
            return LoadForVolumeDiscount(volumeDiscountId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of VolumeDiscountLevel objects for the given VolumeDiscountId from the database
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of VolumeDiscountLevel objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevelCollection LoadForVolumeDiscount(Int32 volumeDiscountId, string sortExpression)
        {
            return LoadForVolumeDiscount(volumeDiscountId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of VolumeDiscountLevel objects for the given VolumeDiscountId from the database
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of VolumeDiscountLevel objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevelCollection LoadForVolumeDiscount(Int32 volumeDiscountId, int maximumRows, int startRowIndex)
        {
            return LoadForVolumeDiscount(volumeDiscountId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of VolumeDiscountLevel objects for the given VolumeDiscountId from the database
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of VolumeDiscountLevel objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountLevelCollection LoadForVolumeDiscount(Int32 volumeDiscountId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "MinValue,MaxValue,DiscountAmount";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + VolumeDiscountLevel.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_VolumeDiscountLevels");
            selectQuery.Append(" WHERE VolumeDiscountId = @volumeDiscountId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@volumeDiscountId", System.Data.DbType.Int32, volumeDiscountId);
            //EXECUTE THE COMMAND
            VolumeDiscountLevelCollection results = new VolumeDiscountLevelCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        VolumeDiscountLevel volumeDiscountLevel = new VolumeDiscountLevel();
                        VolumeDiscountLevel.LoadDataReader(volumeDiscountLevel, dr);
                        results.Add(volumeDiscountLevel);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given VolumeDiscountLevel object to the database.
        /// </summary>
        /// <param name="volumeDiscountLevel">The VolumeDiscountLevel object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(VolumeDiscountLevel volumeDiscountLevel) { return volumeDiscountLevel.Save(); }

    }
}
