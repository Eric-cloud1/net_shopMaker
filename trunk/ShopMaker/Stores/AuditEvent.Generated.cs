//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Stores;
using MakerShop.Users;
using MakerShop.Utility;

namespace MakerShop.Stores
{
    /// <summary>
    /// This class represents a AuditEvent object in the database.
    /// </summary>
    public partial class AuditEvent : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public AuditEvent() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="auditEventId">Value of AuditEventId.</param>
        /// </summary>
        public AuditEvent(Int32 auditEventId)
        {
            this.AuditEventId = auditEventId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "AuditEventId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "EventDate");
          columnNames.Add(prefix + "EventTypeId");
          columnNames.Add(prefix + "Successful");
          columnNames.Add(prefix + "UserId");
          columnNames.Add(prefix + "RelatedId");
          columnNames.Add(prefix + "RemoteIP");
          columnNames.Add(prefix + "Comment");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given AuditEvent object from the given database data reader.
        /// </summary>
        /// <param name="auditEvent">The AuditEvent object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(AuditEvent auditEvent, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            auditEvent.AuditEventId = dr.GetInt32(0);
            auditEvent.StoreId = dr.GetInt32(1);
            auditEvent.EventDate = LocaleHelper.ToLocalTime(dr.GetDateTime(2));
            auditEvent.EventTypeId = dr.GetInt32(3);
            auditEvent.Successful = dr.GetBoolean(4);
            auditEvent.UserId = NullableData.GetInt32(dr, 5);
            auditEvent.RelatedId = NullableData.GetInt32(dr, 6);
            auditEvent.RemoteIP = NullableData.GetString(dr, 7);
            auditEvent.Comment = NullableData.GetString(dr, 8);
            auditEvent.IsDirty = false;
        }

#endregion

        private Int32 _AuditEventId;
        private Int32 _StoreId;
        private DateTime _EventDate;
        private Int32 _EventTypeId;
        private Boolean _Successful;
        private Int32 _UserId;
        private Int32 _RelatedId;
        private String _RemoteIP = string.Empty;
        private String _Comment = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// AuditEventId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 AuditEventId
        {
            get { return this._AuditEventId; }
            set
            {
                if (this._AuditEventId != value)
                {
                    this._AuditEventId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// EventDate
        /// </summary>
        public DateTime EventDate
        {
            get { return this._EventDate; }
            set
            {
                if (this._EventDate != value)
                {
                    this._EventDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// EventTypeId
        /// </summary>
        public Int32 EventTypeId
        {
            get { return this._EventTypeId; }
            set
            {
                if (this._EventTypeId != value)
                {
                    this._EventTypeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Successful
        /// </summary>
        public Boolean Successful
        {
            get { return this._Successful; }
            set
            {
                if (this._Successful != value)
                {
                    this._Successful = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// UserId
        /// </summary>
        public Int32 UserId
        {
            get { return this._UserId; }
            set
            {
                if (this._UserId != value)
                {
                    this._UserId = value;
                    this.IsDirty = true;
                    this._User = null;
                }
            }
        }

        /// <summary>
        /// RelatedId
        /// </summary>
        public Int32 RelatedId
        {
            get { return this._RelatedId; }
            set
            {
                if (this._RelatedId != value)
                {
                    this._RelatedId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// RemoteIP
        /// </summary>
        public String RemoteIP
        {
            get { return this._RemoteIP; }
            set
            {
                if (this._RemoteIP != value)
                {
                    this._RemoteIP = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Comment
        /// </summary>
        public String Comment
        {
            get { return this._Comment; }
            set
            {
                if (this._Comment != value)
                {
                    this._Comment = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this AuditEvent object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private Store _Store;
        private User _User;

        /// <summary>
        /// The Store object that this AuditEvent object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

        /// <summary>
        /// The User object that this AuditEvent object is associated with
        /// </summary>
        public User User
        {
            get
            {
                if (!this.UserLoaded)
                {
                    this._User = UserDataSource.Load(this.UserId);
                }
                return this._User;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UserLoaded { get { return ((this._User != null) && (this._User.UserId == this.UserId)); } }

#endregion

        /// <summary>
        /// Deletes this AuditEvent object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_AuditEvents");
            deleteQuery.Append(" WHERE AuditEventId = @auditEventId");
            Database database = Token.Instance.Database;
            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null);
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@AuditEventId", System.Data.DbType.Int32, this.AuditEventId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();

            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this AuditEvent object from the database for the given primary key.
        /// </summary>
        /// <param name="auditEventId">Value of AuditEventId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 auditEventId)
        {
            bool result = false;
            this.AuditEventId = auditEventId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_AuditEvents");
            selectQuery.Append(" WHERE AuditEventId = @auditEventId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@auditEventId", System.Data.DbType.Int32, auditEventId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this AuditEvent object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.AuditEventId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.EventDate == System.DateTime.MinValue) this.EventDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_AuditEvents");
                    selectQuery.Append(" WHERE AuditEventId = @auditEventId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@AuditEventId", System.Data.DbType.Int32, this.AuditEventId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_AuditEvents SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", EventDate = @EventDate");
                    updateQuery.Append(", EventTypeId = @EventTypeId");
                    updateQuery.Append(", Successful = @Successful");
                    updateQuery.Append(", UserId = @UserId");
                    updateQuery.Append(", RelatedId = @RelatedId");
                    updateQuery.Append(", RemoteIP = @RemoteIP");
                    updateQuery.Append(", Comment = @Comment");
                    updateQuery.Append(" WHERE AuditEventId = @AuditEventId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@AuditEventId", System.Data.DbType.Int32, this.AuditEventId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@EventDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.EventDate));
                        database.AddInParameter(updateCommand, "@EventTypeId", System.Data.DbType.Int32, this.EventTypeId);
                        database.AddInParameter(updateCommand, "@Successful", System.Data.DbType.Boolean, this.Successful);
                        database.AddInParameter(updateCommand, "@UserId", System.Data.DbType.Int32, NullableData.DbNullify(this.UserId));
                        database.AddInParameter(updateCommand, "@RelatedId", System.Data.DbType.Int32, NullableData.DbNullify(this.RelatedId));
                        database.AddInParameter(updateCommand, "@RemoteIP", System.Data.DbType.String, NullableData.DbNullify(this.RemoteIP));
                        database.AddInParameter(updateCommand, "@Comment", System.Data.DbType.String, NullableData.DbNullify(this.Comment));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_AuditEvents (StoreId, EventDate, EventTypeId, Successful, UserId, RelatedId, RemoteIP, Comment)");
                    insertQuery.Append(" VALUES (@StoreId, @EventDate, @EventTypeId, @Successful, @UserId, @RelatedId, @RemoteIP, @Comment)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@AuditEventId", System.Data.DbType.Int32, this.AuditEventId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@EventDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.EventDate));
                        database.AddInParameter(insertCommand, "@EventTypeId", System.Data.DbType.Int32, this.EventTypeId);
                        database.AddInParameter(insertCommand, "@Successful", System.Data.DbType.Boolean, this.Successful);
                        database.AddInParameter(insertCommand, "@UserId", System.Data.DbType.Int32, NullableData.DbNullify(this.UserId));
                        database.AddInParameter(insertCommand, "@RelatedId", System.Data.DbType.Int32, NullableData.DbNullify(this.RelatedId));
                        database.AddInParameter(insertCommand, "@RemoteIP", System.Data.DbType.String, NullableData.DbNullify(this.RemoteIP));
                        database.AddInParameter(insertCommand, "@Comment", System.Data.DbType.String, NullableData.DbNullify(this.Comment));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._AuditEventId = result;
                    }
                }
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
