//CUSTOMIZED
//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Orders;
using MakerShop.Payments;
using MakerShop.Products;
using MakerShop.Users;
using MakerShop.Utility;

namespace MakerShop.Orders
{
    /// <summary>
    /// This class represents a Subscription object in the database.
    /// </summary>
    public partial class OrderSubscriptions : IPersistable
    {

        #region Constructors

        public OrderSubscriptions() { }

        public OrderSubscriptions(Int32 pOrderId)
        {
            this.OrderId = pOrderId;

        }

        public static string GetColumnNames(string prefix)
        {
            if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
            else prefix = prefix + ".";
            List<string> columnNames = new List<string>();
            columnNames.Add(prefix + "OrderId");
            columnNames.Add(prefix + "StoreId");
            columnNames.Add(prefix + "OrderDate");
            columnNames.Add(prefix + "UserId");
            columnNames.Add(prefix + "AffiliateId");
            columnNames.Add(prefix + "Referrer");
            columnNames.Add(prefix + "Site");
            columnNames.Add(prefix + "WarehouseId");
            columnNames.Add(prefix + "ShipMethodId");
            columnNames.Add(prefix + "TaxRate");
            columnNames.Add(prefix + "PaymentTypeId");
            columnNames.Add(prefix + "PaymentDate");
            columnNames.Add(prefix + "PaymentGatewayId");
            columnNames.Add(prefix + "PaymentInstrumentId");
            columnNames.Add(prefix + "CurrencyCode");
            columnNames.Add(prefix + "ReferenceNumber");
            columnNames.Add(prefix + "EncryptedAccountData");
            columnNames.Add(prefix + "ProductId");
            columnNames.Add(prefix + "ProductName");
            columnNames.Add(prefix + "Price");
            columnNames.Add(prefix + "Weight");
            columnNames.Add(prefix + "CostOfGoods");
            columnNames.Add(prefix + "Quantity");
            columnNames.Add(prefix + "SplitShip");
            columnNames.Add(prefix + "PaymentDays");
            columnNames.Add(prefix + "NumberOfPayments");
            columnNames.Add(prefix + "ShippableId");
            columnNames.Add(prefix + "TaxCodeId");
            columnNames.Add(prefix + "SubscriptionStatusCode");
            columnNames.Add(prefix + "CreateDate");
            columnNames.Add(prefix + "CreateUser");
            columnNames.Add(prefix + "ChangeDate");
            columnNames.Add(prefix + "ChangeUser");
            columnNames.Add(prefix + "SubAffiliate");
            columnNames.Add(prefix + "DaysToCapture");


            return string.Join(",", columnNames.ToArray());
        }

        public static void LoadDataReader(OrderSubscriptions pOrderSubscriptions, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA

            pOrderSubscriptions.OrderId = dr.GetInt32(0);

            pOrderSubscriptions.StoreId = dr.GetInt32(1);

            pOrderSubscriptions.OrderDate = LocaleHelper.ToLocalTime(dr.GetDateTime(2));

            pOrderSubscriptions.UserId = dr.GetInt32(3);


            pOrderSubscriptions.AffiliateId = NullableData.GetInt32(dr, 4);

            pOrderSubscriptions.Referrer = NullableData.GetString(dr, 5);

            pOrderSubscriptions.Site = NullableData.GetString(dr, 6);
            pOrderSubscriptions.WarehouseId = dr.GetInt32(7);

            pOrderSubscriptions.ShipMethodId = dr.GetInt32(8);

            pOrderSubscriptions.TaxRate = dr.GetDecimal(9);

            pOrderSubscriptions.PaymentTypeId = dr.GetInt16(10);

            pOrderSubscriptions.PaymentDate = LocaleHelper.ToLocalTime(dr.GetDateTime(11));

            pOrderSubscriptions.PaymentGatewayId = dr.GetInt32(12);

            pOrderSubscriptions.PaymentInstrumentId = dr.GetInt16(13);

            pOrderSubscriptions.CurrencyCode = dr.GetString(14);


            pOrderSubscriptions.ReferenceNumber = NullableData.GetString(dr, 15);

            pOrderSubscriptions.EncryptedAccountData = NullableData.GetString(dr, 16);
            pOrderSubscriptions.ProductId = dr.GetInt32(17);

            pOrderSubscriptions.ProductName = dr.GetString(18);

            pOrderSubscriptions.Price = dr.GetDecimal(19);

            pOrderSubscriptions.Weight = dr.GetDecimal(20);

            pOrderSubscriptions.CostOfGoods = dr.GetDecimal(21);

            pOrderSubscriptions.Quantity = dr.GetInt16(22);

            pOrderSubscriptions.SplitShip = dr.GetBoolean(23);

            pOrderSubscriptions.PaymentDays = dr.GetInt16(24);

            pOrderSubscriptions.NumberOfPayments = dr.GetInt16(25);

            pOrderSubscriptions.ShippableId = dr.GetByte(26);


            pOrderSubscriptions.TaxCodeId = NullableData.GetInt32(dr, 27);
            pOrderSubscriptions.SubscriptionStatusCode = dr.GetByte(28);

            pOrderSubscriptions.CreateDate = LocaleHelper.ToLocalTime(dr.GetDateTime(29));

            pOrderSubscriptions.CreateUser = dr.GetString(30);

            pOrderSubscriptions.ChangeDate = LocaleHelper.ToLocalTime(dr.GetDateTime(31));

            pOrderSubscriptions.ChangeUser = dr.GetString(32);


            pOrderSubscriptions.SubAffiliate = NullableData.GetString(dr, 33);
            pOrderSubscriptions.DaysToCapture = NullableData.GetInt16(dr, 34);

            pOrderSubscriptions.IsDirty = false;
        }

        #endregion

        #region Class Data

        private bool _IsDirty;

        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }


        private Int32 _OrderId;

        [DataObjectField(true, false, false)]
        public Int32 OrderId
        {
            get { return this._OrderId; }
            set
            {
                if (this._OrderId != value)
                {
                    this._OrderId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _StoreId;

        [DataObjectField(true, false, false)]
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                }
            }
        }


        private DateTime _OrderDate;

        [DataObjectField(true, false, false)]
        public DateTime OrderDate
        {
            get { return this._OrderDate; }
            set
            {
                if (this._OrderDate != value)
                {
                    this._OrderDate = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _UserId;

        [DataObjectField(true, false, false)]
        public Int32 UserId
        {
            get { return this._UserId; }
            set
            {
                if (this._UserId != value)
                {
                    this._UserId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _AffiliateId;

        [DataObjectField(true, false, false)]
        public Int32 AffiliateId
        {
            get { return this._AffiliateId; }
            set
            {
                if (this._AffiliateId != value)
                {
                    this._AffiliateId = value;
                    this.IsDirty = true;
                }
            }
        }


        private String _Referrer;

        [DataObjectField(true, false, false)]
        public String Referrer
        {
            get { return this._Referrer; }
            set
            {
                if (this._Referrer != value)
                {
                    this._Referrer = value;
                    this.IsDirty = true;
                }
            }
        }


        private String _Site;

        [DataObjectField(true, false, false)]
        public String Site
        {
            get { return this._Site; }
            set
            {
                if (this._Site != value)
                {
                    this._Site = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _WarehouseId;

        [DataObjectField(true, false, false)]
        public Int32 WarehouseId
        {
            get { return this._WarehouseId; }
            set
            {
                if (this._WarehouseId != value)
                {
                    this._WarehouseId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _ShipMethodId;

        [DataObjectField(true, false, false)]
        public Int32 ShipMethodId
        {
            get { return this._ShipMethodId; }
            set
            {
                if (this._ShipMethodId != value)
                {
                    this._ShipMethodId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Decimal _TaxRate;

        [DataObjectField(true, false, false)]
        public Decimal TaxRate
        {
            get { return this._TaxRate; }
            set
            {
                if (this._TaxRate != value)
                {
                    this._TaxRate = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int16 _PaymentTypeId;

        [DataObjectField(true, false, false)]
        public Int16 PaymentTypeId
        {
            get { return this._PaymentTypeId; }
            set
            {
                if (this._PaymentTypeId != value)
                {
                    this._PaymentTypeId = value;
                    this.IsDirty = true;
                }
            }
        }


        private DateTime _PaymentDate;

        [DataObjectField(true, false, false)]
        public DateTime PaymentDate
        {
            get { return this._PaymentDate; }
            set
            {
                if (this._PaymentDate != value)
                {
                    this._PaymentDate = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _PaymentGatewayId;

        [DataObjectField(true, false, false)]
        public Int32 PaymentGatewayId
        {
            get { return this._PaymentGatewayId; }
            set
            {
                if (this._PaymentGatewayId != value)
                {
                    this._PaymentGatewayId = value;
                    this.IsDirty = true;
                }
            }
        }

        private Int16 _DaysToCapture;

        [DataObjectField(false, false, false)]
        public Int16 DaysToCapture
        {
            get { return this._DaysToCapture; }
            set
            {
                if (this._DaysToCapture != value)
                {
                    this._DaysToCapture = value;
                    this.IsDirty = true;
                }
            }
        }

        private Int16 _PaymentInstrumentId;

        [DataObjectField(true, false, false)]
        public Int16 PaymentInstrumentId
        {
            get { return this._PaymentInstrumentId; }
            set
            {
                if (this._PaymentInstrumentId != value)
                {
                    this._PaymentInstrumentId = value;
                    this.IsDirty = true;
                }
            }
        }


        private String _CurrencyCode;

        [DataObjectField(true, false, false)]
        public String CurrencyCode
        {
            get { return this._CurrencyCode; }
            set
            {
                if (this._CurrencyCode != value)
                {
                    this._CurrencyCode = value;
                    this.IsDirty = true;
                }
            }
        }


        private String _ReferenceNumber;

        [DataObjectField(true, false, false)]
        public String ReferenceNumber
        {
            get { return this._ReferenceNumber; }
            set
            {
                if (this._ReferenceNumber != value)
                {
                    this._ReferenceNumber = value;
                    this.IsDirty = true;
                }
            }
        }


        private String _EncryptedAccountData;

        [DataObjectField(true, false, false)]
        public String EncryptedAccountData
        {
            get { return this._EncryptedAccountData; }
            set
            {
                if (this._EncryptedAccountData != value)
                {
                    this._EncryptedAccountData = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _ProductId;

        [DataObjectField(true, false, false)]
        public Int32 ProductId
        {
            get { return this._ProductId; }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                    this.IsDirty = true;
                }
            }
        }


        private String _ProductName;

        [DataObjectField(true, false, false)]
        public String ProductName
        {
            get { return this._ProductName; }
            set
            {
                if (this._ProductName != value)
                {
                    this._ProductName = value;
                    this.IsDirty = true;
                }
            }
        }


        private Decimal _Price;

        [DataObjectField(true, false, false)]
        public Decimal Price
        {
            get { return this._Price; }
            set
            {
                if (this._Price != value)
                {
                    this._Price = value;
                    this.IsDirty = true;
                }
            }
        }


        private Decimal _Weight;

        [DataObjectField(true, false, false)]
        public Decimal Weight
        {
            get { return this._Weight; }
            set
            {
                if (this._Weight != value)
                {
                    this._Weight = value;
                    this.IsDirty = true;
                }
            }
        }


        private Decimal _CostOfGoods;

        [DataObjectField(true, false, false)]
        public Decimal CostOfGoods
        {
            get { return this._CostOfGoods; }
            set
            {
                if (this._CostOfGoods != value)
                {
                    this._CostOfGoods = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int16 _Quantity;

        [DataObjectField(true, false, false)]
        public Int16 Quantity
        {
            get { return this._Quantity; }
            set
            {
                if (this._Quantity != value)
                {
                    this._Quantity = value;
                    this.IsDirty = true;
                }
            }
        }


        private Boolean _SplitShip;

        [DataObjectField(true, false, false)]
        public Boolean SplitShip
        {
            get { return this._SplitShip; }
            set
            {
                if (this._SplitShip != value)
                {
                    this._SplitShip = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int16 _PaymentDays;

        [DataObjectField(true, false, false)]
        public Int16 PaymentDays
        {
            get { return this._PaymentDays; }
            set
            {
                if (this._PaymentDays != value)
                {
                    this._PaymentDays = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int16 _NumberOfPayments;

        [DataObjectField(true, false, false)]
        public Int16 NumberOfPayments
        {
            get { return this._NumberOfPayments; }
            set
            {
                if (this._NumberOfPayments != value)
                {
                    this._NumberOfPayments = value;
                    this.IsDirty = true;
                }
            }
        }


        private Byte _ShippableId;

        [DataObjectField(true, false, false)]
        public Byte ShippableId
        {
            get { return this._ShippableId; }
            set
            {
                if (this._ShippableId != value)
                {
                    this._ShippableId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _TaxCodeId;

        [DataObjectField(true, false, false)]
        public Int32 TaxCodeId
        {
            get { return this._TaxCodeId; }
            set
            {
                if (this._TaxCodeId != value)
                {
                    this._TaxCodeId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Byte _SubscriptionStatusCode;

        [DataObjectField(true, false, false)]
        public Byte SubscriptionStatusCode
        {
            get { return this._SubscriptionStatusCode; }
            set
            {
                if (this._SubscriptionStatusCode != value)
                {
                    this._SubscriptionStatusCode = value;
                    this.IsDirty = true;
                }
            }
        }

        
        public String SubscriptionStatus
        {
            get 
            {
                switch (this._SubscriptionStatusCode)
                {
                    case 0:
                        return "Pending Payment";
                    case 1:
                        return "Pending Rebill";
                    case 2:
                        return "Pending Rebill Order";
                    case 255:
                        return "Canceled";
                    default:
                        return "UNKNOWN/None";
                }
            }
            
        }

        private DateTime _CreateDate;

        [DataObjectField(true, false, false)]
        public DateTime CreateDate
        {
            get { return this._CreateDate; }
            set
            {
                if (this._CreateDate != value)
                {
                    this._CreateDate = value;
                    this.IsDirty = true;
                }
            }
        }


        private String _CreateUser;

        [DataObjectField(true, false, false)]
        public String CreateUser
        {
            get { return this._CreateUser; }
            set
            {
                if (this._CreateUser != value)
                {
                    this._CreateUser = value;
                    this.IsDirty = true;
                }
            }
        }


        private DateTime _ChangeDate;

        [DataObjectField(true, false, false)]
        public DateTime ChangeDate
        {
            get { return this._ChangeDate; }
            set
            {
                if (this._ChangeDate != value)
                {
                    this._ChangeDate = value;
                    this.IsDirty = true;
                }
            }
        }


        private String _ChangeUser;

        [DataObjectField(true, false, false)]
        public String ChangeUser
        {
            get { return this._ChangeUser; }
            set
            {
                if (this._ChangeUser != value)
                {
                    this._ChangeUser = value;
                    this.IsDirty = true;
                }
            }
        }


        private String _SubAffiliate;

        [DataObjectField(true, false, false)]
        public String SubAffiliate
        {
            get { return this._SubAffiliate; }
            set
            {
                if (this._SubAffiliate != value)
                {
                    this._SubAffiliate = value;
                    this.IsDirty = true;
                }
            }
        }



        #endregion



        #region CURD

        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM xm_OrderSubscriptions");
            deleteQuery.Append(" WHERE  OrderId = @OrderId  ");
            Database database = Token.Instance.Database;
            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {

                database.AddInParameter(deleteCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);

                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }

            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }

        public virtual bool Load(Int32 pOrderId)
        {
            bool result = false;

            this.OrderId = pOrderId;


            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames("os"));
            selectQuery.Append(" FROM xm_OrderSubscriptions os join xm_orderdetail od on os.orderid = od.ParentOrderId");
            selectQuery.Append(" WHERE  od.OrderId = @OrderId  ");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());


            database.AddInParameter(selectCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);


            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr); ;
                }
                dr.Close();
            }
            return result;
        }

        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;
                
                if (recordExists)
                {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM xm_OrderSubscriptions");
                    selectQuery.Append(" WHERE  OrderId = @OrderId ");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {

                        database.AddInParameter(selectCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);


                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    this.ChangeDate = DateTime.UtcNow;
                    this.ChangeUser = Token.Instance.User.UserName;

                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE xm_OrderSubscriptions SET ");

                    updateQuery.Append("StoreId = @StoreId,OrderDate = @OrderDate,UserId = @UserId,AffiliateId = @AffiliateId,Referrer = @Referrer,Site = @Site,WarehouseId = @WarehouseId,ShipMethodId = @ShipMethodId,TaxRate = @TaxRate,PaymentTypeId = @PaymentTypeId,PaymentDate = @PaymentDate,PaymentGatewayId = @PaymentGatewayId,PaymentInstrumentId = @PaymentInstrumentId,CurrencyCode = @CurrencyCode,ReferenceNumber = @ReferenceNumber,EncryptedAccountData = @EncryptedAccountData,ProductId = @ProductId,ProductName = @ProductName,Price = @Price,Weight = @Weight,CostOfGoods = @CostOfGoods,Quantity = @Quantity,SplitShip = @SplitShip,PaymentDays = @PaymentDays,NumberOfPayments = @NumberOfPayments,ShippableId = @ShippableId,TaxCodeId = @TaxCodeId,SubscriptionStatusCode = @SubscriptionStatusCode,ChangeDate = @ChangeDate,ChangeUser = @ChangeUser,SubAffiliate = @SubAffiliate, DaysToCapture=@DaysToCapture");

                    updateQuery.Append(" WHERE  OrderId = @OrderId ");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {


                        database.AddInParameter(updateCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);

                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);

                        database.AddInParameter(updateCommand, "@OrderDate", System.Data.DbType.DateTime, this.OrderDate);

                        database.AddInParameter(updateCommand, "@UserId", System.Data.DbType.Int32, this.UserId);

                        database.AddInParameter(updateCommand, "@AffiliateId", System.Data.DbType.Int32, this.AffiliateId);

                        database.AddInParameter(updateCommand, "@Referrer", System.Data.DbType.String, this.Referrer);

                        database.AddInParameter(updateCommand, "@Site", System.Data.DbType.String, this.Site);

                        database.AddInParameter(updateCommand, "@WarehouseId", System.Data.DbType.Int32, this.WarehouseId);

                        database.AddInParameter(updateCommand, "@ShipMethodId", System.Data.DbType.Int32, this.ShipMethodId);

                        database.AddInParameter(updateCommand, "@TaxRate", System.Data.DbType.Decimal, this.TaxRate);

                        database.AddInParameter(updateCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);

                        database.AddInParameter(updateCommand, "@PaymentDate", System.Data.DbType.DateTime, this.PaymentDate);

                        database.AddInParameter(updateCommand, "@PaymentGatewayId", System.Data.DbType.Int32, this.PaymentGatewayId);

                        database.AddInParameter(updateCommand, "@PaymentInstrumentId", System.Data.DbType.Int16, this.PaymentInstrumentId);

                        database.AddInParameter(updateCommand, "@CurrencyCode", System.Data.DbType.String, this.CurrencyCode);

                        database.AddInParameter(updateCommand, "@ReferenceNumber", System.Data.DbType.String, this.ReferenceNumber);

                        database.AddInParameter(updateCommand, "@EncryptedAccountData", System.Data.DbType.String, this.EncryptedAccountData);

                        database.AddInParameter(updateCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);

                        database.AddInParameter(updateCommand, "@ProductName", System.Data.DbType.String, this.ProductName);

                        database.AddInParameter(updateCommand, "@Price", System.Data.DbType.Decimal, this.Price);

                        database.AddInParameter(updateCommand, "@Weight", System.Data.DbType.Decimal, this.Weight);

                        database.AddInParameter(updateCommand, "@CostOfGoods", System.Data.DbType.Decimal, this.CostOfGoods);

                        database.AddInParameter(updateCommand, "@Quantity", System.Data.DbType.Int16, this.Quantity);

                        database.AddInParameter(updateCommand, "@SplitShip", System.Data.DbType.Boolean, this.SplitShip);

                        database.AddInParameter(updateCommand, "@PaymentDays", System.Data.DbType.Int16, this.PaymentDays);

                        database.AddInParameter(updateCommand, "@NumberOfPayments", System.Data.DbType.Int16, this.NumberOfPayments);

                        database.AddInParameter(updateCommand, "@ShippableId", System.Data.DbType.Byte, this.ShippableId);

                        database.AddInParameter(updateCommand, "@TaxCodeId", System.Data.DbType.Int32, this.TaxCodeId);

                        database.AddInParameter(updateCommand, "@SubscriptionStatusCode", System.Data.DbType.Byte, this.SubscriptionStatusCode);

                        database.AddInParameter(updateCommand, "@ChangeDate", System.Data.DbType.DateTime, this.ChangeDate);

                        database.AddInParameter(updateCommand, "@ChangeUser", System.Data.DbType.String, this.ChangeUser);

                        database.AddInParameter(updateCommand, "@SubAffiliate", System.Data.DbType.String, this.SubAffiliate);

                        database.AddInParameter(updateCommand, "@DaysToCapture", System.Data.DbType.Int16, this.DaysToCapture); 


                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    this.CreateDate = DateTime.UtcNow;
                    this.CreateUser = Token.Instance.User.UserName; 
                
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO xm_OrderSubscriptions (OrderId,StoreId,OrderDate,UserId,AffiliateId,Referrer,Site,WarehouseId,ShipMethodId,TaxRate,PaymentTypeId,PaymentDate,PaymentGatewayId,PaymentInstrumentId,CurrencyCode,ReferenceNumber,EncryptedAccountData,ProductId,ProductName,Price,Weight,CostOfGoods,Quantity,SplitShip,PaymentDays,NumberOfPayments,ShippableId,TaxCodeId,SubscriptionStatusCode,CreateDate,CreateUser,ChangeDate,ChangeUser,SubAffiliate, DaysToCapture )");
                    insertQuery.Append(" VALUES (@OrderId,@StoreId,@OrderDate,@UserId,@AffiliateId,@Referrer,@Site,@WarehouseId,@ShipMethodId,@TaxRate,@PaymentTypeId,@PaymentDate,@PaymentGatewayId,@PaymentInstrumentId,@CurrencyCode,@ReferenceNumber,@EncryptedAccountData,@ProductId,@ProductName,@Price,@Weight,@CostOfGoods,@Quantity,@SplitShip,@PaymentDays,@NumberOfPayments,@ShippableId,@TaxCodeId,@SubscriptionStatusCode,@CreateDate,@CreateUser,@ChangeDate,@ChangeUser,@SubAffiliate, @DaysToCapture )");


                    insertQuery.Append("; SELECT @@IDENTITY");


                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {

                        database.AddInParameter(insertCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);

                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);

                        database.AddInParameter(insertCommand, "@OrderDate", System.Data.DbType.DateTime, this.OrderDate);

                        database.AddInParameter(insertCommand, "@UserId", System.Data.DbType.Int32, this.UserId);

                        database.AddInParameter(insertCommand, "@AffiliateId", System.Data.DbType.Int32, this.AffiliateId);

                        database.AddInParameter(insertCommand, "@Referrer", System.Data.DbType.String, this.Referrer);

                        database.AddInParameter(insertCommand, "@Site", System.Data.DbType.String, this.Site);

                        database.AddInParameter(insertCommand, "@WarehouseId", System.Data.DbType.Int32, this.WarehouseId);

                        database.AddInParameter(insertCommand, "@ShipMethodId", System.Data.DbType.Int32, this.ShipMethodId);

                        database.AddInParameter(insertCommand, "@TaxRate", System.Data.DbType.Decimal, this.TaxRate);

                        database.AddInParameter(insertCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);

                        database.AddInParameter(insertCommand, "@PaymentDate", System.Data.DbType.DateTime, this.PaymentDate);

                        database.AddInParameter(insertCommand, "@PaymentGatewayId", System.Data.DbType.Int32, this.PaymentGatewayId);

                        database.AddInParameter(insertCommand, "@PaymentInstrumentId", System.Data.DbType.Int16, this.PaymentInstrumentId);

                        database.AddInParameter(insertCommand, "@CurrencyCode", System.Data.DbType.String, this.CurrencyCode);

                        database.AddInParameter(insertCommand, "@ReferenceNumber", System.Data.DbType.String, this.ReferenceNumber);

                        database.AddInParameter(insertCommand, "@EncryptedAccountData", System.Data.DbType.String, this.EncryptedAccountData);

                        database.AddInParameter(insertCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);

                        database.AddInParameter(insertCommand, "@ProductName", System.Data.DbType.String, this.ProductName);

                        database.AddInParameter(insertCommand, "@Price", System.Data.DbType.Decimal, this.Price);

                        database.AddInParameter(insertCommand, "@Weight", System.Data.DbType.Decimal, this.Weight);

                        database.AddInParameter(insertCommand, "@CostOfGoods", System.Data.DbType.Decimal, this.CostOfGoods);

                        database.AddInParameter(insertCommand, "@Quantity", System.Data.DbType.Int16, this.Quantity);

                        database.AddInParameter(insertCommand, "@SplitShip", System.Data.DbType.Boolean, this.SplitShip);

                        database.AddInParameter(insertCommand, "@PaymentDays", System.Data.DbType.Int16, this.PaymentDays);

                        database.AddInParameter(insertCommand, "@NumberOfPayments", System.Data.DbType.Int16, this.NumberOfPayments);

                        database.AddInParameter(insertCommand, "@ShippableId", System.Data.DbType.Byte, this.ShippableId);

                        database.AddInParameter(insertCommand, "@TaxCodeId", System.Data.DbType.Int32, this.TaxCodeId);

                        database.AddInParameter(insertCommand, "@SubscriptionStatusCode", System.Data.DbType.Byte, this.SubscriptionStatusCode);

                        database.AddInParameter(insertCommand, "@CreateDate", System.Data.DbType.DateTime, this.CreateDate);

                        database.AddInParameter(insertCommand, "@CreateUser", System.Data.DbType.String, this.CreateUser);

                        database.AddInParameter(insertCommand, "@ChangeDate", System.Data.DbType.DateTime, this.ChangeDate);

                        database.AddInParameter(insertCommand, "@ChangeUser", System.Data.DbType.String, this.ChangeUser);

                        database.AddInParameter(insertCommand, "@SubAffiliate", System.Data.DbType.String, this.SubAffiliate);

                        database.AddInParameter(insertCommand, "@DaysToCapture", System.Data.DbType.Int16, this.DaysToCapture);

                        //RESULT IS NUMBER OF RECORDS AFFECTED;
                        result = database.ExecuteNonQuery(insertCommand);


                        this.OrderId = result;


                    }
                }
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        #endregion
    }
}
