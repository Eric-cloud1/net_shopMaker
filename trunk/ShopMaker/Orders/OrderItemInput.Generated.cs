//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Orders;
using MakerShop.Utility;

namespace MakerShop.Orders
{
    /// <summary>
    /// This class represents a OrderItemInput object in the database.
    /// </summary>
    public partial class OrderItemInput : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public OrderItemInput() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="orderItemInputId">Value of OrderItemInputId.</param>
        /// </summary>
        public OrderItemInput(Int32 orderItemInputId)
        {
            this.OrderItemInputId = orderItemInputId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "OrderItemInputId");
          columnNames.Add(prefix + "OrderItemId");
          columnNames.Add(prefix + "IsMerchantField");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "InputValue");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given OrderItemInput object from the given database data reader.
        /// </summary>
        /// <param name="orderItemInput">The OrderItemInput object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(OrderItemInput orderItemInput, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            orderItemInput.OrderItemInputId = dr.GetInt32(0);
            orderItemInput.OrderItemId = dr.GetInt32(1);
            orderItemInput.IsMerchantField = dr.GetBoolean(2);
            orderItemInput.Name = dr.GetString(3);
            orderItemInput.InputValue = dr.GetString(4);
            orderItemInput.IsDirty = false;
        }

#endregion

        private Int32 _OrderItemInputId;
        private Int32 _OrderItemId;
        private Boolean _IsMerchantField;
        private String _Name = string.Empty;
        private String _InputValue = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// OrderItemInputId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 OrderItemInputId
        {
            get { return this._OrderItemInputId; }
            set
            {
                if (this._OrderItemInputId != value)
                {
                    this._OrderItemInputId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderItemId
        /// </summary>
        public Int32 OrderItemId
        {
            get { return this._OrderItemId; }
            set
            {
                if (this._OrderItemId != value)
                {
                    this._OrderItemId = value;
                    this.IsDirty = true;
                    this._OrderItem = null;
                }
            }
        }

        /// <summary>
        /// IsMerchantField
        /// </summary>
        public Boolean IsMerchantField
        {
            get { return this._IsMerchantField; }
            set
            {
                if (this._IsMerchantField != value)
                {
                    this._IsMerchantField = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// InputValue
        /// </summary>
        public String InputValue
        {
            get { return this._InputValue; }
            set
            {
                if (this._InputValue != value)
                {
                    this._InputValue = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this OrderItemInput object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private OrderItem _OrderItem;

        /// <summary>
        /// The OrderItem object that this OrderItemInput object is associated with
        /// </summary>
        public OrderItem OrderItem
        {
            get
            {
                if (!this.OrderItemLoaded)
                {
                    this._OrderItem = OrderItemDataSource.Load(this.OrderItemId);
                }
                return this._OrderItem;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderItemLoaded { get { return ((this._OrderItem != null) && (this._OrderItem.OrderItemId == this.OrderItemId)); } }

#endregion

        /// <summary>
        /// Deletes this OrderItemInput object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_OrderItemInputs");
            deleteQuery.Append(" WHERE OrderItemInputId = @orderItemInputId");
            Database database = Token.Instance.Database;
            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@OrderItemInputId", System.Data.DbType.Int32, this.OrderItemInputId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }

            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this OrderItemInput object from the database for the given primary key.
        /// </summary>
        /// <param name="orderItemInputId">Value of OrderItemInputId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 orderItemInputId)
        {
            bool result = false;
            this.OrderItemInputId = orderItemInputId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderItemInputs");
            selectQuery.Append(" WHERE OrderItemInputId = @orderItemInputId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderItemInputId", System.Data.DbType.Int32, orderItemInputId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this OrderItemInput object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;
                
                if (this.OrderItemInputId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_OrderItemInputs");
                    selectQuery.Append(" WHERE OrderItemInputId = @orderItemInputId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@OrderItemInputId", System.Data.DbType.Int32, this.OrderItemInputId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_OrderItemInputs SET ");
                    updateQuery.Append("OrderItemId = @OrderItemId");
                    updateQuery.Append(", IsMerchantField = @IsMerchantField");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", InputValue = @InputValue");
                    updateQuery.Append(" WHERE OrderItemInputId = @OrderItemInputId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@OrderItemInputId", System.Data.DbType.Int32, this.OrderItemInputId);
                        database.AddInParameter(updateCommand, "@OrderItemId", System.Data.DbType.Int32, this.OrderItemId);
                        database.AddInParameter(updateCommand, "@IsMerchantField", System.Data.DbType.Boolean, this.IsMerchantField);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@InputValue", System.Data.DbType.String, this.InputValue);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_OrderItemInputs (OrderItemId, IsMerchantField, Name, InputValue)");
                    insertQuery.Append(" VALUES (@OrderItemId, @IsMerchantField, @Name, @InputValue)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@OrderItemInputId", System.Data.DbType.Int32, this.OrderItemInputId);
                        database.AddInParameter(insertCommand, "@OrderItemId", System.Data.DbType.Int32, this.OrderItemId);
                        database.AddInParameter(insertCommand, "@IsMerchantField", System.Data.DbType.Boolean, this.IsMerchantField);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@InputValue", System.Data.DbType.String, this.InputValue);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._OrderItemInputId = result;
                    }
                }
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
