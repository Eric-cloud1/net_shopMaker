//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Marketing;
using MakerShop.Orders;
using MakerShop.Payments;
using MakerShop.Stores;
using MakerShop.Users;
using MakerShop.Utility;

namespace MakerShop.Orders
{
    /// <summary>
    /// This class represents a Order object in the database.
    /// </summary>
    public partial class Order : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Order() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="orderId">Value of OrderId.</param>
        /// </summary>
        public Order(Int32 orderId)
        {
            this.OrderId = orderId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "OrderId");
          columnNames.Add(prefix + "OrderNumber");
          columnNames.Add(prefix + "OrderDate");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "UserId");
          columnNames.Add(prefix + "AffiliateId");
          columnNames.Add(prefix + "SubAffiliate");
          columnNames.Add(prefix + "BillToFirstName");
          columnNames.Add(prefix + "BillToLastName");
          columnNames.Add(prefix + "BillToCompany");
          columnNames.Add(prefix + "BillToAddress1");
          columnNames.Add(prefix + "BillToAddress2");
          columnNames.Add(prefix + "BillToCity");
          columnNames.Add(prefix + "BillToProvince");
          columnNames.Add(prefix + "BillToPostalCode");
          columnNames.Add(prefix + "BillToCountryCode");
          columnNames.Add(prefix + "BillToPhone");
          columnNames.Add(prefix + "BillToFax");
          columnNames.Add(prefix + "BillToEmail");
          columnNames.Add(prefix + "ProductSubtotal");
          columnNames.Add(prefix + "TotalCharges");
          columnNames.Add(prefix + "TotalPayments");
          columnNames.Add(prefix + "OrderStatusId");
          columnNames.Add(prefix + "Exported");
          columnNames.Add(prefix + "RemoteIP");
          columnNames.Add(prefix + "Referrer");
          columnNames.Add(prefix + "GoogleOrderNumber");
          columnNames.Add(prefix + "PaymentStatusId");
          columnNames.Add(prefix + "ShipmentStatusId");

          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Order object from the given database data reader.
        /// </summary>
        /// <param name="order">The Order object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Order order, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            order.OrderId = dr.GetInt32(0);
            order.OrderNumber = dr.GetInt32(1);
            order.OrderDate = LocaleHelper.ToLocalTime(dr.GetDateTime(2));
            order.StoreId = dr.GetInt32(3);
            order.UserId = NullableData.GetInt32(dr, 4);
            order.AffiliateId = NullableData.GetInt32(dr, 5);
            order.SubAffiliate = NullableData.GetString(dr, 6);
            order.BillToFirstName = NullableData.GetString(dr, 7);
            order.BillToLastName = NullableData.GetString(dr, 8);
            order.BillToCompany = NullableData.GetString(dr, 9);
            order.BillToAddress1 = NullableData.GetString(dr, 10);
            order.BillToAddress2 = NullableData.GetString(dr, 11);
            order.BillToCity = NullableData.GetString(dr, 12);
            order.BillToProvince = NullableData.GetString(dr, 13);
            order.BillToPostalCode = NullableData.GetString(dr, 14);
            order.BillToCountryCode = NullableData.GetString(dr, 15);
            order.BillToPhone = NullableData.GetString(dr, 16);
            order.BillToFax = NullableData.GetString(dr, 17);
            order.BillToEmail = NullableData.GetString(dr, 18);
            order.ProductSubtotal = dr.GetDecimal(19);
            order.TotalCharges = dr.GetDecimal(20);
            order.TotalPayments = dr.GetDecimal(21);
            order.OrderStatusId = dr.GetInt32(22);
            order.Exported = dr.GetBoolean(23);
            order.RemoteIP = NullableData.GetString(dr, 24);
            order.Referrer = NullableData.GetString(dr, 25);
            order.GoogleOrderNumber = NullableData.GetString(dr, 26);
            order.PaymentStatusId = dr.GetByte(27);
            order.ShipmentStatusId = dr.GetByte(28);
            order.FullName = order.BillToLastName + ", " + order.BillToFirstName;
            
            order.IsDirty = false;
        }

#endregion

        private Int32 _OrderId;
        private Int32 _OrderNumber;
        private string _FullName;
        private DateTime _OrderDate;
        private Int32 _StoreId;
        private Int32 _UserId;
        private Int32 _AffiliateId;
        private String _SubAffiliate;
        private String _BillToFirstName = string.Empty;
        private String _BillToLastName = string.Empty;
  
        private String _BillToCompany = string.Empty;
        private String _BillToAddress1 = string.Empty;
        private String _BillToAddress2 = string.Empty;
        private String _BillToCity = string.Empty;
        private String _BillToProvince = string.Empty;
        private String _BillToPostalCode = string.Empty;
        private String _BillToCountryCode = string.Empty;
        private String _BillToPhone = string.Empty;
        private String _BillToFax = string.Empty;
        private String _BillToEmail = string.Empty;
        private LSDecimal _ProductSubtotal;
        private LSDecimal _TotalCharges;
        private LSDecimal _TotalPayments;
        private Int32 _OrderStatusId;
        private Boolean _Exported;
        private String _RemoteIP = string.Empty;
        private String _Referrer = string.Empty;
        private String _GoogleOrderNumber = string.Empty;
        private Byte _PaymentStatusId;
        private Byte _ShipmentStatusId;

        private bool _IsDirty;

        /// <summary>
        /// OrderId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 OrderId
        {
            get { return this._OrderId; }
            set
            {
                if (this._OrderId != value)
                {
                    this._OrderId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// OrderNumber
        /// </summary>
        public Int32 OrderNumber
        {
            get { return this._OrderNumber; }
            set
            {
                if (this._OrderNumber != value)
                {
                    this._OrderNumber = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderNumber
        /// </summary>
        public string FullName
        {
            get { return this._FullName; }
            set
            {
                if (this._FullName != value)
                {
                    this._FullName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderDate
        /// </summary>
        public DateTime OrderDate
        {
            get { return this._OrderDate; }
            set
            {
                if (this._OrderDate != value)
                {
                    this._OrderDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// UserId
        /// </summary>
        public Int32 UserId
        {
            get { return this._UserId; }
            set
            {
                if (this._UserId != value)
                {
                    this._UserId = value;
                    this.IsDirty = true;
                    this._User = null;
                }
            }
        }

        /// <summary>
        /// AffiliateId
        /// </summary>
        public Int32 AffiliateId
        {
            get { return this._AffiliateId; }
            set
            {
                if (this._AffiliateId != value)
                {
                    this._AffiliateId = value;
                    this.IsDirty = true;
                    this._Affiliate = null;
                }
            }
        }

        /// <summary>
        /// SubAffiliate
        /// </summary>
        public String SubAffiliate
        {
            get { return this._SubAffiliate; }
            set
            {
                if (this._SubAffiliate != value)
                {
                    this._SubAffiliate = value;
                    this.IsDirty = true;
                }
            }
        }
        /// <summary>
        /// BillToFirstName
        /// </summary>
        public String BillToFirstName
        {
            get { return this._BillToFirstName; }
            set
            {
                if (this._BillToFirstName != value)
                {
                    this._BillToFirstName = value;
                    this.IsDirty = true;
                }
            }
        }

     

        /// <summary>
        /// BillToLastName
        /// </summary>
        public String BillToLastName
        {
            get { return this._BillToLastName; }
            set
            {
                if (this._BillToLastName != value)
                {
                    this._BillToLastName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToCompany
        /// </summary>
        public String BillToCompany
        {
            get { return this._BillToCompany; }
            set
            {
                if (this._BillToCompany != value)
                {
                    this._BillToCompany = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToAddress1
        /// </summary>
        public String BillToAddress1
        {
            get { return this._BillToAddress1; }
            set
            {
                if (this._BillToAddress1 != value)
                {
                    this._BillToAddress1 = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToAddress2
        /// </summary>
        public String BillToAddress2
        {
            get { return this._BillToAddress2; }
            set
            {
                if (this._BillToAddress2 != value)
                {
                    this._BillToAddress2 = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToCity
        /// </summary>
        public String BillToCity
        {
            get { return this._BillToCity; }
            set
            {
                if (this._BillToCity != value)
                {
                    this._BillToCity = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToProvince
        /// </summary>
        public String BillToProvince
        {
            get { return this._BillToProvince; }
            set
            {
                if (this._BillToProvince != value)
                {
                    this._BillToProvince = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToPostalCode
        /// </summary>
        public String BillToPostalCode
        {
            get { return this._BillToPostalCode; }
            set
            {
                if (this._BillToPostalCode != value)
                {
                    this._BillToPostalCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToCountryCode
        /// </summary>
        public String BillToCountryCode
        {
            get { return this._BillToCountryCode; }
            set
            {
                if (this._BillToCountryCode != value)
                {
                    this._BillToCountryCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToPhone
        /// </summary>
        public String BillToPhone
        {
            get { return this._BillToPhone; }
            set
            {
                if (this._BillToPhone != value)
                {
                    this._BillToPhone = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToFax
        /// </summary>
        public String BillToFax
        {
            get { return this._BillToFax; }
            set
            {
                if (this._BillToFax != value)
                {
                    this._BillToFax = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BillToEmail
        /// </summary>
        public String BillToEmail
        {
            get { return this._BillToEmail; }
            set
            {
                if (this._BillToEmail != value)
                {
                    this._BillToEmail = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ProductSubtotal
        /// </summary>
        public LSDecimal ProductSubtotal
        {
            get { return this._ProductSubtotal; }
            set
            {
                if (this._ProductSubtotal != value)
                {
                    this._ProductSubtotal = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TotalCharges
        /// </summary>
        public LSDecimal TotalCharges
        {
            get { return this._TotalCharges; }
            set
            {
                if (this._TotalCharges != value)
                {
                    this._TotalCharges = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TotalPayments
        /// </summary>
        public LSDecimal TotalPayments
        {
            get { return this._TotalPayments; }
            set
            {
                if (this._TotalPayments != value)
                {
                    this._TotalPayments = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderStatusId
        /// </summary>
        public Int32 OrderStatusId
        {
            get { return this._OrderStatusId; }
            set
            {
                if (this._OrderStatusId != value)
                {
                    this._OrderStatusId = value;
                    this.IsDirty = true;
                    this._OrderStatus = null;
                }
            }
        }

        /// <summary>
        /// Exported
        /// </summary>
        public Boolean Exported
        {
            get { return this._Exported; }
            set
            {
                if (this._Exported != value)
                {
                    this._Exported = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// RemoteIP
        /// </summary>
        public String RemoteIP
        {
            get { return this._RemoteIP; }
            set
            {
                if (this._RemoteIP != value)
                {
                    this._RemoteIP = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Referrer
        /// </summary>
        public String Referrer
        {
            get { return this._Referrer; }
            set
            {
                if (this._Referrer != value)
                {
                    this._Referrer = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// GoogleOrderNumber
        /// </summary>
        public String GoogleOrderNumber
        {
            get { return this._GoogleOrderNumber; }
            set
            {
                if (this._GoogleOrderNumber != value)
                {
                    this._GoogleOrderNumber = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PaymentStatusId
        /// </summary>
        public Byte PaymentStatusId
        {
            get { return this._PaymentStatusId; }
            set
            {
                if (this._PaymentStatusId != value)
                {
                    this._PaymentStatusId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ShipmentStatusId
        /// </summary>
        public Byte ShipmentStatusId
        {
            get { return this._ShipmentStatusId; }
            set
            {
                if (this._ShipmentStatusId != value)
                {
                    this._ShipmentStatusId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Order object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.GiftCertificateTransactionsLoaded && this.GiftCertificateTransactions.IsDirty) return true;
                if (this.CouponsLoaded && this.Coupons.IsDirty) return true;
                if (this.ItemsLoaded && this.Items.IsDirty) return true;
                if (this.NotesLoaded && this.Notes.IsDirty) return true;
                if (this.ShipmentsLoaded && this.Shipments.IsDirty) return true;
                if (this.PaymentsLoaded && this.Payments.IsDirty) return true;
                if (this.Order_ExLoaded && this.Order_Ex.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Order are properly associated with this Order object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.GiftCertificateTransactionsLoaded) { foreach (GiftCertificateTransaction giftCertificateTransaction in this.GiftCertificateTransactions) { giftCertificateTransaction.OrderId = this.OrderId; } }
            if (this.CouponsLoaded) { foreach (OrderCoupon orderCoupon in this.Coupons) { orderCoupon.OrderId = this.OrderId; } }
            if (this.ItemsLoaded) { foreach (OrderItem orderItem in this.Items) { orderItem.OrderId = this.OrderId; } }
            if (this.NotesLoaded) { foreach (OrderNote orderNote in this.Notes) { orderNote.OrderId = this.OrderId; } }
            if (this.ShipmentsLoaded) { foreach (OrderShipment orderShipment in this.Shipments) { orderShipment.OrderId = this.OrderId; } }
            if (this.PaymentsLoaded) { foreach (Payment payment in this.Payments) { payment.OrderId = this.OrderId; } }
            
        }

#region Parents
        private Affiliate _Affiliate;
        private OrderStatus _OrderStatus;
        private Store _Store;
        private User _User;

        /// <summary>
        /// The Affiliate object that this Order object is associated with
        /// </summary>
        public Affiliate Affiliate
        {
            get
            {
                if (!this.AffiliateLoaded)
                {
                    this._Affiliate = AffiliateDataSource.Load(this.AffiliateId);
                }
                return this._Affiliate;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool AffiliateLoaded { get { return ((this._Affiliate != null) && (this._Affiliate.AffiliateId == this.AffiliateId)); } }

        /// <summary>
        /// The OrderStatus object that this Order object is associated with
        /// </summary>
        public OrderStatus OrderStatus
        {
            get
            {
                if (!this.OrderStatusLoaded)
                {
                    this._OrderStatus = OrderStatusDataSource.Load(this.OrderStatusId);
                }
                return this._OrderStatus;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderStatusLoaded { get { return ((this._OrderStatus != null) && (this._OrderStatus.OrderStatusId == this.OrderStatusId)); } }

        /// <summary>
        /// The Store object that this Order object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

        /// <summary>
        /// The User object that this Order object is associated with
        /// </summary>
        public User User
        {
            get
            {
                if (!this.UserLoaded)
                {
                    this._User = UserDataSource.Load(this.UserId);
                }
                return this._User;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UserLoaded { get { return ((this._User != null) && (this._User.UserId == this.UserId)); } }

#endregion

#region Children
        private GiftCertificateTransactionCollection _GiftCertificateTransactions;
        private OrderCouponCollection _Coupons;
        private OrderItemCollection _Items;
        private OrderNoteCollection _Notes;
        private PhoneNotesCollection _PhoneNotes;
        private OrderShipmentCollection _Shipments;
        private PaymentCollection _Payments;
        private Order_Ex _Order_Ex;

        /// <summary>
        /// A collection of GiftCertificateTransaction objects associated with this Order object.
        /// </summary>
        public GiftCertificateTransactionCollection GiftCertificateTransactions
        {
            get
            {
                if (!this.GiftCertificateTransactionsLoaded)
                {
                    this._GiftCertificateTransactions = GiftCertificateTransactionDataSource.LoadForOrder(this.OrderId);
                }
                return this._GiftCertificateTransactions;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool GiftCertificateTransactionsLoaded { get { return (this._GiftCertificateTransactions != null); } }

        /// <summary>
        /// A collection of OrderCoupon objects associated with this Order object.
        /// </summary>
        public OrderCouponCollection Coupons
        {
            get
            {
                if (!this.CouponsLoaded)
                {
                    this._Coupons = OrderCouponDataSource.LoadForOrder(this.OrderId);
                }
                return this._Coupons;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CouponsLoaded { get { return (this._Coupons != null); } }

        /// <summary>
        /// A collection of OrderItem objects associated with this Order object.
        /// </summary>
        public OrderItemCollection Items
        {
            get
            {
                if (!this.ItemsLoaded)
                {
                    this._Items = OrderItemDataSource.LoadForOrder(this.OrderId);
                }
                return this._Items;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ItemsLoaded { get { return (this._Items != null); } }

        /// <summary>
        /// A collection of OrderNote objects associated with this Order object.
        /// </summary>
        public OrderNoteCollection Notes
        {
            get
            {
                if (!this.NotesLoaded)
                {
                    this._Notes = OrderNoteDataSource.LoadForOrder(this.OrderId);
                }
                return this._Notes;
            }
        }


        /// <summary>
        /// A collection of OrderNote objects associated with this Order object.
        /// </summary>
        public PhoneNotesCollection PhoneNotes
        {
            get
            {
                if (!this.PhoneNotesLoaded)
                {
                    this._PhoneNotes = PhoneNotesDataSource.LoadForCriteria(string.Format("OrderId ={0}",this.OrderId));
                }
                return this._PhoneNotes;
            }
        }



        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PhoneNotesLoaded { get { return (this._PhoneNotes != null); } }



        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool NotesLoaded { get { return (this._Notes != null); } }

        /// <summary>
        /// A collection of OrderShipment objects associated with this Order object.
        /// </summary>
        public OrderShipmentCollection Shipments
        {
            get
            {
                if (!this.ShipmentsLoaded)
                {
                    this._Shipments = OrderShipmentDataSource.LoadForOrder(this.OrderId);
                }
                return this._Shipments;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipmentsLoaded { get { return (this._Shipments != null); } }
        /// <summary>
        /// Order_ex object associated with this Order object.
        /// </summary>
        public Order_Ex Order_Ex
        {
            get
            {
                if (!this.Order_ExLoaded)
                {
                    this._Order_Ex = Order_ExDataSource.Load(this.OrderId);
                }
                return this._Order_Ex;
            }
        }

        /// <summary>
        /// A collection of Payment objects associated with this Order object.
        /// </summary>
        public PaymentCollection Payments
        {
            get
            {
                if (!this.PaymentsLoaded)
                {
                    this._Payments = PaymentDataSource.LoadForOrder(this.OrderId);
                }
                return this._Payments;
            }
        }


        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PaymentsLoaded { get { return (this._Payments != null); } }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool Order_ExLoaded { get { return (this._Order_Ex != null); } }
#endregion

        /// <summary>
        /// Deletes this Order object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Orders");
            deleteQuery.Append(" WHERE OrderId = @orderId");
            Database database = Token.Instance.Database;
            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Order object from the database for the given primary key.
        /// </summary>
        /// <param name="orderId">Value of OrderId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 orderId)
        {
            bool result = false;
            this.OrderId = orderId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Orders");
            selectQuery.Append(" WHERE OrderId = @orderId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr); ;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Load this Order object from the database for the given primary key.
        /// </summary>
        /// <param name="orderId">Value of OrderId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool LoadParent(Int32 orderId)
        {
            bool result = false;
            this.OrderId = orderId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT DISTINCT " + GetColumnNames("o"));
            selectQuery.Append(" FROM ac_Orders o");
            //screen to remove child orders
            selectQuery.Append(" join xm_OrderDetail od on o.OrderId = od.ParentOrderId");
            selectQuery.Append(" WHERE od.OrderId = @orderId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr); ;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Order object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                AuditEventDataSource.AuditInfoBegin(this.RemoteIP);

                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.OrderId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.OrderDate == System.DateTime.MinValue) this.OrderDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_Orders");
                    selectQuery.Append(" WHERE OrderId = @orderId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Orders SET ");
                    updateQuery.Append("OrderNumber = @OrderNumber");
                    updateQuery.Append(", OrderDate = @OrderDate");
                    updateQuery.Append(", StoreId = @StoreId");
                    updateQuery.Append(", UserId = @UserId");
                    updateQuery.Append(", AffiliateId = @AffiliateId");
                    updateQuery.Append(", SubAffiliate = @SubAffiliate");
                    updateQuery.Append(", BillToFirstName = @BillToFirstName");
                    updateQuery.Append(", BillToLastName = @BillToLastName");
                    updateQuery.Append(", BillToCompany = @BillToCompany");
                    updateQuery.Append(", BillToAddress1 = @BillToAddress1");
                    updateQuery.Append(", BillToAddress2 = @BillToAddress2");
                    updateQuery.Append(", BillToCity = @BillToCity");
                    updateQuery.Append(", BillToProvince = @BillToProvince");
                    updateQuery.Append(", BillToPostalCode = @BillToPostalCode");
                    updateQuery.Append(", BillToCountryCode = @BillToCountryCode");
                    updateQuery.Append(", BillToPhone = @BillToPhone");
                    updateQuery.Append(", BillToFax = @BillToFax");
                    updateQuery.Append(", BillToEmail = @BillToEmail");
                    updateQuery.Append(", ProductSubtotal = @ProductSubtotal");
                    updateQuery.Append(", TotalCharges = @TotalCharges");
                    updateQuery.Append(", TotalPayments = @TotalPayments");
                    updateQuery.Append(", OrderStatusId = @OrderStatusId");
                    updateQuery.Append(", Exported = @Exported");
                    updateQuery.Append(", RemoteIP = @RemoteIP");
                    updateQuery.Append(", Referrer = @Referrer");
                    updateQuery.Append(", GoogleOrderNumber = @GoogleOrderNumber");
                    updateQuery.Append(", PaymentStatusId = @PaymentStatusId");
                    updateQuery.Append(", ShipmentStatusId = @ShipmentStatusId");
                    updateQuery.Append(" WHERE OrderId = @OrderId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);
                        database.AddInParameter(updateCommand, "@OrderNumber", System.Data.DbType.Int32, this.OrderNumber);
                        database.AddInParameter(updateCommand, "@OrderDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.OrderDate));
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@UserId", System.Data.DbType.Int32, NullableData.DbNullify(this.UserId));
                        database.AddInParameter(updateCommand, "@AffiliateId", System.Data.DbType.Int32, NullableData.DbNullify(this.AffiliateId));
                        database.AddInParameter(updateCommand, "@SubAffiliate", System.Data.DbType.String, NullableData.DbNullify(this.SubAffiliate));
                        database.AddInParameter(updateCommand, "@BillToFirstName", System.Data.DbType.String, NullableData.DbNullify(this.BillToFirstName));
                        database.AddInParameter(updateCommand, "@BillToLastName", System.Data.DbType.String, NullableData.DbNullify(this.BillToLastName));
                        database.AddInParameter(updateCommand, "@BillToCompany", System.Data.DbType.String, NullableData.DbNullify(this.BillToCompany));
                        database.AddInParameter(updateCommand, "@BillToAddress1", System.Data.DbType.String, NullableData.DbNullify(this.BillToAddress1));
                        database.AddInParameter(updateCommand, "@BillToAddress2", System.Data.DbType.String, NullableData.DbNullify(this.BillToAddress2));
                        database.AddInParameter(updateCommand, "@BillToCity", System.Data.DbType.String, NullableData.DbNullify(this.BillToCity));
                        database.AddInParameter(updateCommand, "@BillToProvince", System.Data.DbType.String, NullableData.DbNullify(this.BillToProvince));
                        database.AddInParameter(updateCommand, "@BillToPostalCode", System.Data.DbType.String, NullableData.DbNullify(this.BillToPostalCode));
                        database.AddInParameter(updateCommand, "@BillToCountryCode", System.Data.DbType.String, NullableData.DbNullify(this.BillToCountryCode));
                        database.AddInParameter(updateCommand, "@BillToPhone", System.Data.DbType.String, NullableData.DbNullify(this.BillToPhone));
                        database.AddInParameter(updateCommand, "@BillToFax", System.Data.DbType.String, NullableData.DbNullify(this.BillToFax));
                        database.AddInParameter(updateCommand, "@BillToEmail", System.Data.DbType.String, NullableData.DbNullify(this.BillToEmail));
                        database.AddInParameter(updateCommand, "@ProductSubtotal", System.Data.DbType.Decimal, this.ProductSubtotal);
                        database.AddInParameter(updateCommand, "@TotalCharges", System.Data.DbType.Decimal, this.TotalCharges);
                        database.AddInParameter(updateCommand, "@TotalPayments", System.Data.DbType.Decimal, this.TotalPayments);
                        database.AddInParameter(updateCommand, "@OrderStatusId", System.Data.DbType.Int32, this.OrderStatusId);
                        database.AddInParameter(updateCommand, "@Exported", System.Data.DbType.Boolean, this.Exported);
                        database.AddInParameter(updateCommand, "@RemoteIP", System.Data.DbType.String, NullableData.DbNullify(this.RemoteIP));
                        database.AddInParameter(updateCommand, "@Referrer", System.Data.DbType.String, NullableData.DbNullify(this.Referrer));
                        database.AddInParameter(updateCommand, "@GoogleOrderNumber", System.Data.DbType.String, NullableData.DbNullify(this.GoogleOrderNumber));
                        database.AddInParameter(updateCommand, "@PaymentStatusId", System.Data.DbType.Byte, this.PaymentStatusId);
                        database.AddInParameter(updateCommand, "@ShipmentStatusId", System.Data.DbType.Byte, this.ShipmentStatusId);

                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Orders (OrderNumber, OrderDate, StoreId, UserId, AffiliateId, SubAffiliate, BillToFirstName, BillToLastName, BillToCompany, BillToAddress1, BillToAddress2, BillToCity, BillToProvince, BillToPostalCode, BillToCountryCode, BillToPhone, BillToFax, BillToEmail, ProductSubtotal, TotalCharges, TotalPayments, OrderStatusId, Exported, RemoteIP, Referrer, GoogleOrderNumber, PaymentStatusId, ShipmentStatusId)");
                    insertQuery.Append(" VALUES (@OrderNumber, @OrderDate, @StoreId, @UserId, @AffiliateId, @SubAffiliate, @BillToFirstName, @BillToLastName, @BillToCompany, @BillToAddress1, @BillToAddress2, @BillToCity, @BillToProvince, @BillToPostalCode, @BillToCountryCode, @BillToPhone, @BillToFax, @BillToEmail, @ProductSubtotal, @TotalCharges, @TotalPayments, @OrderStatusId, @Exported, @RemoteIP, @Referrer, @GoogleOrderNumber, @PaymentStatusId, @ShipmentStatusId)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);
                        database.AddInParameter(insertCommand, "@OrderNumber", System.Data.DbType.Int32, this.OrderNumber);
                        database.AddInParameter(insertCommand, "@OrderDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.OrderDate));
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@UserId", System.Data.DbType.Int32, NullableData.DbNullify(this.UserId));
                        database.AddInParameter(insertCommand, "@AffiliateId", System.Data.DbType.Int32, NullableData.DbNullify(this.AffiliateId));
                        database.AddInParameter(insertCommand, "@SubAffiliate", System.Data.DbType.String, NullableData.DbNullify(this.SubAffiliate));
                        database.AddInParameter(insertCommand, "@BillToFirstName", System.Data.DbType.String, NullableData.DbNullify(this.BillToFirstName));
                        database.AddInParameter(insertCommand, "@BillToLastName", System.Data.DbType.String, NullableData.DbNullify(this.BillToLastName));
                        database.AddInParameter(insertCommand, "@BillToCompany", System.Data.DbType.String, NullableData.DbNullify(this.BillToCompany));
                        database.AddInParameter(insertCommand, "@BillToAddress1", System.Data.DbType.String, NullableData.DbNullify(this.BillToAddress1));
                        database.AddInParameter(insertCommand, "@BillToAddress2", System.Data.DbType.String, NullableData.DbNullify(this.BillToAddress2));
                        database.AddInParameter(insertCommand, "@BillToCity", System.Data.DbType.String, NullableData.DbNullify(this.BillToCity));
                        database.AddInParameter(insertCommand, "@BillToProvince", System.Data.DbType.String, NullableData.DbNullify(this.BillToProvince));
                        database.AddInParameter(insertCommand, "@BillToPostalCode", System.Data.DbType.String, NullableData.DbNullify(this.BillToPostalCode));
                        database.AddInParameter(insertCommand, "@BillToCountryCode", System.Data.DbType.String, NullableData.DbNullify(this.BillToCountryCode));
                        database.AddInParameter(insertCommand, "@BillToPhone", System.Data.DbType.String, NullableData.DbNullify(this.BillToPhone));
                        database.AddInParameter(insertCommand, "@BillToFax", System.Data.DbType.String, NullableData.DbNullify(this.BillToFax));
                        database.AddInParameter(insertCommand, "@BillToEmail", System.Data.DbType.String, NullableData.DbNullify(this.BillToEmail));
                        database.AddInParameter(insertCommand, "@ProductSubtotal", System.Data.DbType.Decimal, this.ProductSubtotal);
                        database.AddInParameter(insertCommand, "@TotalCharges", System.Data.DbType.Decimal, this.TotalCharges);
                        database.AddInParameter(insertCommand, "@TotalPayments", System.Data.DbType.Decimal, this.TotalPayments);
                        database.AddInParameter(insertCommand, "@OrderStatusId", System.Data.DbType.Int32, this.OrderStatusId);
                        database.AddInParameter(insertCommand, "@Exported", System.Data.DbType.Boolean, this.Exported);
                        database.AddInParameter(insertCommand, "@RemoteIP", System.Data.DbType.String, NullableData.DbNullify(this.RemoteIP));
                        database.AddInParameter(insertCommand, "@Referrer", System.Data.DbType.String, NullableData.DbNullify(this.Referrer));
                        database.AddInParameter(insertCommand, "@GoogleOrderNumber", System.Data.DbType.String, NullableData.DbNullify(this.GoogleOrderNumber));
                        database.AddInParameter(insertCommand, "@PaymentStatusId", System.Data.DbType.Byte, this.PaymentStatusId);
                        database.AddInParameter(insertCommand, "@ShipmentStatusId", System.Data.DbType.Byte, this.ShipmentStatusId);

                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._OrderId = result;
                    }
                }
                this.SaveChildren();
                AuditEventDataSource.AuditInfoEnd();
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Order object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.GiftCertificateTransactionsLoaded) this.GiftCertificateTransactions.Save();
            if (this.CouponsLoaded) this.Coupons.Save();
            if (this.ItemsLoaded) this.Items.Save();
            if (this.NotesLoaded) this.Notes.Save();
            if (this.ShipmentsLoaded) this.Shipments.Save();
            if (this.PaymentsLoaded) this.Payments.Save();
            if (this.Order_ExLoaded) this.Order_Ex.Save();
        }

     }
}
