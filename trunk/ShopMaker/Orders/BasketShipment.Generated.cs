//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Orders;
using MakerShop.Shipping;
using MakerShop.Users;
using MakerShop.Utility;

namespace MakerShop.Orders
{
    /// <summary>
    /// This class represents a BasketShipment object in the database.
    /// </summary>
    public partial class BasketShipment : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public BasketShipment() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="basketShipmentId">Value of BasketShipmentId.</param>
        /// </summary>
        public BasketShipment(Int32 basketShipmentId)
        {
            this.BasketShipmentId = basketShipmentId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "BasketShipmentId");
          columnNames.Add(prefix + "BasketId");
          columnNames.Add(prefix + "WarehouseId");
          columnNames.Add(prefix + "ShipMethodId");
          columnNames.Add(prefix + "AddressId");
          columnNames.Add(prefix + "ShipMessage");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given BasketShipment object from the given database data reader.
        /// </summary>
        /// <param name="basketShipment">The BasketShipment object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(BasketShipment basketShipment, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            basketShipment.BasketShipmentId = dr.GetInt32(0);
            basketShipment.BasketId = dr.GetInt32(1);
            basketShipment.WarehouseId = NullableData.GetInt32(dr, 2);
            basketShipment.ShipMethodId = NullableData.GetInt32(dr, 3);
            basketShipment.AddressId = NullableData.GetInt32(dr, 4);
            basketShipment.ShipMessage = NullableData.GetString(dr, 5);
            basketShipment.IsDirty = false;
        }

#endregion

        private Int32 _BasketShipmentId;
        private Int32 _BasketId;
        private Int32 _WarehouseId;
        private Int32 _ShipMethodId;
        private Int32 _AddressId;
        private String _ShipMessage = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// BasketShipmentId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 BasketShipmentId
        {
            get { return this._BasketShipmentId; }
            set
            {
                if (this._BasketShipmentId != value)
                {
                    this._BasketShipmentId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BasketId
        /// </summary>
        public Int32 BasketId
        {
            get { return this._BasketId; }
            set
            {
                if (this._BasketId != value)
                {
                    this._BasketId = value;
                    this.IsDirty = true;
                    this._Basket = null;
                }
            }
        }

        /// <summary>
        /// WarehouseId
        /// </summary>
        public Int32 WarehouseId
        {
            get { return this._WarehouseId; }
            set
            {
                if (this._WarehouseId != value)
                {
                    this._WarehouseId = value;
                    this.IsDirty = true;
                    this._Warehouse = null;
                }
            }
        }

        /// <summary>
        /// ShipMethodId
        /// </summary>
        public Int32 ShipMethodId
        {
            get { return this._ShipMethodId; }
            set
            {
                if (this._ShipMethodId != value)
                {
                    this._ShipMethodId = value;
                    this.IsDirty = true;
                    this._ShipMethod = null;
                }
            }
        }

        /// <summary>
        /// AddressId
        /// </summary>
        public Int32 AddressId
        {
            get { return this._AddressId; }
            set
            {
                if (this._AddressId != value)
                {
                    this._AddressId = value;
                    this.IsDirty = true;
                    this._Address = null;
                }
            }
        }

        /// <summary>
        /// ShipMessage
        /// </summary>
        public String ShipMessage
        {
            get { return this._ShipMessage; }
            set
            {
                if (this._ShipMessage != value)
                {
                    this._ShipMessage = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this BasketShipment object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private Address _Address;
        private Basket _Basket;
        private ShipMethod _ShipMethod;
        private Warehouse _Warehouse;

        /// <summary>
        /// The Address object that this BasketShipment object is associated with
        /// </summary>
        public Address Address
        {
            get
            {
                if (!this.AddressLoaded)
                {
                    this._Address = AddressDataSource.Load(this.AddressId);
                }
                return this._Address;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool AddressLoaded { get { return ((this._Address != null) && (this._Address.AddressId == this.AddressId)); } }

        /// <summary>
        /// The Basket object that this BasketShipment object is associated with
        /// </summary>
        public Basket Basket
        {
            get
            {
                if (!this.BasketLoaded)
                {
                    this._Basket = BasketDataSource.Load(this.BasketId);
                }
                return this._Basket;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketLoaded { get { return ((this._Basket != null) && (this._Basket.BasketId == this.BasketId)); } }

        /// <summary>
        /// The ShipMethod object that this BasketShipment object is associated with
        /// </summary>
        public ShipMethod ShipMethod
        {
            get
            {
                if (!this.ShipMethodLoaded)
                {
                    this._ShipMethod = ShipMethodDataSource.Load(this.ShipMethodId);
                }
                return this._ShipMethod;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipMethodLoaded { get { return ((this._ShipMethod != null) && (this._ShipMethod.ShipMethodId == this.ShipMethodId)); } }

        /// <summary>
        /// The Warehouse object that this BasketShipment object is associated with
        /// </summary>
        public Warehouse Warehouse
        {
            get
            {
                if (!this.WarehouseLoaded)
                {
                    this._Warehouse = WarehouseDataSource.Load(this.WarehouseId);
                }
                return this._Warehouse;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WarehouseLoaded { get { return ((this._Warehouse != null) && (this._Warehouse.WarehouseId == this.WarehouseId)); } }

#endregion

        /// <summary>
        /// Deletes this BasketShipment object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_BasketShipments");
            deleteQuery.Append(" WHERE BasketShipmentId = @basketShipmentId");
            Database database = Token.Instance.Database;

            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@BasketShipmentId", System.Data.DbType.Int32, this.BasketShipmentId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this BasketShipment object from the database for the given primary key.
        /// </summary>
        /// <param name="basketShipmentId">Value of BasketShipmentId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 basketShipmentId)
        {
            bool result = false;
            this.BasketShipmentId = basketShipmentId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_BasketShipments");
            selectQuery.Append(" WHERE BasketShipmentId = @basketShipmentId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@basketShipmentId", System.Data.DbType.Int32, basketShipmentId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this BasketShipment object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;
                
                if (this.BasketShipmentId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_BasketShipments");
                    selectQuery.Append(" WHERE BasketShipmentId = @basketShipmentId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@BasketShipmentId", System.Data.DbType.Int32, this.BasketShipmentId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_BasketShipments SET ");
                    updateQuery.Append("BasketId = @BasketId");
                    updateQuery.Append(", WarehouseId = @WarehouseId");
                    updateQuery.Append(", ShipMethodId = @ShipMethodId");
                    updateQuery.Append(", AddressId = @AddressId");
                    updateQuery.Append(", ShipMessage = @ShipMessage");
                    updateQuery.Append(" WHERE BasketShipmentId = @BasketShipmentId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@BasketShipmentId", System.Data.DbType.Int32, this.BasketShipmentId);
                        database.AddInParameter(updateCommand, "@BasketId", System.Data.DbType.Int32, this.BasketId);
                        database.AddInParameter(updateCommand, "@WarehouseId", System.Data.DbType.Int32, NullableData.DbNullify(this.WarehouseId));
                        database.AddInParameter(updateCommand, "@ShipMethodId", System.Data.DbType.Int32, NullableData.DbNullify(this.ShipMethodId));
                        database.AddInParameter(updateCommand, "@AddressId", System.Data.DbType.Int32, NullableData.DbNullify(this.AddressId));
                        database.AddInParameter(updateCommand, "@ShipMessage", System.Data.DbType.String, NullableData.DbNullify(this.ShipMessage));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_BasketShipments (BasketId, WarehouseId, ShipMethodId, AddressId, ShipMessage)");
                    insertQuery.Append(" VALUES (@BasketId, @WarehouseId, @ShipMethodId, @AddressId, @ShipMessage)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@BasketShipmentId", System.Data.DbType.Int32, this.BasketShipmentId);
                        database.AddInParameter(insertCommand, "@BasketId", System.Data.DbType.Int32, this.BasketId);
                        database.AddInParameter(insertCommand, "@WarehouseId", System.Data.DbType.Int32, NullableData.DbNullify(this.WarehouseId));
                        database.AddInParameter(insertCommand, "@ShipMethodId", System.Data.DbType.Int32, NullableData.DbNullify(this.ShipMethodId));
                        database.AddInParameter(insertCommand, "@AddressId", System.Data.DbType.Int32, NullableData.DbNullify(this.AddressId));
                        database.AddInParameter(insertCommand, "@ShipMessage", System.Data.DbType.String, NullableData.DbNullify(this.ShipMessage));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._BasketShipmentId = result;
                    }
                }
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
