//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Utility;

namespace MakerShop.Orders
{
    /// <summary>
    /// DataSource class for OrderNote objects
    /// </summary>
    public partial class OrderNoteDataSource
    {
        /// <summary>
        /// Deletes a OrderNote object from the database
        /// </summary>
        /// <param name="orderNote">The OrderNote object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(OrderNote orderNote)
        {
            return orderNote.Delete();
        }

        /// <summary>
        /// Deletes a OrderNote object with given id from the database
        /// </summary>
        /// <param name="orderNoteId">Value of OrderNoteId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 orderNoteId)
        {
            OrderNote orderNote = new OrderNote();
            if (orderNote.Load(orderNoteId)) return orderNote.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a OrderNote object to the database.
        /// </summary>
        /// <param name="orderNote">The OrderNote object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(OrderNote orderNote) { return orderNote.Save(); }

        /// <summary>
        /// Loads a OrderNote object for given Id from the database.
        /// </summary>
        /// <param name="orderNoteId">Value of OrderNoteId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded OrderNote object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNote Load(Int32 orderNoteId)
        {
            return OrderNoteDataSource.Load(orderNoteId, true);
        }

        /// <summary>
        /// Loads a OrderNote object for given Id from the database.
        /// </summary>
        /// <param name="orderNoteId">Value of OrderNoteId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded OrderNote object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNote Load(Int32 orderNoteId, bool useCache)
        {
            if (orderNoteId == 0) return null;
            OrderNote orderNote = null;
            string key = "OrderNote_" + orderNoteId.ToString();
            if (useCache)
            {
                orderNote = ContextCache.GetObject(key) as OrderNote;
                if (orderNote != null) return orderNote;
            }
            orderNote = new OrderNote();
            if (orderNote.Load(orderNoteId))
            {
                if (useCache) ContextCache.SetObject(key, orderNote);
                return orderNote;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of OrderNote objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the OrderNote objects that should be loaded.</param>
        /// <returns>The number of OrderNote objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_OrderNotes" + whereClause);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderNote objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "CreatedDate";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderNote.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderNotes");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            OrderNoteCollection results = new OrderNoteCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderNote orderNote = new OrderNote();
                        OrderNote.LoadDataReader(orderNote, dr);
                        results.Add(orderNote);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderNote objects for the given OrderId in the database.
        /// <param name="orderId">The given OrderId</param>
        /// </summary>
        /// <returns>The Number of OrderNote objects for the given OrderId in the database.</returns>
        public static int CountForOrder(Int32 orderId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_OrderNotes WHERE OrderId = @orderId");
            database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForOrder(Int32 orderId)
        {
            return LoadForOrder(orderId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForOrder(Int32 orderId, string sortExpression)
        {
            return LoadForOrder(orderId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForOrder(Int32 orderId, int maximumRows, int startRowIndex)
        {
            return LoadForOrder(orderId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForOrder(Int32 orderId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "CreatedDate";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderNote.GetColumnNames("aON" ));
            selectQuery.Append(" FROM ac_OrderNotes  aON join xm_OrderDetail od on aON.OrderId = od.OrderId ");
            selectQuery.Append(" join xm_OrderDetail od2 on od.ParentOrderId = od2.ParentOrderId ");
            selectQuery.Append(" WHERE od2.OrderId = @orderId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
            //EXECUTE THE COMMAND
            OrderNoteCollection results = new OrderNoteCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderNote orderNote = new OrderNote();
                        OrderNote.LoadDataReader(orderNote, dr);
                        results.Add(orderNote);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }



        /// <summary>
        /// Loads a collection of OrderNote objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadAllForOrder(Int32 orderId)
        {
            return LoadAllForOrder(orderId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadAllForOrder(Int32 orderId, string sortExpression)
        {
            return LoadAllForOrder(orderId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadAllForOrder(Int32 orderId, int maximumRows, int startRowIndex)
        {
            return LoadAllForOrder(orderId, maximumRows, startRowIndex, string.Empty);
        }



        /// <summary>
        /// Loads a collection of OrderNote objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadAllForOrder(Int32 orderId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "CreatedDate";


            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderNote.GetColumnNames("aON"));
            selectQuery.Append(" FROM ac_OrderNotes  aON join xm_OrderDetail od on aON.OrderId = od.OrderId ");
            selectQuery.Append(" join xm_OrderDetail od2 on od.ParentOrderId = od2.ParentOrderId ");
            selectQuery.Append(" WHERE od2.OrderId = @orderId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
            //EXECUTE THE COMMAND
            OrderNoteCollection results = new OrderNoteCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderNote orderNote = new OrderNote();
                        OrderNote.LoadDataReader(orderNote, dr);
                        results.Add(orderNote);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }

            return results;
        }





        /// <summary>
        /// Counts the number of OrderNote objects for the given UserId in the database.
        /// <param name="userId">The given UserId</param>
        /// </summary>
        /// <returns>The Number of OrderNote objects for the given UserId in the database.</returns>
        public static int CountForUser(Int32 userId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_OrderNotes WHERE UserId = @userId");
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, NullableData.DbNullify(userId));
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given UserId from the database
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForUser(Int32 userId)
        {
            return LoadForUser(userId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given UserId from the database
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForUser(Int32 userId, string sortExpression)
        {
            return LoadForUser(userId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given UserId from the database
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForUser(Int32 userId, int maximumRows, int startRowIndex)
        {
            return LoadForUser(userId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderNote objects for the given UserId from the database
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderNote objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderNoteCollection LoadForUser(Int32 userId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "CreatedDate";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderNote.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderNotes");
            selectQuery.Append(" WHERE UserId = @userId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, NullableData.DbNullify(userId));
            //EXECUTE THE COMMAND
            OrderNoteCollection results = new OrderNoteCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderNote orderNote = new OrderNote();
                        OrderNote.LoadDataReader(orderNote, dr);
                        results.Add(orderNote);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given OrderNote object to the database.
        /// </summary>
        /// <param name="orderNote">The OrderNote object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(OrderNote orderNote) { return orderNote.Save(); }

    }
}
