//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Stores;
using MakerShop.Utility;

namespace MakerShop.Orders.ChargeBack
{
    public partial class ChargeBackDetails : IPersistable
    {

        #region Constructors

        public ChargeBackDetails() { }

        public ChargeBackDetails(Int32 pOrderId, Int32 pPaymentId, Int32 pTransactionId)
        {
            this.OrderId = pOrderId;
            this.PaymentId = pPaymentId;
            this.TransactionId = pTransactionId;

        }

        public static string GetColumnNames(string prefix)
        {
            if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
            else prefix = prefix + ".";
            List<string> columnNames = new List<string>();
            columnNames.Add(prefix + "OrderId");
            columnNames.Add(prefix + "PaymentId");
            columnNames.Add(prefix + "TransactionId");
            columnNames.Add(prefix + "CreateDate");
            columnNames.Add(prefix + "InitiateDate");
            columnNames.Add(prefix + "ReasonCode");
            columnNames.Add(prefix + "ReasonDescription");
            columnNames.Add(prefix + "CaseNumber");
            columnNames.Add(prefix + "ReferenceNumber");
            columnNames.Add(prefix + "ChargeBackStatus");
            columnNames.Add(prefix + "Comment");


            return string.Join(",", columnNames.ToArray());
        }

        public static void LoadDataReader(ChargeBackDetails pChargeBackDetails, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA

            pChargeBackDetails.OrderId = dr.GetInt32(0);

            pChargeBackDetails.PaymentId = dr.GetInt32(1);

            pChargeBackDetails.TransactionId = dr.GetInt32(2);


            pChargeBackDetails.CreateDate = NullableData.GetDateTime(dr, 3);

            pChargeBackDetails.InitiateDate = NullableData.GetDateTime(dr, 4);

            pChargeBackDetails.ReasonCode = NullableData.GetString(dr, 5);

            pChargeBackDetails.ReasonDescription = NullableData.GetString(dr, 6);

            pChargeBackDetails.CaseNumber = NullableData.GetString(dr, 7);

            pChargeBackDetails.ReferenceNumber = NullableData.GetString(dr, 8);

            pChargeBackDetails.ChargeBackStatus = NullableData.GetInt16(dr, 9);

            pChargeBackDetails.Comment = NullableData.GetString(dr, 10);

            pChargeBackDetails.IsDirty = false;
        }

        #endregion

        

        #region CURD

        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM xm_ChargeBackDetails");
            deleteQuery.Append(" WHERE  OrderId = @OrderId AND  PaymentId = @PaymentId AND  TransactionId = @TransactionId  ");
            Database database = Token.Instance.Database;
            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null);
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);
                database.AddInParameter(deleteCommand, "@PaymentId", System.Data.DbType.Int32, this.PaymentId);
                database.AddInParameter(deleteCommand, "@TransactionId", System.Data.DbType.Int32, this.TransactionId);

                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
            return (recordsAffected > 0);
        }

        public virtual bool Load(Int32 pOrderId, Int32 pPaymentId, Int32 pTransactionId)
        {
            bool result = false;

            this.OrderId = pOrderId;

            this.PaymentId = pPaymentId;

            this.TransactionId = pTransactionId;


            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM xm_ChargeBackDetails");
            selectQuery.Append(" WHERE  OrderId = @OrderId AND  PaymentId = @PaymentId AND  TransactionId = @TransactionId  ");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());


            database.AddInParameter(selectCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);

            database.AddInParameter(selectCommand, "@PaymentId", System.Data.DbType.Int32, this.PaymentId);

            database.AddInParameter(selectCommand, "@TransactionId", System.Data.DbType.Int32, this.TransactionId);


            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr); ;
                }
                dr.Close();
            }
            return result;
        }

        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;

                if (recordExists)
                {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM xm_ChargeBackDetails");
                    selectQuery.Append(" WHERE  OrderId = @OrderId AND  PaymentId = @PaymentId AND  TransactionId = @TransactionId ");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {

                        database.AddInParameter(selectCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);

                        database.AddInParameter(selectCommand, "@PaymentId", System.Data.DbType.Int32, this.PaymentId);

                        database.AddInParameter(selectCommand, "@TransactionId", System.Data.DbType.Int32, this.TransactionId);


                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE xm_ChargeBackDetails SET ");

                    updateQuery.Append("InitiateDate = @InitiateDate,ReasonCode = @ReasonCode,ReasonDescription = @ReasonDescription,CaseNumber = @CaseNumber,ReferenceNumber = @ReferenceNumber,ChargeBackStatus = @ChargeBackStatus,Comment = @Comment");

                    updateQuery.Append(" WHERE  OrderId = @OrderId AND  PaymentId = @PaymentId AND  TransactionId = @TransactionId ");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {


                        database.AddInParameter(updateCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);

                        database.AddInParameter(updateCommand, "@PaymentId", System.Data.DbType.Int32, this.PaymentId);

                        database.AddInParameter(updateCommand, "@TransactionId", System.Data.DbType.Int32, this.TransactionId);

                        database.AddInParameter(updateCommand, "@InitiateDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.InitiateDate));

                        database.AddInParameter(updateCommand, "@ReasonCode", System.Data.DbType.String, this.ReasonCode);

                        database.AddInParameter(updateCommand, "@ReasonDescription", System.Data.DbType.String, this.ReasonDescription);

                        database.AddInParameter(updateCommand, "@CaseNumber", System.Data.DbType.String, this.CaseNumber);

                        database.AddInParameter(updateCommand, "@ReferenceNumber", System.Data.DbType.String, this.ReferenceNumber);

                        database.AddInParameter(updateCommand, "@ChargeBackStatus", System.Data.DbType.Int64, this.ChargeBackStatus);

                        database.AddInParameter(updateCommand, "@Comment", System.Data.DbType.String, this.Comment);


                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    if (this.CreateDate == DateTime.MinValue)
                        this.CreateDate = DateTime.UtcNow;
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO xm_ChargeBackDetails (OrderId,PaymentId,TransactionId,CreateDate,InitiateDate,ReasonCode,ReasonDescription,CaseNumber,ReferenceNumber,ChargeBackStatus,Comment )");
                    insertQuery.Append(" VALUES (@OrderId,@PaymentId,@TransactionId,@CreateDate,@InitiateDate,@ReasonCode,@ReasonDescription,@CaseNumber,@ReferenceNumber,@ChargeBackStatus,@Comment )");

                    

                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {

                        database.AddInParameter(insertCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);

                        database.AddInParameter(insertCommand, "@PaymentId", System.Data.DbType.Int32, this.PaymentId);

                        database.AddInParameter(insertCommand, "@TransactionId", System.Data.DbType.Int32, this.TransactionId);

                        database.AddInParameter(insertCommand, "@CreateDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreateDate));

                        database.AddInParameter(insertCommand, "@InitiateDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.InitiateDate));

                        database.AddInParameter(insertCommand, "@ReasonCode", System.Data.DbType.String, this.ReasonCode);

                        database.AddInParameter(insertCommand, "@ReasonDescription", System.Data.DbType.String, this.ReasonDescription);

                        database.AddInParameter(insertCommand, "@CaseNumber", System.Data.DbType.String, this.CaseNumber);

                        database.AddInParameter(insertCommand, "@ReferenceNumber", System.Data.DbType.String, this.ReferenceNumber);

                        database.AddInParameter(insertCommand, "@ChargeBackStatus", System.Data.DbType.Int32, this.ChargeBackStatus);

                        database.AddInParameter(insertCommand, "@Comment", System.Data.DbType.String, this.Comment);

                        //RESULT IS NUMBER OF RECORDS AFFECTED;
                        result = database.ExecuteNonQuery(insertCommand);

                    }
                }
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        #endregion
    }
}
