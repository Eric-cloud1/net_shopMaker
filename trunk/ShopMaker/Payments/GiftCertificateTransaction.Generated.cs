//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Orders;
using MakerShop.Payments;
using MakerShop.Utility;

namespace MakerShop.Payments
{
    /// <summary>
    /// This class represents a GiftCertificateTransaction object in the database.
    /// </summary>
    public partial class GiftCertificateTransaction : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public GiftCertificateTransaction() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="giftCertificateTransactionId">Value of GiftCertificateTransactionId.</param>
        /// </summary>
        public GiftCertificateTransaction(Int32 giftCertificateTransactionId)
        {
            this.GiftCertificateTransactionId = giftCertificateTransactionId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "GiftCertificateTransactionId");
          columnNames.Add(prefix + "GiftCertificateId");
          columnNames.Add(prefix + "OrderId");
          columnNames.Add(prefix + "TransactionDate");
          columnNames.Add(prefix + "Amount");
          columnNames.Add(prefix + "Description");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given GiftCertificateTransaction object from the given database data reader.
        /// </summary>
        /// <param name="giftCertificateTransaction">The GiftCertificateTransaction object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(GiftCertificateTransaction giftCertificateTransaction, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            giftCertificateTransaction.GiftCertificateTransactionId = dr.GetInt32(0);
            giftCertificateTransaction.GiftCertificateId = dr.GetInt32(1);
            giftCertificateTransaction.OrderId = NullableData.GetInt32(dr, 2);
            giftCertificateTransaction.TransactionDate = LocaleHelper.ToLocalTime(dr.GetDateTime(3));
            giftCertificateTransaction.Amount = dr.GetDecimal(4);
            giftCertificateTransaction.Description = NullableData.GetString(dr, 5);
            giftCertificateTransaction.IsDirty = false;
        }

#endregion

        private Int32 _GiftCertificateTransactionId;
        private Int32 _GiftCertificateId;
        private Int32 _OrderId;
        private DateTime _TransactionDate;
        private LSDecimal _Amount;
        private String _Description = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// GiftCertificateTransactionId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 GiftCertificateTransactionId
        {
            get { return this._GiftCertificateTransactionId; }
            set
            {
                if (this._GiftCertificateTransactionId != value)
                {
                    this._GiftCertificateTransactionId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// GiftCertificateId
        /// </summary>
        public Int32 GiftCertificateId
        {
            get { return this._GiftCertificateId; }
            set
            {
                if (this._GiftCertificateId != value)
                {
                    this._GiftCertificateId = value;
                    this.IsDirty = true;
                    this._GiftCertificate = null;
                }
            }
        }

        /// <summary>
        /// OrderId
        /// </summary>
        public Int32 OrderId
        {
            get { return this._OrderId; }
            set
            {
                if (this._OrderId != value)
                {
                    this._OrderId = value;
                    this.IsDirty = true;
                    this._Order = null;
                }
            }
        }

        /// <summary>
        /// TransactionDate
        /// </summary>
        public DateTime TransactionDate
        {
            get { return this._TransactionDate; }
            set
            {
                if (this._TransactionDate != value)
                {
                    this._TransactionDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Amount
        /// </summary>
        public LSDecimal Amount
        {
            get { return this._Amount; }
            set
            {
                if (this._Amount != value)
                {
                    this._Amount = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Description
        /// </summary>
        public String Description
        {
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this._Description = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this GiftCertificateTransaction object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private GiftCertificate _GiftCertificate;
        private Order _Order;

        /// <summary>
        /// The GiftCertificate object that this GiftCertificateTransaction object is associated with
        /// </summary>
        public GiftCertificate GiftCertificate
        {
            get
            {
                if (!this.GiftCertificateLoaded)
                {
                    this._GiftCertificate = GiftCertificateDataSource.Load(this.GiftCertificateId);
                }
                return this._GiftCertificate;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool GiftCertificateLoaded { get { return ((this._GiftCertificate != null) && (this._GiftCertificate.GiftCertificateId == this.GiftCertificateId)); } }

        /// <summary>
        /// The Order object that this GiftCertificateTransaction object is associated with
        /// </summary>
        public Order Order
        {
            get
            {
                if (!this.OrderLoaded)
                {
                    this._Order = OrderDataSource.Load(this.OrderId);
                }
                return this._Order;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderLoaded { get { return ((this._Order != null) && (this._Order.OrderId == this.OrderId)); } }

#endregion

        /// <summary>
        /// Deletes this GiftCertificateTransaction object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_GiftCertificateTransactions");
            deleteQuery.Append(" WHERE GiftCertificateTransactionId = @giftCertificateTransactionId");
            Database database = Token.Instance.Database;

            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@GiftCertificateTransactionId", System.Data.DbType.Int32, this.GiftCertificateTransactionId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }

            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this GiftCertificateTransaction object from the database for the given primary key.
        /// </summary>
        /// <param name="giftCertificateTransactionId">Value of GiftCertificateTransactionId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 giftCertificateTransactionId)
        {
            bool result = false;
            this.GiftCertificateTransactionId = giftCertificateTransactionId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_GiftCertificateTransactions");
            selectQuery.Append(" WHERE GiftCertificateTransactionId = @giftCertificateTransactionId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@giftCertificateTransactionId", System.Data.DbType.Int32, giftCertificateTransactionId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this GiftCertificateTransaction object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;
                
                if (this.GiftCertificateTransactionId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.TransactionDate == System.DateTime.MinValue) this.TransactionDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_GiftCertificateTransactions");
                    selectQuery.Append(" WHERE GiftCertificateTransactionId = @giftCertificateTransactionId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@GiftCertificateTransactionId", System.Data.DbType.Int32, this.GiftCertificateTransactionId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_GiftCertificateTransactions SET ");
                    updateQuery.Append("GiftCertificateId = @GiftCertificateId");
                    updateQuery.Append(", OrderId = @OrderId");
                    updateQuery.Append(", TransactionDate = @TransactionDate");
                    updateQuery.Append(", Amount = @Amount");
                    updateQuery.Append(", Description = @Description");
                    updateQuery.Append(" WHERE GiftCertificateTransactionId = @GiftCertificateTransactionId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@GiftCertificateTransactionId", System.Data.DbType.Int32, this.GiftCertificateTransactionId);
                        database.AddInParameter(updateCommand, "@GiftCertificateId", System.Data.DbType.Int32, this.GiftCertificateId);
                        database.AddInParameter(updateCommand, "@OrderId", System.Data.DbType.Int32, NullableData.DbNullify(this.OrderId));
                        database.AddInParameter(updateCommand, "@TransactionDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.TransactionDate));
                        database.AddInParameter(updateCommand, "@Amount", System.Data.DbType.Decimal, this.Amount);
                        database.AddInParameter(updateCommand, "@Description", System.Data.DbType.String, NullableData.DbNullify(this.Description));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_GiftCertificateTransactions (GiftCertificateId, OrderId, TransactionDate, Amount, Description)");
                    insertQuery.Append(" VALUES (@GiftCertificateId, @OrderId, @TransactionDate, @Amount, @Description)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@GiftCertificateTransactionId", System.Data.DbType.Int32, this.GiftCertificateTransactionId);
                        database.AddInParameter(insertCommand, "@GiftCertificateId", System.Data.DbType.Int32, this.GiftCertificateId);
                        database.AddInParameter(insertCommand, "@OrderId", System.Data.DbType.Int32, NullableData.DbNullify(this.OrderId));
                        database.AddInParameter(insertCommand, "@TransactionDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.TransactionDate));
                        database.AddInParameter(insertCommand, "@Amount", System.Data.DbType.Decimal, this.Amount);
                        database.AddInParameter(insertCommand, "@Description", System.Data.DbType.String, NullableData.DbNullify(this.Description));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._GiftCertificateTransactionId = result;
                    }
                }
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
