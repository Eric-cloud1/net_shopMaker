//CUSTOMIZED
//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Orders;
using MakerShop.Payments;
using MakerShop.Utility;

namespace MakerShop.Payments
{
    /// <summary>
    /// This class represents a Payment object in the database.
    /// </summary>
    public partial class Payment : IPersistable
    {

        #region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Payment()
        {
            this.CurrencyCode = Token.Instance.Store.BaseCurrency.ISOCode;
        }

        /// <summary>
        /// Constructor with primary key
        /// <param name="paymentId">Value of PaymentId.</param>
        /// </summary>
        public Payment(Int32 paymentId)
            : this()
        {
            this.PaymentId = paymentId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
            if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
            else prefix = prefix + ".";
            List<string> columnNames = new List<string>();
            columnNames.Add(prefix + "PaymentId");
            columnNames.Add(prefix + "OrderId");
            columnNames.Add(prefix + "SubscriptionId");
            columnNames.Add(prefix + "PaymentMethodId");
            columnNames.Add(prefix + "PaymentGatewayId");
            columnNames.Add(prefix + "PaymentInstrumentId");
            columnNames.Add(prefix + "PaymentTypeId");
            columnNames.Add(prefix + "PaymentMethodName");
            columnNames.Add(prefix + "ReferenceNumber");
            columnNames.Add(prefix + "Amount");
            columnNames.Add(prefix + "CurrencyCode");
            columnNames.Add(prefix + "PaymentDate");
            columnNames.Add(prefix + "PaymentStatusId");
            columnNames.Add(prefix + "PaymentStatusReason");
            columnNames.Add(prefix + "CompletedDate");
            columnNames.Add(prefix + "EncryptedAccountData");
            columnNames.Add(prefix + "ReCrypt");
            columnNames.Add(prefix + "ChargeDescriptor");
            columnNames.Add(prefix + "CustomerServicePhone");
            return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Payment object from the given database data reader.
        /// </summary>
        /// <param name="payment">The Payment object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Payment payment, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            payment.PaymentId = dr.GetInt32(0);
            payment.OrderId = dr.GetInt32(1);
            payment.SubscriptionId = NullableData.GetInt32(dr, 2);
            payment.PaymentMethodId = NullableData.GetInt32(dr, 3);
            payment.PaymentGatewayId = NullableData.GetInt32(dr, 4);
            payment.PaymentInstrumentId = NullableData.GetInt16(dr, 5);
            payment.PaymentTypeId = NullableData.GetInt16(dr, 6);
            payment.PaymentMethodName = NullableData.GetString(dr, 7);
            payment.ReferenceNumber = NullableData.GetString(dr, 8);
            payment.Amount = dr.GetDecimal(9);
            payment.CurrencyCode = dr.GetString(10);
            payment.PaymentDate = LocaleHelper.ToLocalTime(dr.GetDateTime(11));
            payment.PaymentStatusId = dr.GetInt16(12);
            payment.PaymentStatusReason = NullableData.GetString(dr, 13);
            payment.CompletedDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 14));
            payment.EncryptedAccountData = NullableData.GetString(dr, 15);
            payment.ReCrypt = dr.GetBoolean(16);
            payment.ChargeDescriptor = NullableData.GetString(dr, 17);
            payment.CustomerServicePhone = NullableData.GetString(dr, 18);
            payment.IsDirty = false;
        }

        #endregion

        private Int32 _PaymentId;
        private Int32 _OrderId;
        private Int32 _SubscriptionId;
        private Int32 _PaymentMethodId;
        private String _PaymentMethodName = string.Empty;
        private String _ReferenceNumber = string.Empty;
        private LSDecimal _Amount;
        private String _CurrencyCode = string.Empty;
        private DateTime _PaymentDate;
        private Int16 _PaymentStatusId;
        private String _PaymentStatusReason = string.Empty;
        private DateTime _CompletedDate;
        private String _EncryptedAccountData = string.Empty;
        private Boolean _ReCrypt;
        private string _ChargeDescriptor;
        private string _CustomerServicePhone;
        private bool _IsDirty;

        /// <summary>
        /// PaymentId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 PaymentId
        {
            get { return this._PaymentId; }
            set
            {
                if (this._PaymentId != value)
                {
                    this._PaymentId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// OrderId
        /// </summary>
        public Int32 OrderId
        {
            get { return this._OrderId; }
            set
            {
                if (this._OrderId != value)
                {
                    this._OrderId = value;
                    this.IsDirty = true;
                    this._Order = null;
                }
            }
        }

        /// <summary>
        /// SubscriptionId
        /// </summary>
        public Int32 SubscriptionId
        {
            get { return this._SubscriptionId; }
            set
            {
                if (this._SubscriptionId != value)
                {
                    this._SubscriptionId = value;
                    this.IsDirty = true;
                    this._Subscription = null;
                }
            }
        }

        /// <summary>
        /// PaymentMethodId
        /// </summary>
        public Int32 PaymentMethodId
        {
            get { return this._PaymentMethodId; }
            set
            {
                if (this._PaymentMethodId != value)
                {
                    this._PaymentMethodId = value;
                    this.IsDirty = true;
                    this._PaymentMethod = null;
                    this._PaymentMethodName = PaymentMethod.Name ;
                    this._PaymentGateway = null;
                    this._PaymentGatewayId = PaymentMethod.PaymentGatewayId; 
                    
                }
            }
        }
        private Int32 _PaymentGatewayId;

        [DataObjectField(true, false, false)]
        public Int32 PaymentGatewayId
        {
            get { return this._PaymentGatewayId; }
            set
            {
                if (this._PaymentGatewayId != value)
                {
                    this._PaymentGatewayId = value;
                    this.IsDirty = true;
                    this._PaymentGateway = null;
                    this._PaymentMethod = null;
                    this._PaymentMethodName = null;
                    PaymentMethodCollection pmc = PaymentMethodDataSource.LoadForPaymentGateway(value);
                    foreach (PaymentMethod pm in pmc)
                    {
                        if (pm.PaymentInstrumentId == this.PaymentInstrumentId)
                        {
                            this._PaymentMethodId = pm.PaymentMethodId;
                            this._PaymentMethod = pm;
                            this._PaymentMethodName = pm.Name;
                            break;
                        }
                    }

                }
            }
        }

        private Int16 _PaymentInstrumentId;

        [DataObjectField(true, false, false)]
        public Int16 PaymentInstrumentId
        {
            get { return this._PaymentInstrumentId; }
            set
            {
                if (this._PaymentInstrumentId != value)
                {
                    this._PaymentInstrumentId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int16 _PaymentTypeId;

        [DataObjectField(true, false, false)]
        public Int16 PaymentTypeId
        {
            get { return this._PaymentTypeId; }
            set
            {
                if (this._PaymentTypeId != value)
                {
                    this._PaymentTypeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PaymentMethodName
        /// </summary>
        public String PaymentMethodName
        {
            get { return this._PaymentMethodName; }
            set
            {
                if (this._PaymentMethodName != value)
                {
                    this._PaymentMethodName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ReferenceNumber
        /// </summary>
        public String ReferenceNumber
        {
            get { return this._ReferenceNumber; }
            set
            {
                if (this._ReferenceNumber != value)
                {
                    this._ReferenceNumber = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Amount
        /// </summary>
        public LSDecimal Amount
        {
            get { return this._Amount; }
            set
            {
                if (this._Amount != value)
                {
                    this._Amount = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CurrencyCode
        /// </summary>
        public String CurrencyCode
        {
            get { return this._CurrencyCode; }
            set
            {
                if (this._CurrencyCode != value)
                {
                    this._CurrencyCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PaymentDate
        /// </summary>
        public DateTime PaymentDate
        {
            get { return this._PaymentDate; }
            set
            {
                if (this._PaymentDate != value)
                {
                    this._PaymentDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PaymentStatusId
        /// </summary>
        public Int16 PaymentStatusId
        {
            get { return this._PaymentStatusId; }
            set
            {
                if (this._PaymentStatusId != value)
                {
                    this._PaymentStatusId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PaymentStatusReason
        /// </summary>
        public String PaymentStatusReason
        {
            get { return this._PaymentStatusReason; }
            set
            {
                if (this._PaymentStatusReason != value)
                {
                    this._PaymentStatusReason = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CompletedDate
        /// </summary>
        public DateTime CompletedDate
        {
            get { return this._CompletedDate; }
            set
            {
                if (this._CompletedDate != value)
                {
                    this._CompletedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// EncryptedAccountData
        /// </summary>
        public String EncryptedAccountData
        {
            get { return this._EncryptedAccountData; }
            set
            {
                if (this._EncryptedAccountData != value)
                {
                    this._EncryptedAccountData = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ReCrypt
        /// </summary>
        public Boolean ReCrypt
        {
            get { return this._ReCrypt; }
            set
            {
                if (this._ReCrypt != value)
                {
                    this._ReCrypt = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ChargeDescriptor
        /// </summary>
        public string ChargeDescriptor
        {
            get { return this._ChargeDescriptor; }
            set
            {
                if (this._ChargeDescriptor != value)
                {
                    this._ChargeDescriptor = value;
                    this.IsDirty = true;
                }
            }
        }
        /// <summary>
        /// CustomerServicePhone
        /// </summary>
        public string CustomerServicePhone
        {
            get { return this._CustomerServicePhone; }
            set
            {
                if (this._CustomerServicePhone != value)
                {
                    this._CustomerServicePhone = value;
                    this.IsDirty = true;
                }
            }
        }
        /// <summary>
        /// Indicates whether this Payment object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.TransactionsLoaded && this.Transactions.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Payment are properly associated with this Payment object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.TransactionsLoaded) { foreach (Transaction transaction in this.Transactions) { transaction.PaymentId = this.PaymentId; } }
        }

        #region Parents
        private Order _Order;
        private PaymentMethod _PaymentMethod;
        private PaymentGateway _PaymentGateway;
        private Subscription _Subscription;

        /// <summary>
        /// The Order object that this Payment object is associated with
        /// </summary>
        public Order Order
        {
            get
            {
                if (!this.OrderLoaded)
                {
                    this._Order = OrderDataSource.Load(this.OrderId);
                }
                return this._Order;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderLoaded { get { return ((this._Order != null) && (this._Order.OrderId == this.OrderId)); } }

        /// <summary>
        /// The PaymentMethod object that this Payment object is associated with
        /// </summary>
        public PaymentMethod PaymentMethod
        {
            get
            {
                if (!this.PaymentMethodLoaded)
                {
                    this._PaymentMethod = PaymentMethodDataSource.Load(this.PaymentMethodId);
                }
                return this._PaymentMethod;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PaymentMethodLoaded { get { return ((this._PaymentMethod != null) && (this._PaymentMethod.PaymentMethodId == this.PaymentMethodId)); } }

        /// <summary>
        /// The PaymentMethod object that this Payment object is associated with
        /// </summary>
        public PaymentGateway PaymentGateway
        {
            get
            {
                if (!this.PaymentGatewayLoaded)
                {
                    this._PaymentGateway = PaymentGatewayDataSource.Load(this.PaymentGatewayId);
                }
                return this._PaymentGateway;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PaymentGatewayLoaded { get { return ((this._PaymentGateway != null) && (this._PaymentGateway.PaymentGatewayId == this.PaymentGatewayId)); } }


        /// <summary>
        /// The Subscription object that this Payment object is associated with
        /// </summary>
        public Subscription Subscription
        {
            get
            {
                if (!this.SubscriptionLoaded)
                {
                    this._Subscription = SubscriptionDataSource.Load(this.SubscriptionId);
                }
                return this._Subscription;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SubscriptionLoaded { get { return ((this._Subscription != null) && (this._Subscription.SubscriptionId == this.SubscriptionId)); } }

        #endregion

        #region Children
        private TransactionCollection _Transactions;

        /// <summary>
        /// A collection of Transaction objects associated with this Payment object.
        /// </summary>
        public TransactionCollection Transactions
        {
            get
            {
                if (!this.TransactionsLoaded)
                {
                    this._Transactions = TransactionDataSource.LoadForPayment(this.PaymentId);
                }
                return this._Transactions;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TransactionsLoaded { get { return (this._Transactions != null); } }

        #endregion

        /// <summary>
        /// Deletes this Payment object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Payments");
            deleteQuery.Append(" WHERE PaymentId = @paymentId");
            Database database = Token.Instance.Database;

            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@PaymentId", System.Data.DbType.Int32, this.PaymentId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }

            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Payment object from the database for the given primary key.
        /// </summary>
        /// <param name="paymentId">Value of PaymentId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 paymentId)
        {
            bool result = false;
            this.PaymentId = paymentId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Payments");
            selectQuery.Append(" WHERE PaymentId = @paymentId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@paymentId", System.Data.DbType.Int32, paymentId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr); ;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Payment object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;

                if (this.PaymentId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.PaymentDate == System.DateTime.MinValue) this.PaymentDate = LocaleHelper.LocalNow;

                if (recordExists)
                {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_Payments");
                    selectQuery.Append(" WHERE PaymentId = @paymentId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@PaymentId", System.Data.DbType.Int32, this.PaymentId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Payments SET ");
                    updateQuery.Append("OrderId = @OrderId");
                    updateQuery.Append(", SubscriptionId = @SubscriptionId");
                    updateQuery.Append(", PaymentMethodId = @PaymentMethodId");
                    updateQuery.Append(", PaymentGatewayId = @PaymentGatewayId");
                    updateQuery.Append(", PaymentInstrumentId = @PaymentInstrumentId");
                    updateQuery.Append(", PaymentTypeId = @PaymentTypeId");
                    updateQuery.Append(", PaymentMethodName = @PaymentMethodName");
                    updateQuery.Append(", ReferenceNumber = @ReferenceNumber");
                    updateQuery.Append(", Amount = @Amount");
                    updateQuery.Append(", CurrencyCode = @CurrencyCode");
                    updateQuery.Append(", PaymentDate = @PaymentDate");
                    updateQuery.Append(", PaymentStatusId = @PaymentStatusId");
                    updateQuery.Append(", PaymentStatusReason = @PaymentStatusReason");
                    updateQuery.Append(", CompletedDate = @CompletedDate");
                    updateQuery.Append(", EncryptedAccountData = @EncryptedAccountData");
                    updateQuery.Append(", ReCrypt = @ReCrypt");
                    updateQuery.Append(", ChargeDescriptor = @ChargeDescriptor");
                    updateQuery.Append(", CustomerServicePhone = @CustomerServicePhone");

                    updateQuery.Append(" WHERE PaymentId = @PaymentId");


                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@PaymentId", System.Data.DbType.Int32, this.PaymentId);
                        database.AddInParameter(updateCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);
                        database.AddInParameter(updateCommand, "@SubscriptionId", System.Data.DbType.Int32, NullableData.DbNullify(this.SubscriptionId));
                        database.AddInParameter(updateCommand, "@PaymentMethodId", System.Data.DbType.Int32, this.PaymentMethodId);
                        database.AddInParameter(updateCommand, "@PaymentGatewayId", System.Data.DbType.Int32, this.PaymentGatewayId);
                        database.AddInParameter(updateCommand, "@PaymentInstrumentId", System.Data.DbType.Int16, this.PaymentInstrumentId);
                        database.AddInParameter(updateCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);
                        database.AddInParameter(updateCommand, "@PaymentMethodName", System.Data.DbType.String, this.PaymentMethodName);
                        database.AddInParameter(updateCommand, "@ReferenceNumber", System.Data.DbType.String, NullableData.DbNullify(this.ReferenceNumber));
                        database.AddInParameter(updateCommand, "@Amount", System.Data.DbType.Decimal, this.Amount);
                        database.AddInParameter(updateCommand, "@CurrencyCode", System.Data.DbType.String, this.CurrencyCode);
                        database.AddInParameter(updateCommand, "@PaymentDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.PaymentDate));
                        database.AddInParameter(updateCommand, "@PaymentStatusId", System.Data.DbType.Int16, this.PaymentStatusId);
                        database.AddInParameter(updateCommand, "@PaymentStatusReason", System.Data.DbType.String, NullableData.DbNullify(this.PaymentStatusReason));
                        database.AddInParameter(updateCommand, "@CompletedDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.CompletedDate)));
                        database.AddInParameter(updateCommand, "@EncryptedAccountData", System.Data.DbType.String, NullableData.DbNullify(this.EncryptedAccountData));
                        database.AddInParameter(updateCommand, "@ReCrypt", System.Data.DbType.Boolean, this.ReCrypt);
                        database.AddInParameter(updateCommand, "@ChargeDescriptor", System.Data.DbType.String, this.ChargeDescriptor);
                        database.AddInParameter(updateCommand, "@CustomerServicePhone", System.Data.DbType.String, this.CustomerServicePhone);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Payments (OrderId,SubscriptionId,PaymentMethodId,PaymentGatewayId,PaymentInstrumentId,PaymentTypeId,PaymentMethodName,ReferenceNumber,Amount,CurrencyCode,PaymentDate,PaymentStatusId,PaymentStatusReason,CompletedDate,EncryptedAccountData,ReCrypt, ChargeDescriptor, CustomerServicePhone )");
                    insertQuery.Append(" VALUES (@OrderId,@SubscriptionId,@PaymentMethodId,@PaymentGatewayId,@PaymentInstrumentId,@PaymentTypeId,@PaymentMethodName,@ReferenceNumber,@Amount,@CurrencyCode,@PaymentDate,@PaymentStatusId,@PaymentStatusReason,@CompletedDate,@EncryptedAccountData,@ReCrypt, @ChargeDescriptor, @CustomerServicePhone )");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@PaymentId", System.Data.DbType.Int32, this.PaymentId);
                        database.AddInParameter(insertCommand, "@OrderId", System.Data.DbType.Int32, this.OrderId);
                        database.AddInParameter(insertCommand, "@SubscriptionId", System.Data.DbType.Int32, NullableData.DbNullify(this.SubscriptionId));
                        database.AddInParameter(insertCommand, "@PaymentMethodId", System.Data.DbType.Int32, NullableData.DbNullify(this.PaymentMethodId));
                        database.AddInParameter(insertCommand, "@PaymentGatewayId", System.Data.DbType.Int32, NullableData.DbNullify(this.PaymentGatewayId));
                        database.AddInParameter(insertCommand, "@PaymentInstrumentId", System.Data.DbType.Int16, NullableData.DbNullify(this.PaymentInstrumentId));
                        database.AddInParameter(insertCommand, "@PaymentTypeId", System.Data.DbType.Int16, NullableData.DbNullify(this.PaymentTypeId));
                        database.AddInParameter(insertCommand, "@PaymentMethodName", System.Data.DbType.String, NullableData.DbNullify(this.PaymentMethodName));
                        database.AddInParameter(insertCommand, "@ReferenceNumber", System.Data.DbType.String, NullableData.DbNullify(this.ReferenceNumber));
                        database.AddInParameter(insertCommand, "@Amount", System.Data.DbType.Decimal, this.Amount);
                        database.AddInParameter(insertCommand, "@CurrencyCode", System.Data.DbType.String, this.CurrencyCode);
                        database.AddInParameter(insertCommand, "@PaymentDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.PaymentDate));
                        database.AddInParameter(insertCommand, "@PaymentStatusId", System.Data.DbType.Int16, this.PaymentStatusId);
                        database.AddInParameter(insertCommand, "@PaymentStatusReason", System.Data.DbType.String, NullableData.DbNullify(this.PaymentStatusReason));
                        database.AddInParameter(insertCommand, "@CompletedDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.CompletedDate)));
                        database.AddInParameter(insertCommand, "@EncryptedAccountData", System.Data.DbType.String, NullableData.DbNullify(this.EncryptedAccountData));
                        database.AddInParameter(insertCommand, "@ReCrypt", System.Data.DbType.Boolean, this.ReCrypt);
                        database.AddInParameter(insertCommand, "@ChargeDescriptor", System.Data.DbType.String, this.ChargeDescriptor);
                        database.AddInParameter(insertCommand, "@CustomerServicePhone", System.Data.DbType.String, this.CustomerServicePhone);

                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._PaymentId = result;
                    }
                }
                this.SaveChildren();
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Payment object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.TransactionsLoaded) this.Transactions.Save();
        }

    }
}
