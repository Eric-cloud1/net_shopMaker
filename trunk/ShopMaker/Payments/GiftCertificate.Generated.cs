//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Orders;
using MakerShop.Payments;
using MakerShop.Stores;
using MakerShop.Utility;

namespace MakerShop.Payments
{
    /// <summary>
    /// This class represents a GiftCertificate object in the database.
    /// </summary>
    public partial class GiftCertificate : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public GiftCertificate() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="giftCertificateId">Value of GiftCertificateId.</param>
        /// </summary>
        public GiftCertificate(Int32 giftCertificateId)
        {
            this.GiftCertificateId = giftCertificateId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "GiftCertificateId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "SerialNumber");
          columnNames.Add(prefix + "CreatedBy");
          columnNames.Add(prefix + "CreateDate");
          columnNames.Add(prefix + "OrderItemId");
          columnNames.Add(prefix + "ExpirationDate");
          columnNames.Add(prefix + "Balance");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given GiftCertificate object from the given database data reader.
        /// </summary>
        /// <param name="giftCertificate">The GiftCertificate object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(GiftCertificate giftCertificate, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            giftCertificate.GiftCertificateId = dr.GetInt32(0);
            giftCertificate.StoreId = dr.GetInt32(1);
            giftCertificate.Name = NullableData.GetString(dr, 2);
            giftCertificate.SerialNumber = dr.GetString(3);
            giftCertificate.CreatedBy = dr.GetInt32(4);
            giftCertificate.CreateDate = LocaleHelper.ToLocalTime(dr.GetDateTime(5));
            giftCertificate.OrderItemId = NullableData.GetInt32(dr, 6);
            giftCertificate.ExpirationDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 7));
            giftCertificate.Balance = dr.GetDecimal(8);
            giftCertificate.IsDirty = false;
        }

#endregion

        private Int32 _GiftCertificateId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private String _SerialNumber = string.Empty;
        private Int32 _CreatedBy;
        private DateTime _CreateDate;
        private Int32 _OrderItemId;
        private DateTime _ExpirationDate;
        private LSDecimal _Balance;
        private bool _IsDirty;

        /// <summary>
        /// GiftCertificateId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 GiftCertificateId
        {
            get { return this._GiftCertificateId; }
            set
            {
                if (this._GiftCertificateId != value)
                {
                    this._GiftCertificateId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// SerialNumber
        /// </summary>
        public String SerialNumber
        {
            get { return this._SerialNumber; }
            set
            {
                if (this._SerialNumber != value)
                {
                    this._SerialNumber = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CreatedBy
        /// </summary>
        public Int32 CreatedBy
        {
            get { return this._CreatedBy; }
            set
            {
                if (this._CreatedBy != value)
                {
                    this._CreatedBy = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CreateDate
        /// </summary>
        public DateTime CreateDate
        {
            get { return this._CreateDate; }
            set
            {
                if (this._CreateDate != value)
                {
                    this._CreateDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderItemId
        /// </summary>
        public Int32 OrderItemId
        {
            get { return this._OrderItemId; }
            set
            {
                if (this._OrderItemId != value)
                {
                    this._OrderItemId = value;
                    this.IsDirty = true;
                    this._OrderItem = null;
                }
            }
        }

        /// <summary>
        /// ExpirationDate
        /// </summary>
        public DateTime ExpirationDate
        {
            get { return this._ExpirationDate; }
            set
            {
                if (this._ExpirationDate != value)
                {
                    this._ExpirationDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Balance
        /// </summary>
        public LSDecimal Balance
        {
            get { return this._Balance; }
            set
            {
                if (this._Balance != value)
                {
                    this._Balance = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this GiftCertificate object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.TransactionsLoaded && this.Transactions.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this GiftCertificate are properly associated with this GiftCertificate object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.TransactionsLoaded) { foreach (GiftCertificateTransaction giftCertificateTransaction in this.Transactions) { giftCertificateTransaction.GiftCertificateId = this.GiftCertificateId; } }
        }

#region Parents
        private OrderItem _OrderItem;
        private Store _Store;

        /// <summary>
        /// The OrderItem object that this GiftCertificate object is associated with
        /// </summary>
        public OrderItem OrderItem
        {
            get
            {
                if (!this.OrderItemLoaded)
                {
                    this._OrderItem = OrderItemDataSource.Load(this.OrderItemId);
                }
                return this._OrderItem;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderItemLoaded { get { return ((this._OrderItem != null) && (this._OrderItem.OrderItemId == this.OrderItemId)); } }

        /// <summary>
        /// The Store object that this GiftCertificate object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Children
        private GiftCertificateTransactionCollection _Transactions;

        /// <summary>
        /// A collection of GiftCertificateTransaction objects associated with this GiftCertificate object.
        /// </summary>
        public GiftCertificateTransactionCollection Transactions
        {
            get
            {
                if (!this.TransactionsLoaded)
                {
                    this._Transactions = GiftCertificateTransactionDataSource.LoadForGiftCertificate(this.GiftCertificateId);
                }
                return this._Transactions;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TransactionsLoaded { get { return (this._Transactions != null); } }

#endregion

        /// <summary>
        /// Deletes this GiftCertificate object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_GiftCertificates");
            deleteQuery.Append(" WHERE GiftCertificateId = @giftCertificateId");
            Database database = Token.Instance.Database;

            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@GiftCertificateId", System.Data.DbType.Int32, this.GiftCertificateId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }

            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this GiftCertificate object from the database for the given primary key.
        /// </summary>
        /// <param name="giftCertificateId">Value of GiftCertificateId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 giftCertificateId)
        {
            bool result = false;
            this.GiftCertificateId = giftCertificateId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_GiftCertificates");
            selectQuery.Append(" WHERE GiftCertificateId = @giftCertificateId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@giftCertificateId", System.Data.DbType.Int32, giftCertificateId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this GiftCertificate object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.GiftCertificateId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.CreateDate == System.DateTime.MinValue) this.CreateDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_GiftCertificates");
                    selectQuery.Append(" WHERE GiftCertificateId = @giftCertificateId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@GiftCertificateId", System.Data.DbType.Int32, this.GiftCertificateId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_GiftCertificates SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", SerialNumber = @SerialNumber");
                    updateQuery.Append(", CreatedBy = @CreatedBy");
                    updateQuery.Append(", CreateDate = @CreateDate");
                    updateQuery.Append(", OrderItemId = @OrderItemId");
                    updateQuery.Append(", ExpirationDate = @ExpirationDate");
                    updateQuery.Append(", Balance = @Balance");
                    updateQuery.Append(" WHERE GiftCertificateId = @GiftCertificateId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@GiftCertificateId", System.Data.DbType.Int32, this.GiftCertificateId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, NullableData.DbNullify(this.Name));
                        database.AddInParameter(updateCommand, "@SerialNumber", System.Data.DbType.String, this.SerialNumber);
                        database.AddInParameter(updateCommand, "@CreatedBy", System.Data.DbType.Int32, this.CreatedBy);
                        database.AddInParameter(updateCommand, "@CreateDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreateDate));
                        database.AddInParameter(updateCommand, "@OrderItemId", System.Data.DbType.Int32, NullableData.DbNullify(this.OrderItemId));
                        database.AddInParameter(updateCommand, "@ExpirationDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.ExpirationDate)));
                        database.AddInParameter(updateCommand, "@Balance", System.Data.DbType.Decimal, this.Balance);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_GiftCertificates (StoreId, Name, SerialNumber, CreatedBy, CreateDate, OrderItemId, ExpirationDate, Balance)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @SerialNumber, @CreatedBy, @CreateDate, @OrderItemId, @ExpirationDate, @Balance)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@GiftCertificateId", System.Data.DbType.Int32, this.GiftCertificateId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, NullableData.DbNullify(this.Name));
                        database.AddInParameter(insertCommand, "@SerialNumber", System.Data.DbType.String, this.SerialNumber);
                        database.AddInParameter(insertCommand, "@CreatedBy", System.Data.DbType.Int32, this.CreatedBy);
                        database.AddInParameter(insertCommand, "@CreateDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreateDate));
                        database.AddInParameter(insertCommand, "@OrderItemId", System.Data.DbType.Int32, NullableData.DbNullify(this.OrderItemId));
                        database.AddInParameter(insertCommand, "@ExpirationDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.ExpirationDate)));
                        database.AddInParameter(insertCommand, "@Balance", System.Data.DbType.Decimal, this.Balance);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._GiftCertificateId = result;
                    }
                }
                this.SaveChildren();
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this GiftCertificate object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.TransactionsLoaded) this.Transactions.Save();
        }

     }
}
