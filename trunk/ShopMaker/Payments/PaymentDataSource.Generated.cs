//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Utility;

namespace MakerShop.Payments
{
    /// <summary>
    /// DataSource class for Payment objects
    /// </summary>
    public partial class PaymentDataSource
    {
        /// <summary>
        /// Deletes a Payment object from the database
        /// </summary>
        /// <param name="payment">The Payment object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(Payment payment)
        {
            return payment.Delete();
        }

        /// <summary>
        /// Deletes a Payment object with given id from the database
        /// </summary>
        /// <param name="paymentId">Value of PaymentId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 paymentId)
        {
            Payment payment = new Payment();
            if (payment.Load(paymentId)) return payment.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a Payment object to the database.
        /// </summary>
        /// <param name="payment">The Payment object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(Payment payment) { return payment.Save(); }

        /// <summary>
        /// Loads a Payment object for given Id from the database.
        /// </summary>
        /// <param name="paymentId">Value of PaymentId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded Payment object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Payment Load(Int32 paymentId)
        {
            return PaymentDataSource.Load(paymentId, true);
        }

        /// <summary>
        /// Loads a Payment object for given Id from the database.
        /// </summary>
        /// <param name="paymentId">Value of PaymentId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded Payment object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Payment Load(Int32 paymentId, bool useCache)
        {
            if (paymentId == 0) return null;
            Payment payment = null;
            string key = "Payment_" + paymentId.ToString();
            if (useCache)
            {
                payment = ContextCache.GetObject(key) as Payment;
                if (payment != null) return payment;
            }
            payment = new Payment();
            if (payment.Load(paymentId))
            {
                if (useCache) ContextCache.SetObject(key, payment);
                return payment;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of Payment objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the Payment objects that should be loaded.</param>
        /// <returns>The number of Payment objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_Payments" + whereClause);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Payment objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Payment objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Payment objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Payment objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "PaymentDate";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Payment.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Payments");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            PaymentCollection results = new PaymentCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Payment payment = new Payment();
                        Payment.LoadDataReader(payment, dr);
                        results.Add(payment);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Payment objects for the given OrderId in the database.
        /// <param name="orderId">The given OrderId</param>
        /// </summary>
        /// <returns>The Number of Payment objects for the given OrderId in the database.</returns>
        public static int CountForOrder(Int32 orderId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_Payments WHERE OrderId = @orderId");
            database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForOrder(Int32 orderId)
        {
            return LoadForOrder(orderId, 0, 0, string.Empty);
        }

        
        /// <summary>
        /// Loads a collection of Payment objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForOrder(Int32 orderId, string sortExpression)
        {
            return LoadForOrder(orderId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForOrder(Int32 orderId, int maximumRows, int startRowIndex)
        {
            return LoadForOrder(orderId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForOrder(Int32 orderId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "PaymentDate";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Payment.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Payments");
            selectQuery.Append(" WHERE OrderId = @orderId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
            //EXECUTE THE COMMAND
            PaymentCollection results = new PaymentCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Payment payment = new Payment();
                        Payment.LoadDataReader(payment, dr);
                        results.Add(payment);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }


        /// <summary>
        /// Counts the number of Payment objects for the given PaymentMethodId in the database.
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// </summary>
        /// <returns>The Number of Payment objects for the given PaymentMethodId in the database.</returns>
        public static int CountForPaymentMethod(Int32 paymentMethodId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_Payments WHERE PaymentMethodId = @paymentMethodId");
            database.AddInParameter(selectCommand, "@paymentMethodId", System.Data.DbType.Int32, NullableData.DbNullify(paymentMethodId));
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given PaymentMethodId from the database
        /// </summary>
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForPaymentMethod(Int32 paymentMethodId)
        {
            return LoadForPaymentMethod(paymentMethodId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given PaymentMethodId from the database
        /// </summary>
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForPaymentMethod(Int32 paymentMethodId, string sortExpression)
        {
            return LoadForPaymentMethod(paymentMethodId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given PaymentMethodId from the database
        /// </summary>
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForPaymentMethod(Int32 paymentMethodId, int maximumRows, int startRowIndex)
        {
            return LoadForPaymentMethod(paymentMethodId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given PaymentMethodId from the database
        /// </summary>
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForPaymentMethod(Int32 paymentMethodId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "PaymentDate";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Payment.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Payments");
            selectQuery.Append(" WHERE PaymentMethodId = @paymentMethodId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@paymentMethodId", System.Data.DbType.Int32, NullableData.DbNullify(paymentMethodId));
            //EXECUTE THE COMMAND
            PaymentCollection results = new PaymentCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Payment payment = new Payment();
                        Payment.LoadDataReader(payment, dr);
                        results.Add(payment);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Payment objects for the given SubscriptionId in the database.
        /// <param name="subscriptionId">The given SubscriptionId</param>
        /// </summary>
        /// <returns>The Number of Payment objects for the given SubscriptionId in the database.</returns>
        public static int CountForSubscription(Int32 subscriptionId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_Payments WHERE SubscriptionId = @subscriptionId");
            database.AddInParameter(selectCommand, "@subscriptionId", System.Data.DbType.Int32, NullableData.DbNullify(subscriptionId));
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given SubscriptionId from the database
        /// </summary>
        /// <param name="subscriptionId">The given SubscriptionId</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForSubscription(Int32 subscriptionId)
        {
            return LoadForSubscription(subscriptionId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given SubscriptionId from the database
        /// </summary>
        /// <param name="subscriptionId">The given SubscriptionId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForSubscription(Int32 subscriptionId, string sortExpression)
        {
            return LoadForSubscription(subscriptionId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given SubscriptionId from the database
        /// </summary>
        /// <param name="subscriptionId">The given SubscriptionId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForSubscription(Int32 subscriptionId, int maximumRows, int startRowIndex)
        {
            return LoadForSubscription(subscriptionId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Payment objects for the given SubscriptionId from the database
        /// </summary>
        /// <param name="subscriptionId">The given SubscriptionId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Payment objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static PaymentCollection LoadForSubscription(Int32 subscriptionId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "PaymentDate";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Payment.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Payments");
            selectQuery.Append(" WHERE SubscriptionId = @subscriptionId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@subscriptionId", System.Data.DbType.Int32, NullableData.DbNullify(subscriptionId));
            //EXECUTE THE COMMAND
            PaymentCollection results = new PaymentCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Payment payment = new Payment();
                        Payment.LoadDataReader(payment, dr);
                        results.Add(payment);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given Payment object to the database.
        /// </summary>
        /// <param name="payment">The Payment object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(Payment payment) { return payment.Save(); }

    }
}
