//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;

using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Payments;
using MakerShop.Stores;
using MakerShop.Utility;

namespace MakerShop.Payments
{
    /// <summary>
    /// This class represents a PaymentGatewayFailover object in the database.
    /// </summary>
    public partial class PaymentGatewayFailover : IPersistable
    {

        #region Constructors

        public PaymentGatewayFailover() { }

        public PaymentGatewayFailover(Int32 pSourcePaymentGatewayId, Int32 pDestinationPaymentGatewayId)
        {
            this.SourcePaymentGatewayId = pSourcePaymentGatewayId;
            this.DestinationPaymentGatewayId = pDestinationPaymentGatewayId;

        }

        public static string GetColumnNames(string prefix)
        {
            if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
            else prefix = prefix + ".";
            List<string> columnNames = new List<string>();
            columnNames.Add(prefix + "PaymentGatewayFailoverId");
            columnNames.Add(prefix + "SourcePaymentGatewayId");
            columnNames.Add(prefix + "DestinationPaymentGatewayId");
            columnNames.Add(prefix + "TwoWay");


            return string.Join(",", columnNames.ToArray());
        }

        public static void LoadDataReader(PaymentGatewayFailover pPaymentGatewayFailover, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA

            pPaymentGatewayFailover.PaymentGatewayFailoverId = dr.GetInt32(0);

            pPaymentGatewayFailover.SourcePaymentGatewayId = dr.GetInt32(1);

            pPaymentGatewayFailover.DestinationPaymentGatewayId = dr.GetInt32(2);

            pPaymentGatewayFailover.TwoWay = dr.GetBoolean(3);


            pPaymentGatewayFailover.IsDirty = false;
        }

        #endregion

        #region Class Data

        private bool _IsDirty;

        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }


        private Int32 _PaymentGatewayFailoverId;

        [DataObjectField(true, false, false)]
        public Int32 PaymentGatewayFailoverId
        {
            get { return this._PaymentGatewayFailoverId; }
            set
            {
                if (this._PaymentGatewayFailoverId != value)
                {
                    this._PaymentGatewayFailoverId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _SourcePaymentGatewayId;

        [DataObjectField(true, false, false)]
        public Int32 SourcePaymentGatewayId
        {
            get { return this._SourcePaymentGatewayId; }
            set
            {
                if (this._SourcePaymentGatewayId != value)
                {
                    this._SourcePaymentGatewayId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _DestinationPaymentGatewayId;

        [DataObjectField(true, false, false)]
        public Int32 DestinationPaymentGatewayId
        {
            get { return this._DestinationPaymentGatewayId; }
            set
            {
                if (this._DestinationPaymentGatewayId != value)
                {
                    this._DestinationPaymentGatewayId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Boolean _TwoWay;

        [DataObjectField(true, false, false)]
        public Boolean TwoWay
        {
            get { return this._TwoWay; }
            set
            {
                if (this._TwoWay != value)
                {
                    this._TwoWay = value;
                    this.IsDirty = true;
                }
            }
        }



        #endregion



        #region CURD

        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SET NOCOUNT ON; ");
            deleteQuery.Append("DELETE FROM xm_PaymentGatewayFailover");
            deleteQuery.Append(" WHERE PaymentGatewayFailoverId = @PaymentGatewayFailoverId  ");
            Database database = Token.Instance.Database;

            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {

                database.AddInParameter(deleteCommand, "@PaymentGatewayFailoverId", System.Data.DbType.Int32, this.PaymentGatewayFailoverId);

                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }

            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            /*
            deleteQuery.Append(" WHERE  SourcePaymentGatewayId = @SourcePaymentGatewayId AND  DestinationPaymentGatewayId = @DestinationPaymentGatewayId  ");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {

                database.AddInParameter(deleteCommand, "@SourcePaymentGatewayId", System.Data.DbType.Int32, this.SourcePaymentGatewayId);

                database.AddInParameter(deleteCommand, "@DestinationPaymentGatewayId", System.Data.DbType.Int32, this.DestinationPaymentGatewayId);

                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
             * */
            return (recordsAffected > 0);
        }

        public virtual bool Load(Int32 pSourcePaymentGatewayId, Int32 pDestinationPaymentGatewayId)
        {
            bool result = false;

            this.SourcePaymentGatewayId = pSourcePaymentGatewayId;

            this.DestinationPaymentGatewayId = pDestinationPaymentGatewayId;


            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SET NOCOUNT ON; ");
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM xm_PaymentGatewayFailover (NOLOCK) ");
            selectQuery.Append(" WHERE  SourcePaymentGatewayId = @SourcePaymentGatewayId AND  DestinationPaymentGatewayId = @DestinationPaymentGatewayId  ");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());


            database.AddInParameter(selectCommand, "@SourcePaymentGatewayId", System.Data.DbType.Int32, this.SourcePaymentGatewayId);

            database.AddInParameter(selectCommand, "@DestinationPaymentGatewayId", System.Data.DbType.Int32, this.DestinationPaymentGatewayId);


            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr); ;
                }
                dr.Close();
            }
            return result;
        }

        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = PaymentGatewayFailoverId != 0;
                if (false) //may need to check for dupes.
                {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SET NOCOUNT ON; ");
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM xm_PaymentGatewayFailover (NOLOCK) ");
                    selectQuery.Append(" WHERE  SourcePaymentGatewayId = @SourcePaymentGatewayId AND  DestinationPaymentGatewayId = @DestinationPaymentGatewayId ");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {

                        database.AddInParameter(selectCommand, "@SourcePaymentGatewayId", System.Data.DbType.Int32, this.SourcePaymentGatewayId);

                        database.AddInParameter(selectCommand, "@DestinationPaymentGatewayId", System.Data.DbType.Int32, this.DestinationPaymentGatewayId);


                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }
                if (recordExists)
                {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SET NOCOUNT ON; ");
                    selectQuery.Append("SELECT count(1) as RecordCount FROM xm_PaymentGatewayFailover (NOLOCK) ");
                    selectQuery.Append(" WHERE PaymentGatewayFailoverId = @PaymentGatewayFailoverId ");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {

                        database.AddInParameter(selectCommand, "@PaymentGatewayFailoverId", System.Data.DbType.Int32, this.PaymentGatewayFailoverId);

                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE xm_PaymentGatewayFailover SET ");

                    updateQuery.Append(" SourcePaymentGatewayId = @SourcePaymentGatewayId,DestinationPaymentGatewayId = @DestinationPaymentGatewayId,TwoWay = @TwoWay");

                    updateQuery.Append(" WHERE PaymentGatewayFailoverId = @PaymentGatewayFailoverId ");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {

                        database.AddInParameter(updateCommand, "@PaymentGatewayFailoverId", System.Data.DbType.Int32, this.PaymentGatewayFailoverId);

                        database.AddInParameter(updateCommand, "@SourcePaymentGatewayId", System.Data.DbType.Int32, this.SourcePaymentGatewayId);

                        database.AddInParameter(updateCommand, "@DestinationPaymentGatewayId", System.Data.DbType.Int32, this.DestinationPaymentGatewayId);

                        database.AddInParameter(updateCommand, "@TwoWay", System.Data.DbType.Boolean, this.TwoWay);


                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO xm_PaymentGatewayFailover (SourcePaymentGatewayId,DestinationPaymentGatewayId,TwoWay )");
                    insertQuery.Append(" VALUES (@SourcePaymentGatewayId,@DestinationPaymentGatewayId,@TwoWay )");



                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {

                        database.AddInParameter(insertCommand, "@SourcePaymentGatewayId", System.Data.DbType.Int32, this.SourcePaymentGatewayId);

                        database.AddInParameter(insertCommand, "@DestinationPaymentGatewayId", System.Data.DbType.Int32, this.DestinationPaymentGatewayId);

                        database.AddInParameter(insertCommand, "@TwoWay", System.Data.DbType.Boolean, this.TwoWay);

                        //RESULT IS NUMBER OF RECORDS AFFECTED;
                        result = database.ExecuteNonQuery(insertCommand);



                    }
                }
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        #endregion
    }
}
