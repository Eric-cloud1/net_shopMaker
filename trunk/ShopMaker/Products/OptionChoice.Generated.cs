//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Products;
using MakerShop.Utility;

namespace MakerShop.Products
{
    /// <summary>
    /// This class represents a OptionChoice object in the database.
    /// </summary>
    public partial class OptionChoice : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public OptionChoice() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="optionChoiceId">Value of OptionChoiceId.</param>
        /// </summary>
        public OptionChoice(Int32 optionChoiceId)
        {
            this.OptionChoiceId = optionChoiceId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "OptionChoiceId");
          columnNames.Add(prefix + "OptionId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "ThumbnailUrl");
          columnNames.Add(prefix + "ImageUrl");
          columnNames.Add(prefix + "PriceModifier");
          columnNames.Add(prefix + "CogsModifier");
          columnNames.Add(prefix + "WeightModifier");
          columnNames.Add(prefix + "SkuModifier");
          columnNames.Add(prefix + "OrderBy");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given OptionChoice object from the given database data reader.
        /// </summary>
        /// <param name="optionChoice">The OptionChoice object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(OptionChoice optionChoice, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            optionChoice.OptionChoiceId = dr.GetInt32(0);
            optionChoice.OptionId = dr.GetInt32(1);
            optionChoice.Name = dr.GetString(2);
            optionChoice.ThumbnailUrl = NullableData.GetString(dr, 3);
            optionChoice.ImageUrl = NullableData.GetString(dr, 4);
            optionChoice.PriceModifier = NullableData.GetDecimal(dr, 5);
            optionChoice.CogsModifier = NullableData.GetDecimal(dr, 6);
            optionChoice.WeightModifier = NullableData.GetDecimal(dr, 7);
            optionChoice.SkuModifier = NullableData.GetString(dr, 8);
            optionChoice.OrderBy = dr.GetInt16(9);
            optionChoice.IsDirty = false;
        }

#endregion

        private Int32 _OptionChoiceId;
        private Int32 _OptionId;
        private String _Name = string.Empty;
        private String _ThumbnailUrl = string.Empty;
        private String _ImageUrl = string.Empty;
        private LSDecimal _PriceModifier;
        private LSDecimal _CogsModifier;
        private LSDecimal _WeightModifier;
        private String _SkuModifier = string.Empty;
        private Int16 _OrderBy = -1;
        private bool _IsDirty;

        /// <summary>
        /// OptionChoiceId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 OptionChoiceId
        {
            get { return this._OptionChoiceId; }
            set
            {
                if (this._OptionChoiceId != value)
                {
                    this._OptionChoiceId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OptionId
        /// </summary>
        public Int32 OptionId
        {
            get { return this._OptionId; }
            set
            {
                if (this._OptionId != value)
                {
                    this._OptionId = value;
                    this.IsDirty = true;
                    this._Option = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ThumbnailUrl
        /// </summary>
        public String ThumbnailUrl
        {
            get { return this._ThumbnailUrl; }
            set
            {
                if (this._ThumbnailUrl != value)
                {
                    this._ThumbnailUrl = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ImageUrl
        /// </summary>
        public String ImageUrl
        {
            get { return this._ImageUrl; }
            set
            {
                if (this._ImageUrl != value)
                {
                    this._ImageUrl = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PriceModifier
        /// </summary>
        public LSDecimal PriceModifier
        {
            get { return this._PriceModifier; }
            set
            {
                if (this._PriceModifier != value)
                {
                    this._PriceModifier = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CogsModifier
        /// </summary>
        public LSDecimal CogsModifier
        {
            get { return this._CogsModifier; }
            set
            {
                if (this._CogsModifier != value)
                {
                    this._CogsModifier = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// WeightModifier
        /// </summary>
        public LSDecimal WeightModifier
        {
            get { return this._WeightModifier; }
            set
            {
                if (this._WeightModifier != value)
                {
                    this._WeightModifier = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// SkuModifier
        /// </summary>
        public String SkuModifier
        {
            get { return this._SkuModifier; }
            set
            {
                if (this._SkuModifier != value)
                {
                    this._SkuModifier = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderBy
        /// </summary>
        public Int16 OrderBy
        {
            get { return this._OrderBy; }
            set
            {
                if (this._OrderBy != value)
                {
                    this._OrderBy = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this OptionChoice object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private Option _Option;

        /// <summary>
        /// The Option object that this OptionChoice object is associated with
        /// </summary>
        public Option Option
        {
            get
            {
                if (!this.OptionLoaded)
                {
                    this._Option = OptionDataSource.Load(this.OptionId);
                }
                return this._Option;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OptionLoaded { get { return ((this._Option != null) && (this._Option.OptionId == this.OptionId)); } }

#endregion

        /// <summary>
        /// Deletes this OptionChoice object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_OptionChoices");
            deleteQuery.Append(" WHERE OptionChoiceId = @optionChoiceId");
            Database database = Token.Instance.Database;

            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null);
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@OptionChoiceId", System.Data.DbType.Int32, this.OptionChoiceId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this OptionChoice object from the database for the given primary key.
        /// </summary>
        /// <param name="optionChoiceId">Value of OptionChoiceId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 optionChoiceId)
        {
            bool result = false;
            this.OptionChoiceId = optionChoiceId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OptionChoices");
            selectQuery.Append(" WHERE OptionChoiceId = @optionChoiceId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@optionChoiceId", System.Data.DbType.Int32, optionChoiceId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this OptionChoice object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;
                
                if (this.OptionChoiceId == 0) recordExists = false;

                if (this.OrderBy < 0) this.OrderBy = OptionChoiceDataSource.GetNextOrderBy(this.OptionId);

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_OptionChoices");
                    selectQuery.Append(" WHERE OptionChoiceId = @optionChoiceId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@OptionChoiceId", System.Data.DbType.Int32, this.OptionChoiceId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_OptionChoices SET ");
                    updateQuery.Append("OptionId = @OptionId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", ThumbnailUrl = @ThumbnailUrl");
                    updateQuery.Append(", ImageUrl = @ImageUrl");
                    updateQuery.Append(", PriceModifier = @PriceModifier");
                    updateQuery.Append(", CogsModifier = @CogsModifier");
                    updateQuery.Append(", WeightModifier = @WeightModifier");
                    updateQuery.Append(", SkuModifier = @SkuModifier");
                    updateQuery.Append(", OrderBy = @OrderBy");
                    updateQuery.Append(" WHERE OptionChoiceId = @OptionChoiceId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@OptionChoiceId", System.Data.DbType.Int32, this.OptionChoiceId);
                        database.AddInParameter(updateCommand, "@OptionId", System.Data.DbType.Int32, this.OptionId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@ThumbnailUrl", System.Data.DbType.String, NullableData.DbNullify(this.ThumbnailUrl));
                        database.AddInParameter(updateCommand, "@ImageUrl", System.Data.DbType.String, NullableData.DbNullify(this.ImageUrl));
                        database.AddInParameter(updateCommand, "@PriceModifier", System.Data.DbType.Decimal, NullableData.DbNullify(this.PriceModifier));
                        database.AddInParameter(updateCommand, "@CogsModifier", System.Data.DbType.Decimal, NullableData.DbNullify(this.CogsModifier));
                        database.AddInParameter(updateCommand, "@WeightModifier", System.Data.DbType.Decimal, NullableData.DbNullify(this.WeightModifier));
                        database.AddInParameter(updateCommand, "@SkuModifier", System.Data.DbType.String, NullableData.DbNullify(this.SkuModifier));
                        database.AddInParameter(updateCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_OptionChoices (OptionId, Name, ThumbnailUrl, ImageUrl, PriceModifier, CogsModifier, WeightModifier, SkuModifier, OrderBy)");
                    insertQuery.Append(" VALUES (@OptionId, @Name, @ThumbnailUrl, @ImageUrl, @PriceModifier, @CogsModifier, @WeightModifier, @SkuModifier, @OrderBy)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@OptionChoiceId", System.Data.DbType.Int32, this.OptionChoiceId);
                        database.AddInParameter(insertCommand, "@OptionId", System.Data.DbType.Int32, this.OptionId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@ThumbnailUrl", System.Data.DbType.String, NullableData.DbNullify(this.ThumbnailUrl));
                        database.AddInParameter(insertCommand, "@ImageUrl", System.Data.DbType.String, NullableData.DbNullify(this.ImageUrl));
                        database.AddInParameter(insertCommand, "@PriceModifier", System.Data.DbType.Decimal, NullableData.DbNullify(this.PriceModifier));
                        database.AddInParameter(insertCommand, "@CogsModifier", System.Data.DbType.Decimal, NullableData.DbNullify(this.CogsModifier));
                        database.AddInParameter(insertCommand, "@WeightModifier", System.Data.DbType.Decimal, NullableData.DbNullify(this.WeightModifier));
                        database.AddInParameter(insertCommand, "@SkuModifier", System.Data.DbType.String, NullableData.DbNullify(this.SkuModifier));
                        database.AddInParameter(insertCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._OptionChoiceId = result;
                    }
                }
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
