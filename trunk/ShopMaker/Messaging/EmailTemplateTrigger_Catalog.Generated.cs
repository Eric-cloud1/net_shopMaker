//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Messaging;
using MakerShop.Orders;
using MakerShop.Stores;
using MakerShop.Utility;

namespace MakerShop.Messaging
{
    public partial class EmailTemplateTrigger_Catalog : IPersistable
    {

        #region Constructors

        public EmailTemplateTrigger_Catalog() { }

        public EmailTemplateTrigger_Catalog(Int32 pEmailTemplateId, Int32 pStoreEventId, Byte pCatalogNodeTypeId, Int32 pCatalogNodeId, Int16 pPaymentTypeId)
        {
            this.EmailTemplateId = pEmailTemplateId;
            this.StoreEventId = pStoreEventId;
            this.CatalogNodeTypeId = pCatalogNodeTypeId;
            this.CatalogNodeId = pCatalogNodeId;
            this.PaymentTypeId = pPaymentTypeId;

        }

        public static string GetColumnNames(string prefix)
        {
            if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
            else prefix = prefix + ".";
            List<string> columnNames = new List<string>();
            columnNames.Add(prefix + "EmailTemplateId");
            columnNames.Add(prefix + "StoreEventId");
            columnNames.Add(prefix + "CatalogNodeTypeId");
            columnNames.Add(prefix + "CatalogNodeId");
            columnNames.Add(prefix + "PaymentTypeId");


            return string.Join(",", columnNames.ToArray());
        }

        public static void LoadDataReader(EmailTemplateTrigger_Catalog pEmailTemplateTriggers_Catalog, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA

            pEmailTemplateTriggers_Catalog.EmailTemplateId = dr.GetInt32(0);

            pEmailTemplateTriggers_Catalog.StoreEventId = dr.GetInt32(1);

            pEmailTemplateTriggers_Catalog.CatalogNodeTypeId = dr.GetByte(2);

            pEmailTemplateTriggers_Catalog.CatalogNodeId = dr.GetInt32(3);
            
            pEmailTemplateTriggers_Catalog.PaymentTypeId = dr.GetInt16(4);


            pEmailTemplateTriggers_Catalog.IsDirty = false;
        }

        #endregion

        #region Class Data

        private bool _IsDirty;

        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }


        private Int32 _EmailTemplateId;

        [DataObjectField(true, false, false)]
        public Int32 EmailTemplateId
        {
            get { return this._EmailTemplateId; }
            set
            {
                if (this._EmailTemplateId != value)
                {
                    this._EmailTemplateId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _StoreEventId;

        [DataObjectField(true, false, false)]
        public Int32 StoreEventId
        {
            get { return this._StoreEventId; }
            set
            {
                if (this._StoreEventId != value)
                {
                    this._StoreEventId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Byte _CatalogNodeTypeId;

        [DataObjectField(true, false, false)]
        public Byte CatalogNodeTypeId
        {
            get { return this._CatalogNodeTypeId; }
            set
            {
                if (this._CatalogNodeTypeId != value)
                {
                    this._CatalogNodeTypeId = value;
                    this.IsDirty = true;
                }
            }
        }


        private Int32 _CatalogNodeId;

        [DataObjectField(true, false, false)]
        public Int32 CatalogNodeId
        {
            get { return this._CatalogNodeId; }
            set
            {
                if (this._CatalogNodeId != value)
                {
                    this._CatalogNodeId = value;
                    this.IsDirty = true;
                }
            }
        }

        private Int16 _PaymentTypeId;

        [DataObjectField(true, false, false)]
        public Int16 PaymentTypeId
        {
            get { return this._PaymentTypeId; }
            set
            {
                if (this._PaymentTypeId != value)
                {
                    this._PaymentTypeId = value;
                    this.IsDirty = true;
                }
            }
        }


        #endregion



        #region CURD

        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM xm_EmailTemplateTriggers_Catalog");
            deleteQuery.Append(" WHERE  EmailTemplateId = @EmailTemplateId AND  StoreEventId = @StoreEventId AND  CatalogNodeTypeId = @CatalogNodeTypeId AND  CatalogNodeId = @CatalogNodeId AND PaymentTypeId = @PaymentTypeId ");
            Database database = Token.Instance.Database;

            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null);
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {

                database.AddInParameter(deleteCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);
                database.AddInParameter(deleteCommand, "@StoreEventId", System.Data.DbType.Int32, this.StoreEventId);
                database.AddInParameter(deleteCommand, "@CatalogNodeTypeId", System.Data.DbType.Byte, this.CatalogNodeTypeId);
                database.AddInParameter(deleteCommand, "@CatalogNodeId", System.Data.DbType.Int32, this.CatalogNodeId);
                database.AddInParameter(deleteCommand, "@PaymentTypeId", System.Data.DbType.Int32, this.PaymentTypeId);

                recordsAffected = database.ExecuteNonQuery(deleteCommand);

            }
            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }

        public virtual bool Load(Int32 pEmailTemplateId, Int32 pStoreEventId, Byte pCatalogNodeTypeId, Int32 pCatalogNodeId, Int16 pPaymentTypeId)
        {
            bool result = false;

            this.EmailTemplateId = pEmailTemplateId;

            this.StoreEventId = pStoreEventId;

            this.CatalogNodeTypeId = pCatalogNodeTypeId;

            this.CatalogNodeId = pCatalogNodeId;

            this.PaymentTypeId = pPaymentTypeId;


            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM xm_EmailTemplateTriggers_Catalog");
            selectQuery.Append(" WHERE  EmailTemplateId = @EmailTemplateId AND  StoreEventId = @StoreEventId AND  CatalogNodeTypeId = @CatalogNodeTypeId AND  CatalogNodeId = @CatalogNodeId AND  PaymentTypeId = @PaymentTypeId ");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());


            database.AddInParameter(selectCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);

            database.AddInParameter(selectCommand, "@StoreEventId", System.Data.DbType.Int32, this.StoreEventId);

            database.AddInParameter(selectCommand, "@CatalogNodeTypeId", System.Data.DbType.Byte, this.CatalogNodeTypeId);

            database.AddInParameter(selectCommand, "@CatalogNodeId", System.Data.DbType.Int32, this.CatalogNodeId);

            database.AddInParameter(selectCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);


            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr); ;
                }
                dr.Close();
            }
            return result;
        }

        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;

                if (recordExists)
                {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM xm_EmailTemplateTriggers_Catalog");
                    selectQuery.Append(" WHERE  EmailTemplateId = @EmailTemplateId AND  StoreEventId = @StoreEventId AND  CatalogNodeTypeId = @CatalogNodeTypeId AND  CatalogNodeId = @CatalogNodeId AND  PaymentTypeId = @PaymentTypeId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {

                        database.AddInParameter(selectCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);

                        database.AddInParameter(selectCommand, "@StoreEventId", System.Data.DbType.Int32, this.StoreEventId);

                        database.AddInParameter(selectCommand, "@CatalogNodeTypeId", System.Data.DbType.Byte, this.CatalogNodeTypeId);

                        database.AddInParameter(selectCommand, "@CatalogNodeId", System.Data.DbType.Int32, this.CatalogNodeId);

                        database.AddInParameter(selectCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);


                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE xm_EmailTemplateTriggers_Catalog SET ");

                    updateQuery.Append("");

                    updateQuery.Append(" WHERE  EmailTemplateId = @EmailTemplateId AND  StoreEventId = @StoreEventId AND  CatalogNodeTypeId = @CatalogNodeTypeId AND  CatalogNodeId = @CatalogNodeId AND  PaymentTypeId = @PaymentTypeId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {


                        database.AddInParameter(updateCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);

                        database.AddInParameter(updateCommand, "@StoreEventId", System.Data.DbType.Int32, this.StoreEventId);

                        database.AddInParameter(updateCommand, "@CatalogNodeTypeId", System.Data.DbType.Byte, this.CatalogNodeTypeId);

                        database.AddInParameter(updateCommand, "@CatalogNodeId", System.Data.DbType.Int32, this.CatalogNodeId);

                        database.AddInParameter(updateCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);


                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO xm_EmailTemplateTriggers_Catalog (EmailTemplateId,StoreEventId,CatalogNodeTypeId,CatalogNodeId,PaymentTypeId )");
                    insertQuery.Append(" VALUES (@EmailTemplateId,@StoreEventId,@CatalogNodeTypeId,@CatalogNodeId,@PaymentTypeId )");



                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {

                        database.AddInParameter(insertCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);

                        database.AddInParameter(insertCommand, "@StoreEventId", System.Data.DbType.Int32, this.StoreEventId);

                        database.AddInParameter(insertCommand, "@CatalogNodeTypeId", System.Data.DbType.Byte, this.CatalogNodeTypeId);

                        database.AddInParameter(insertCommand, "@CatalogNodeId", System.Data.DbType.Int32, this.CatalogNodeId);

                        database.AddInParameter(insertCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);

                        //RESULT IS NUMBER OF RECORDS AFFECTED;
                        result = database.ExecuteNonQuery(insertCommand);



                    }
                }

                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        #endregion
    }
}
