//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Messaging;
using MakerShop.Utility;

namespace MakerShop.Messaging
{
    /// <summary>
    /// This class represents a EmailTemplateTrigger object in the database.
    /// </summary>
    public partial class EmailTemplateTrigger : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public EmailTemplateTrigger() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="emailTemplateId">Value of EmailTemplateId.</param>
        /// <param name="storeEventId">Value of StoreEventId.</param>
        /// </summary>
        public EmailTemplateTrigger(Int32 emailTemplateId, Int32 storeEventId, Int16 paymentTypeId)
        {
            this.EmailTemplateId = emailTemplateId;
            this.StoreEventId = storeEventId;
            this.PaymentTypeId = paymentTypeId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "EmailTemplateId");
          columnNames.Add(prefix + "StoreEventId");
          columnNames.Add(prefix + "PaymentTypeId");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given EmailTemplateTrigger object from the given database data reader.
        /// </summary>
        /// <param name="emailTemplateTrigger">The EmailTemplateTrigger object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(EmailTemplateTrigger emailTemplateTrigger, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            emailTemplateTrigger.EmailTemplateId = dr.GetInt32(0);
            emailTemplateTrigger.StoreEventId = dr.GetInt32(1);
            emailTemplateTrigger.PaymentTypeId = dr.GetInt16(2);
            emailTemplateTrigger.IsDirty = false;
        }

#endregion

        private Int32 _EmailTemplateId;
        private Int32 _StoreEventId;
        private Int16 _PaymentTypeId;
        private bool _IsDirty;

        /// <summary>
        /// EmailTemplateId
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int32 EmailTemplateId
        {
            get { return this._EmailTemplateId; }
            set
            {
                if (this._EmailTemplateId != value)
                {
                    this._EmailTemplateId = value;
                    this.IsDirty = true;
                    this._EmailTemplate = null;
                }
            }
        }
        /// <summary>
        /// PaymentTypeId
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int16 PaymentTypeId
        {
            get { return this._PaymentTypeId; }
            set
            {
                if (this._PaymentTypeId != value)
                {
                    this._PaymentTypeId = value;
                    this.IsDirty = true;
                }
            }
        }
        /// <summary>
        /// StoreEventId
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int32 StoreEventId
        {
            get { return this._StoreEventId; }
            set
            {
                if (this._StoreEventId != value)
                {
                    this._StoreEventId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this EmailTemplateTrigger object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private EmailTemplate _EmailTemplate;

        /// <summary>
        /// The EmailTemplate object that this EmailTemplateTrigger object is associated with
        /// </summary>
        public EmailTemplate EmailTemplate
        {
            get
            {
                if (!this.EmailTemplateLoaded)
                {
                    this._EmailTemplate = EmailTemplateDataSource.Load(this.EmailTemplateId);
                }
                return this._EmailTemplate;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool EmailTemplateLoaded { get { return ((this._EmailTemplate != null) && (this._EmailTemplate.EmailTemplateId == this.EmailTemplateId)); } }

#endregion

        /// <summary>
        /// Deletes this EmailTemplateTrigger object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_EmailTemplateTriggers");
            deleteQuery.Append(" WHERE EmailTemplateId = @emailTemplateId AND StoreEventId = @storeEventId AND PaymentTypeId = @PaymentTypeId");
            Database database = Token.Instance.Database;

            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);
                database.AddInParameter(deleteCommand, "@StoreEventId", System.Data.DbType.Int32, this.StoreEventId);
                database.AddInParameter(deleteCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
            return (recordsAffected > 0);
        }

        /// <summary>
        /// Load this EmailTemplateTrigger object from the database for the given primary key.
        /// </summary>
        /// <param name="emailTemplateId">Value of EmailTemplateId of the object to load.</param>
        /// <param name="storeEventId">Value of StoreEventId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 emailTemplateId, Int32 storeEventId)
        {
            this.EmailTemplateId = emailTemplateId;
            this.StoreEventId = storeEventId;
            this.IsDirty = false;
            return true;
        }

        /// <summary>
        /// Saves this EmailTemplateTrigger object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                
                bool recordExists = true;
                
                //generate key(s) if needed
                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_EmailTemplateTriggers");
                    selectQuery.Append(" WHERE EmailTemplateId = @emailTemplateId AND StoreEventId = @storeEventId AND PaymentTypeId = @PaymentTypeId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);
                        database.AddInParameter(selectCommand, "@StoreEventId", System.Data.DbType.Int32, this.StoreEventId);
                        database.AddInParameter(selectCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                if (recordExists)
                {
                    //RECORD ALREADY EXISTS IN DATABASE
                    this.IsDirty = false;
                    return SaveResult.RecordUpdated;
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_EmailTemplateTriggers (EmailTemplateId, StoreEventId, PaymentTypeId)");
                    insertQuery.Append(" VALUES (@EmailTemplateId, @StoreEventId, @PaymentTypeId)");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);
                        database.AddInParameter(insertCommand, "@StoreEventId", System.Data.DbType.Int32, this.StoreEventId);
                        database.AddInParameter(insertCommand, "@PaymentTypeId", System.Data.DbType.Int16, this.PaymentTypeId);
                        
                        MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                        int recordsAffected = database.ExecuteNonQuery(insertCommand);
                        MakerShop.Stores.AuditEventDataSource.AuditInfoEnd(); 
                        
                        //OBJECT IS NOT DIRTY IF RECORD WAS INSERTED
                        this.IsDirty = (recordsAffected == 0);
                        if (this.IsDirty) { return SaveResult.Failed; }
                        return SaveResult.RecordInserted;
                    }
                }

            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
