//Generated by DataSourceBaseGenerator_Assn

using System;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
namespace MakerShop.Taxes
{

    /// <summary>
    /// DataSource class for TaxRuleTaxCode objects
    /// </summary>
    public partial class TaxRuleTaxCodeDataSource
    {
        /// <summary>
        /// Deletes a TaxRuleTaxCode object from the database
        /// </summary>
        /// <param name="taxRuleTaxCode">The TaxRuleTaxCode object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(TaxRuleTaxCode taxRuleTaxCode)
        {
            return taxRuleTaxCode.Delete();
        }

        /// <summary>
        /// Deletes a TaxRuleTaxCode object with given id from the database
        /// </summary>
        /// <param name="taxRuleId">Value of TaxRuleId of the object to delete.</param>
        /// <param name="taxCodeId">Value of TaxCodeId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 taxRuleId, Int32 taxCodeId)
        {
            TaxRuleTaxCode taxRuleTaxCode = new TaxRuleTaxCode();
            if (taxRuleTaxCode.Load(taxRuleId, taxCodeId)) return taxRuleTaxCode.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a TaxRuleTaxCode object to the database.
        /// </summary>
        /// <param name="taxRuleTaxCode">The TaxRuleTaxCode object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(TaxRuleTaxCode taxRuleTaxCode) { return taxRuleTaxCode.Save(); }

        /// <summary>
        /// Load a TaxRuleTaxCode object for the given primary key from the database.
        /// </summary>
        /// <param name="taxRuleId">Value of TaxRuleId of the object to load.</param>
        /// <param name="taxCodeId">Value of TaxCodeId of the object to load.</param>
        /// <returns>The loaded TaxRuleTaxCode object.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleTaxCode Load(Int32 taxRuleId, Int32 taxCodeId)
        {
            TaxRuleTaxCode taxRuleTaxCode = new TaxRuleTaxCode();
            taxRuleTaxCode.TaxRuleId = taxRuleId;
            taxRuleTaxCode.TaxCodeId = taxCodeId;
            taxRuleTaxCode.IsDirty = false;
            return taxRuleTaxCode;
        }

        /// <summary>
        /// Loads a collection of TaxRuleTaxCode objects for the given criteria for TaxCode from the database.
        /// </summary>
        /// <param name="taxCodeId">Value of TaxCodeId of the object to load.</param>
        /// <returns>A collection of TaxRuleTaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleTaxCodeCollection LoadForTaxCode(Int32 taxCodeId)
        {
            TaxRuleTaxCodeCollection TaxRuleTaxCodes = new TaxRuleTaxCodeCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT TaxRuleId");
            selectQuery.Append(" FROM ac_TaxRuleTaxCodes");
            selectQuery.Append(" WHERE TaxCodeId = @taxCodeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, taxCodeId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    TaxRuleTaxCode taxRuleTaxCode = new TaxRuleTaxCode();
                    taxRuleTaxCode.TaxCodeId = taxCodeId;
                    taxRuleTaxCode.TaxRuleId = dr.GetInt32(0);
                    TaxRuleTaxCodes.Add(taxRuleTaxCode);
                }
                dr.Close();
            }
            return TaxRuleTaxCodes;
        }

        /// <summary>
        /// Loads a collection of TaxRuleTaxCode objects for the given criteria for TaxRule from the database.
        /// </summary>
        /// <param name="taxRuleId">Value of TaxRuleId of the object to load.</param>
        /// <returns>A collection of TaxRuleTaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleTaxCodeCollection LoadForTaxRule(Int32 taxRuleId)
        {
            TaxRuleTaxCodeCollection TaxRuleTaxCodes = new TaxRuleTaxCodeCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT TaxCodeId");
            selectQuery.Append(" FROM ac_TaxRuleTaxCodes");
            selectQuery.Append(" WHERE TaxRuleId = @taxRuleId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxRuleId", System.Data.DbType.Int32, taxRuleId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    TaxRuleTaxCode taxRuleTaxCode = new TaxRuleTaxCode();
                    taxRuleTaxCode.TaxRuleId = taxRuleId;
                    taxRuleTaxCode.TaxCodeId = dr.GetInt32(0);
                    TaxRuleTaxCodes.Add(taxRuleTaxCode);
                }
                dr.Close();
            }
            return TaxRuleTaxCodes;
        }

        /// <summary>
        /// Updates/Saves the given TaxRuleTaxCode object to the database.
        /// </summary>
        /// <param name="taxRuleTaxCode">The TaxRuleTaxCode object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(TaxRuleTaxCode taxRuleTaxCode) { return taxRuleTaxCode.Save(); }

    }
}
