//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Utility;

namespace MakerShop.Taxes
{
    /// <summary>
    /// DataSource class for TaxRule objects
    /// </summary>
    public partial class TaxRuleDataSource
    {
        /// <summary>
        /// Deletes a TaxRule object from the database
        /// </summary>
        /// <param name="taxRule">The TaxRule object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(TaxRule taxRule)
        {
            return taxRule.Delete();
        }

        /// <summary>
        /// Deletes a TaxRule object with given id from the database
        /// </summary>
        /// <param name="taxRuleId">Value of TaxRuleId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 taxRuleId)
        {
            TaxRule taxRule = new TaxRule();
            if (taxRule.Load(taxRuleId)) return taxRule.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a TaxRule object to the database.
        /// </summary>
        /// <param name="taxRule">The TaxRule object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(TaxRule taxRule) { return taxRule.Save(); }

        /// <summary>
        /// Loads a TaxRule object for given Id from the database.
        /// </summary>
        /// <param name="taxRuleId">Value of TaxRuleId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded TaxRule object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRule Load(Int32 taxRuleId)
        {
            return TaxRuleDataSource.Load(taxRuleId, true);
        }

        /// <summary>
        /// Loads a TaxRule object for given Id from the database.
        /// </summary>
        /// <param name="taxRuleId">Value of TaxRuleId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded TaxRule object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRule Load(Int32 taxRuleId, bool useCache)
        {
            if (taxRuleId == 0) return null;
            TaxRule taxRule = null;
            string key = "TaxRule_" + taxRuleId.ToString();
            if (useCache)
            {
                taxRule = ContextCache.GetObject(key) as TaxRule;
                if (taxRule != null) return taxRule;
            }
            taxRule = new TaxRule();
            if (taxRule.Load(taxRuleId))
            {
                if (useCache) ContextCache.SetObject(key, taxRule);
                return taxRule;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of TaxRule objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the TaxRule objects that should be loaded.</param>
        /// <returns>The number of TaxRule objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxRules" + whereClause);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of TaxRule objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Priority";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxRule.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TaxRules");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            TaxRuleCollection results = new TaxRuleCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxRule taxRule = new TaxRule();
                        TaxRule.LoadDataReader(taxRule, dr);
                        results.Add(taxRule);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TaxRule objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <returns>The number of TaxRule objects associated with with the given GroupId</returns>
        public static int CountForGroup(Int32 groupId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxRuleGroups WHERE GroupId = @groupId");
            database.AddInParameter(selectCommand, "@groupId", System.Data.DbType.Int32, groupId);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <returns>A collection of TaxRule objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForGroup(Int32 groupId)
        {
            return TaxRuleDataSource.LoadForGroup(groupId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForGroup(Int32 groupId, string sortExpression)
        {
            return TaxRuleDataSource.LoadForGroup(groupId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxRule objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForGroup(Int32 groupId, int maximumRows, int startRowIndex)
        {
            return TaxRuleDataSource.LoadForGroup(groupId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForGroup(Int32 groupId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Priority";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxRule.GetColumnNames("ac_TaxRules"));
            selectQuery.Append(" FROM ac_TaxRules, ac_TaxRuleGroups");
            selectQuery.Append(" WHERE ac_TaxRules.TaxRuleId = ac_TaxRuleGroups.TaxRuleId");
            selectQuery.Append(" AND ac_TaxRuleGroups.GroupId = @groupId");
            selectQuery.Append(" AND StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@groupId", System.Data.DbType.Int32, groupId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            TaxRuleCollection results = new TaxRuleCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxRule taxRule = new TaxRule();
                        TaxRule.LoadDataReader(taxRule, dr);
                        results.Add(taxRule);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TaxRule objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <returns>The number of TaxRule objects associated with with the given ShipZoneId</returns>
        public static int CountForShipZone(Int32 shipZoneId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxRuleShipZones WHERE ShipZoneId = @shipZoneId");
            database.AddInParameter(selectCommand, "@shipZoneId", System.Data.DbType.Int32, shipZoneId);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <returns>A collection of TaxRule objects associated with with the given ShipZoneId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForShipZone(Int32 shipZoneId)
        {
            return TaxRuleDataSource.LoadForShipZone(shipZoneId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects associated with with the given ShipZoneId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForShipZone(Int32 shipZoneId, string sortExpression)
        {
            return TaxRuleDataSource.LoadForShipZone(shipZoneId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxRule objects associated with with the given ShipZoneId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForShipZone(Int32 shipZoneId, int maximumRows, int startRowIndex)
        {
            return TaxRuleDataSource.LoadForShipZone(shipZoneId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects associated with with the given ShipZoneId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForShipZone(Int32 shipZoneId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Priority";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxRule.GetColumnNames("ac_TaxRules"));
            selectQuery.Append(" FROM ac_TaxRules, ac_TaxRuleShipZones");
            selectQuery.Append(" WHERE ac_TaxRules.TaxRuleId = ac_TaxRuleShipZones.TaxRuleId");
            selectQuery.Append(" AND ac_TaxRuleShipZones.ShipZoneId = @shipZoneId");
            selectQuery.Append(" AND StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipZoneId", System.Data.DbType.Int32, shipZoneId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            TaxRuleCollection results = new TaxRuleCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxRule taxRule = new TaxRule();
                        TaxRule.LoadDataReader(taxRule, dr);
                        results.Add(taxRule);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TaxRule objects associated with the given TaxCodeId
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <returns>The number of TaxRule objects associated with with the given TaxCodeId</returns>
        public static int CountForTaxCode(Int32 taxCodeId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxRuleTaxCodes WHERE TaxCodeId = @taxCodeId");
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, taxCodeId);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given TaxCodeId
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <returns>A collection of TaxRule objects associated with with the given TaxCodeId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForTaxCode(Int32 taxCodeId)
        {
            return TaxRuleDataSource.LoadForTaxCode(taxCodeId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given TaxCodeId
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects associated with with the given TaxCodeId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForTaxCode(Int32 taxCodeId, string sortExpression)
        {
            return TaxRuleDataSource.LoadForTaxCode(taxCodeId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given TaxCodeId
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxRule objects associated with with the given TaxCodeId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForTaxCode(Int32 taxCodeId, int maximumRows, int startRowIndex)
        {
            return TaxRuleDataSource.LoadForTaxCode(taxCodeId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the TaxRule objects associated with the given TaxCodeId
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects associated with with the given TaxCodeId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForTaxCode(Int32 taxCodeId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Priority";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxRule.GetColumnNames("ac_TaxRules"));
            selectQuery.Append(" FROM ac_TaxRules, ac_TaxRuleTaxCodes");
            selectQuery.Append(" WHERE ac_TaxRules.TaxRuleId = ac_TaxRuleTaxCodes.TaxRuleId");
            selectQuery.Append(" AND ac_TaxRuleTaxCodes.TaxCodeId = @taxCodeId");
            selectQuery.Append(" AND StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, taxCodeId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            TaxRuleCollection results = new TaxRuleCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxRule taxRule = new TaxRule();
                        TaxRule.LoadDataReader(taxRule, dr);
                        results.Add(taxRule);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TaxRule objects for the given CountryCode in the database.
        /// <param name="countryCode">The given CountryCode</param>
        /// </summary>
        /// <returns>The Number of TaxRule objects for the given CountryCode in the database.</returns>
        public static int CountForCountry(String countryCode)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxRules WHERE CountryCode = @countryCode");
            database.AddInParameter(selectCommand, "@countryCode", System.Data.DbType.String, NullableData.DbNullify(countryCode));
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the given CountryCode from the database
        /// </summary>
        /// <param name="countryCode">The given CountryCode</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForCountry(String countryCode)
        {
            return LoadForCountry(countryCode, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the given CountryCode from the database
        /// </summary>
        /// <param name="countryCode">The given CountryCode</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForCountry(String countryCode, string sortExpression)
        {
            return LoadForCountry(countryCode, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the given CountryCode from the database
        /// </summary>
        /// <param name="countryCode">The given CountryCode</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForCountry(String countryCode, int maximumRows, int startRowIndex)
        {
            return LoadForCountry(countryCode, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the given CountryCode from the database
        /// </summary>
        /// <param name="countryCode">The given CountryCode</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForCountry(String countryCode, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Priority";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxRule.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TaxRules");
            selectQuery.Append(" WHERE CountryCode = @countryCode");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@countryCode", System.Data.DbType.String, NullableData.DbNullify(countryCode));
            //EXECUTE THE COMMAND
            TaxRuleCollection results = new TaxRuleCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxRule taxRule = new TaxRule();
                        TaxRule.LoadDataReader(taxRule, dr);
                        results.Add(taxRule);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TaxRule objects for the given ProvinceId in the database.
        /// <param name="provinceId">The given ProvinceId</param>
        /// </summary>
        /// <returns>The Number of TaxRule objects for the given ProvinceId in the database.</returns>
        public static int CountForProvince(Int32 provinceId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxRules WHERE ProvinceId = @provinceId");
            database.AddInParameter(selectCommand, "@provinceId", System.Data.DbType.Int32, NullableData.DbNullify(provinceId));
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the given ProvinceId from the database
        /// </summary>
        /// <param name="provinceId">The given ProvinceId</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForProvince(Int32 provinceId)
        {
            return LoadForProvince(provinceId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the given ProvinceId from the database
        /// </summary>
        /// <param name="provinceId">The given ProvinceId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForProvince(Int32 provinceId, string sortExpression)
        {
            return LoadForProvince(provinceId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the given ProvinceId from the database
        /// </summary>
        /// <param name="provinceId">The given ProvinceId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForProvince(Int32 provinceId, int maximumRows, int startRowIndex)
        {
            return LoadForProvince(provinceId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the given ProvinceId from the database
        /// </summary>
        /// <param name="provinceId">The given ProvinceId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForProvince(Int32 provinceId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Priority";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxRule.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TaxRules");
            selectQuery.Append(" WHERE ProvinceId = @provinceId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@provinceId", System.Data.DbType.Int32, NullableData.DbNullify(provinceId));
            //EXECUTE THE COMMAND
            TaxRuleCollection results = new TaxRuleCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxRule taxRule = new TaxRule();
                        TaxRule.LoadDataReader(taxRule, dr);
                        results.Add(taxRule);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TaxRule objects for the current store.
        /// </summary>
        /// <returns>The Number of TaxRule objects in the current store.</returns>
        public static int CountForStore()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxRules WHERE StoreId = @storeId");
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the current store from the database
        /// </summary>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForStore()
        {
            return LoadForStore(0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForStore(string sortExpression)
        {
            return LoadForStore(0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the current store from the database.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForStore(int maximumRows, int startRowIndex)
        {
            return LoadForStore(maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxRule objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxRule objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxRuleCollection LoadForStore(int maximumRows, int startRowIndex, string sortExpression)
        {
            int storeId = Token.Instance.StoreId;
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Priority";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxRule.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TaxRules");
            selectQuery.Append(" WHERE StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            //EXECUTE THE COMMAND
            TaxRuleCollection results = new TaxRuleCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxRule taxRule = new TaxRule();
                        TaxRule.LoadDataReader(taxRule, dr);
                        results.Add(taxRule);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given TaxRule object to the database.
        /// </summary>
        /// <param name="taxRule">The TaxRule object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(TaxRule taxRule) { return taxRule.Save(); }

    }
}
