//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.Utility;

namespace MakerShop.Taxes
{
    /// <summary>
    /// DataSource class for TaxCode objects
    /// </summary>
    public partial class TaxCodeDataSource
    {
        /// <summary>
        /// Deletes a TaxCode object from the database
        /// </summary>
        /// <param name="taxCode">The TaxCode object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(TaxCode taxCode)
        {
            return taxCode.Delete();
        }

        /// <summary>
        /// Deletes a TaxCode object with given id from the database
        /// </summary>
        /// <param name="taxCodeId">Value of TaxCodeId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 taxCodeId)
        {
            TaxCode taxCode = new TaxCode();
            if (taxCode.Load(taxCodeId)) return taxCode.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a TaxCode object to the database.
        /// </summary>
        /// <param name="taxCode">The TaxCode object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(TaxCode taxCode) { return taxCode.Save(); }

        /// <summary>
        /// Loads a TaxCode object for given Id from the database.
        /// </summary>
        /// <param name="taxCodeId">Value of TaxCodeId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded TaxCode object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCode Load(Int32 taxCodeId)
        {
            return TaxCodeDataSource.Load(taxCodeId, true);
        }

        /// <summary>
        /// Loads a TaxCode object for given Id from the database.
        /// </summary>
        /// <param name="taxCodeId">Value of TaxCodeId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded TaxCode object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCode Load(Int32 taxCodeId, bool useCache)
        {
            if (taxCodeId == 0) return null;
            TaxCode taxCode = null;
            string key = "TaxCode_" + taxCodeId.ToString();
            if (useCache)
            {
                taxCode = ContextCache.GetObject(key) as TaxCode;
                if (taxCode != null) return taxCode;
            }
            taxCode = new TaxCode();
            if (taxCode.Load(taxCodeId))
            {
                if (useCache) ContextCache.SetObject(key, taxCode);
                return taxCode;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of TaxCode objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the TaxCode objects that should be loaded.</param>
        /// <returns>The number of TaxCode objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxCodes" + whereClause);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of TaxCode objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of TaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxCode objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of TaxCode objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxCode objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Name";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxCode.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TaxCodes");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            TaxCodeCollection results = new TaxCodeCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxCode taxCode = new TaxCode();
                        TaxCode.LoadDataReader(taxCode, dr);
                        results.Add(taxCode);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TaxCode objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <returns>The number of TaxCode objects associated with with the given TaxRuleId</returns>
        public static int CountForTaxRule(Int32 taxRuleId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxRuleTaxCodes WHERE TaxRuleId = @taxRuleId");
            database.AddInParameter(selectCommand, "@taxRuleId", System.Data.DbType.Int32, taxRuleId);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the TaxCode objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <returns>A collection of TaxCode objects associated with with the given TaxRuleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForTaxRule(Int32 taxRuleId)
        {
            return TaxCodeDataSource.LoadForTaxRule(taxRuleId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the TaxCode objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxCode objects associated with with the given TaxRuleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForTaxRule(Int32 taxRuleId, string sortExpression)
        {
            return TaxCodeDataSource.LoadForTaxRule(taxRuleId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the TaxCode objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxCode objects associated with with the given TaxRuleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForTaxRule(Int32 taxRuleId, int maximumRows, int startRowIndex)
        {
            return TaxCodeDataSource.LoadForTaxRule(taxRuleId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the TaxCode objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxCode objects associated with with the given TaxRuleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForTaxRule(Int32 taxRuleId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Name";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxCode.GetColumnNames("ac_TaxCodes"));
            selectQuery.Append(" FROM ac_TaxCodes, ac_TaxRuleTaxCodes");
            selectQuery.Append(" WHERE ac_TaxCodes.TaxCodeId = ac_TaxRuleTaxCodes.TaxCodeId");
            selectQuery.Append(" AND ac_TaxRuleTaxCodes.TaxRuleId = @taxRuleId");
            selectQuery.Append(" AND StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxRuleId", System.Data.DbType.Int32, taxRuleId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            TaxCodeCollection results = new TaxCodeCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxCode taxCode = new TaxCode();
                        TaxCode.LoadDataReader(taxCode, dr);
                        results.Add(taxCode);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TaxCode objects for the current store.
        /// </summary>
        /// <returns>The Number of TaxCode objects in the current store.</returns>
        public static int CountForStore()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) AS TotalRecords FROM ac_TaxCodes WHERE StoreId = @storeId");
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            return MakerShop.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of TaxCode objects for the current store from the database
        /// </summary>
        /// <returns>A collection of TaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForStore()
        {
            return LoadForStore(0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxCode objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForStore(string sortExpression)
        {
            return LoadForStore(0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of TaxCode objects for the current store from the database.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForStore(int maximumRows, int startRowIndex)
        {
            return LoadForStore(maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TaxCode objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TaxCode objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TaxCodeCollection LoadForStore(int maximumRows, int startRowIndex, string sortExpression)
        {
            int storeId = Token.Instance.StoreId;
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "Name";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TaxCode.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TaxCodes");
            selectQuery.Append(" WHERE StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            //EXECUTE THE COMMAND
            TaxCodeCollection results = new TaxCodeCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TaxCode taxCode = new TaxCode();
                        TaxCode.LoadDataReader(taxCode, dr);
                        results.Add(taxCode);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given TaxCode object to the database.
        /// </summary>
        /// <param name="taxCode">The TaxCode object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(TaxCode taxCode) { return taxCode.Save(); }

    }
}
