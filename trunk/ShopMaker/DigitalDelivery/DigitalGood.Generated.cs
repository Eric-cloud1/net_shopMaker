//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
using MakerShop.DigitalDelivery;
using MakerShop.Orders;
using MakerShop.Stores;
using MakerShop.Utility;

namespace MakerShop.DigitalDelivery
{
    /// <summary>
    /// This class represents a DigitalGood object in the database.
    /// </summary>
    public partial class DigitalGood : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public DigitalGood() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="digitalGoodId">Value of DigitalGoodId.</param>
        /// </summary>
        public DigitalGood(Int32 digitalGoodId)
        {
            this.DigitalGoodId = digitalGoodId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "DigitalGoodId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "FileName");
          columnNames.Add(prefix + "FileSize");
          columnNames.Add(prefix + "MaxDownloads");
          columnNames.Add(prefix + "DownloadTimeout");
          columnNames.Add(prefix + "ActivationTimeout");
          columnNames.Add(prefix + "MediaKey");
          columnNames.Add(prefix + "ServerFileName");
          columnNames.Add(prefix + "EnableSerialKeys");
          columnNames.Add(prefix + "SerialKeyProviderId");
          columnNames.Add(prefix + "SerialKeyConfigData");
          columnNames.Add(prefix + "ActivationModeId");
          columnNames.Add(prefix + "ActivationEmailId");
          columnNames.Add(prefix + "FulfillmentModeId");
          columnNames.Add(prefix + "FulfillmentEmailId");
          columnNames.Add(prefix + "ReadmeId");
          columnNames.Add(prefix + "LicenseAgreementId");
          columnNames.Add(prefix + "LicenseAgreementModeId");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given DigitalGood object from the given database data reader.
        /// </summary>
        /// <param name="digitalGood">The DigitalGood object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(DigitalGood digitalGood, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            digitalGood.DigitalGoodId = dr.GetInt32(0);
            digitalGood.StoreId = dr.GetInt32(1);
            digitalGood.Name = dr.GetString(2);
            digitalGood.FileName = NullableData.GetString(dr, 3);
            digitalGood.FileSize = dr.GetInt32(4);
            digitalGood.MaxDownloads = NullableData.GetByte(dr, 5);
            digitalGood.DownloadTimeout = NullableData.GetString(dr, 6);
            digitalGood.ActivationTimeout = NullableData.GetString(dr, 7);
            digitalGood.MediaKey = NullableData.GetString(dr, 8);
            digitalGood.ServerFileName = NullableData.GetString(dr, 9);
            digitalGood.EnableSerialKeys = dr.GetBoolean(10);
            digitalGood.SerialKeyProviderId = NullableData.GetString(dr, 11);
            digitalGood.SerialKeyConfigData = NullableData.GetString(dr, 12);
            digitalGood.ActivationModeId = dr.GetByte(13);
            digitalGood.ActivationEmailId = NullableData.GetInt32(dr, 14);
            digitalGood.FulfillmentModeId = dr.GetByte(15);
            digitalGood.FulfillmentEmailId = NullableData.GetInt32(dr, 16);
            digitalGood.ReadmeId = NullableData.GetInt32(dr, 17);
            digitalGood.LicenseAgreementId = NullableData.GetInt32(dr, 18);
            digitalGood.LicenseAgreementModeId = dr.GetByte(19);
            digitalGood.IsDirty = false;
        }

#endregion

        private Int32 _DigitalGoodId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private String _FileName = string.Empty;
        private Int32 _FileSize;
        private Byte _MaxDownloads;
        private String _DownloadTimeout = string.Empty;
        private String _ActivationTimeout = string.Empty;
        private String _MediaKey = string.Empty;
        private String _ServerFileName = string.Empty;
        private Boolean _EnableSerialKeys;
        private String _SerialKeyProviderId = string.Empty;
        private String _SerialKeyConfigData = string.Empty;
        private Byte _ActivationModeId;
        private Int32 _ActivationEmailId;
        private Byte _FulfillmentModeId;
        private Int32 _FulfillmentEmailId;
        private Int32 _ReadmeId;
        private Int32 _LicenseAgreementId;
        private Byte _LicenseAgreementModeId;
        private bool _IsDirty;

        /// <summary>
        /// DigitalGoodId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 DigitalGoodId
        {
            get { return this._DigitalGoodId; }
            set
            {
                if (this._DigitalGoodId != value)
                {
                    this._DigitalGoodId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FileName
        /// </summary>
        public String FileName
        {
            get { return this._FileName; }
            set
            {
                if (this._FileName != value)
                {
                    this._FileName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FileSize
        /// </summary>
        public Int32 FileSize
        {
            get { return this._FileSize; }
            set
            {
                if (this._FileSize != value)
                {
                    this._FileSize = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MaxDownloads
        /// </summary>
        public Byte MaxDownloads
        {
            get { return this._MaxDownloads; }
            set
            {
                if (this._MaxDownloads != value)
                {
                    this._MaxDownloads = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// DownloadTimeout
        /// </summary>
        public String DownloadTimeout
        {
            get { return this._DownloadTimeout; }
            set
            {
                if (this._DownloadTimeout != value)
                {
                    this._DownloadTimeout = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ActivationTimeout
        /// </summary>
        public String ActivationTimeout
        {
            get { return this._ActivationTimeout; }
            set
            {
                if (this._ActivationTimeout != value)
                {
                    this._ActivationTimeout = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MediaKey
        /// </summary>
        public String MediaKey
        {
            get { return this._MediaKey; }
            set
            {
                if (this._MediaKey != value)
                {
                    this._MediaKey = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ServerFileName
        /// </summary>
        public String ServerFileName
        {
            get { return this._ServerFileName; }
            set
            {
                if (this._ServerFileName != value)
                {
                    this._ServerFileName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// EnableSerialKeys
        /// </summary>
        public Boolean EnableSerialKeys
        {
            get { return this._EnableSerialKeys; }
            set
            {
                if (this._EnableSerialKeys != value)
                {
                    this._EnableSerialKeys = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// SerialKeyProviderId
        /// </summary>
        public String SerialKeyProviderId
        {
            get { return this._SerialKeyProviderId; }
            set
            {
                if (this._SerialKeyProviderId != value)
                {
                    this._SerialKeyProviderId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// SerialKeyConfigData
        /// </summary>
        public String SerialKeyConfigData
        {
            get { return this._SerialKeyConfigData; }
            set
            {
                if (this._SerialKeyConfigData != value)
                {
                    this._SerialKeyConfigData = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ActivationModeId
        /// </summary>
        public Byte ActivationModeId
        {
            get { return this._ActivationModeId; }
            set
            {
                if (this._ActivationModeId != value)
                {
                    this._ActivationModeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ActivationEmailId
        /// </summary>
        public Int32 ActivationEmailId
        {
            get { return this._ActivationEmailId; }
            set
            {
                if (this._ActivationEmailId != value)
                {
                    this._ActivationEmailId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FulfillmentModeId
        /// </summary>
        public Byte FulfillmentModeId
        {
            get { return this._FulfillmentModeId; }
            set
            {
                if (this._FulfillmentModeId != value)
                {
                    this._FulfillmentModeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FulfillmentEmailId
        /// </summary>
        public Int32 FulfillmentEmailId
        {
            get { return this._FulfillmentEmailId; }
            set
            {
                if (this._FulfillmentEmailId != value)
                {
                    this._FulfillmentEmailId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ReadmeId
        /// </summary>
        public Int32 ReadmeId
        {
            get { return this._ReadmeId; }
            set
            {
                if (this._ReadmeId != value)
                {
                    this._ReadmeId = value;
                    this.IsDirty = true;
                    this._Readme = null;
                }
            }
        }

        /// <summary>
        /// LicenseAgreementId
        /// </summary>
        public Int32 LicenseAgreementId
        {
            get { return this._LicenseAgreementId; }
            set
            {
                if (this._LicenseAgreementId != value)
                {
                    this._LicenseAgreementId = value;
                    this.IsDirty = true;
                    this._LicenseAgreement = null;
                }
            }
        }

        /// <summary>
        /// LicenseAgreementModeId
        /// </summary>
        public Byte LicenseAgreementModeId
        {
            get { return this._LicenseAgreementModeId; }
            set
            {
                if (this._LicenseAgreementModeId != value)
                {
                    this._LicenseAgreementModeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this DigitalGood object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.OrderItemDigitalGoodsLoaded && this.OrderItemDigitalGoods.IsDirty) return true;
                if (this.ProductDigitalGoodsLoaded && this.ProductDigitalGoods.IsDirty) return true;
                if (this.SerialKeysLoaded && this.SerialKeys.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this DigitalGood are properly associated with this DigitalGood object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.OrderItemDigitalGoodsLoaded) { foreach (OrderItemDigitalGood orderItemDigitalGood in this.OrderItemDigitalGoods) { orderItemDigitalGood.DigitalGoodId = this.DigitalGoodId; } }
            if (this.ProductDigitalGoodsLoaded) { foreach (ProductDigitalGood productDigitalGood in this.ProductDigitalGoods) { productDigitalGood.DigitalGoodId = this.DigitalGoodId; } }
            if (this.SerialKeysLoaded) { foreach (SerialKey serialKey in this.SerialKeys) { serialKey.DigitalGoodId = this.DigitalGoodId; } }
        }

#region Parents
        private LicenseAgreement _LicenseAgreement;
        private Readme _Readme;
        private Store _Store;

        /// <summary>
        /// The LicenseAgreement object that this DigitalGood object is associated with
        /// </summary>
        public LicenseAgreement LicenseAgreement
        {
            get
            {
                if (!this.LicenseAgreementLoaded)
                {
                    this._LicenseAgreement = LicenseAgreementDataSource.Load(this.LicenseAgreementId);
                }
                return this._LicenseAgreement;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool LicenseAgreementLoaded { get { return ((this._LicenseAgreement != null) && (this._LicenseAgreement.LicenseAgreementId == this.LicenseAgreementId)); } }

        /// <summary>
        /// The Readme object that this DigitalGood object is associated with
        /// </summary>
        public Readme Readme
        {
            get
            {
                if (!this.ReadmeLoaded)
                {
                    this._Readme = ReadmeDataSource.Load(this.ReadmeId);
                }
                return this._Readme;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ReadmeLoaded { get { return ((this._Readme != null) && (this._Readme.ReadmeId == this.ReadmeId)); } }

        /// <summary>
        /// The Store object that this DigitalGood object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Children
        private OrderItemDigitalGoodCollection _OrderItemDigitalGoods;
        private ProductDigitalGoodCollection _ProductDigitalGoods;
        private SerialKeyCollection _SerialKeys;

        /// <summary>
        /// A collection of OrderItemDigitalGood objects associated with this DigitalGood object.
        /// </summary>
        public OrderItemDigitalGoodCollection OrderItemDigitalGoods
        {
            get
            {
                if (!this.OrderItemDigitalGoodsLoaded)
                {
                    this._OrderItemDigitalGoods = OrderItemDigitalGoodDataSource.LoadForDigitalGood(this.DigitalGoodId);
                }
                return this._OrderItemDigitalGoods;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderItemDigitalGoodsLoaded { get { return (this._OrderItemDigitalGoods != null); } }

        /// <summary>
        /// A collection of ProductDigitalGood objects associated with this DigitalGood object.
        /// </summary>
        public ProductDigitalGoodCollection ProductDigitalGoods
        {
            get
            {
                if (!this.ProductDigitalGoodsLoaded)
                {
                    this._ProductDigitalGoods = ProductDigitalGoodDataSource.LoadForDigitalGood(this.DigitalGoodId);
                }
                return this._ProductDigitalGoods;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductDigitalGoodsLoaded { get { return (this._ProductDigitalGoods != null); } }

        /// <summary>
        /// A collection of SerialKey objects associated with this DigitalGood object.
        /// </summary>
        public SerialKeyCollection SerialKeys
        {
            get
            {
                if (!this.SerialKeysLoaded)
                {
                    this._SerialKeys = SerialKeyDataSource.LoadForDigitalGood(this.DigitalGoodId);
                }
                return this._SerialKeys;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SerialKeysLoaded { get { return (this._SerialKeys != null); } }

#endregion

        /// <summary>
        /// Deletes this DigitalGood object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_DigitalGoods");
            deleteQuery.Append(" WHERE DigitalGoodId = @digitalGoodId");
            Database database = Token.Instance.Database;

            MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@DigitalGoodId", System.Data.DbType.Int32, this.DigitalGoodId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }

            MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();


            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this DigitalGood object from the database for the given primary key.
        /// </summary>
        /// <param name="digitalGoodId">Value of DigitalGoodId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 digitalGoodId)
        {
            bool result = false;
            this.DigitalGoodId = digitalGoodId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_DigitalGoods");
            selectQuery.Append(" WHERE DigitalGoodId = @digitalGoodId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@digitalGoodId", System.Data.DbType.Int32, digitalGoodId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this DigitalGood object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                MakerShop.Stores.AuditEventDataSource.AuditInfoBegin(null); 
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.DigitalGoodId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT COUNT(1) As RecordCount FROM ac_DigitalGoods");
                    selectQuery.Append(" WHERE DigitalGoodId = @digitalGoodId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@DigitalGoodId", System.Data.DbType.Int32, this.DigitalGoodId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_DigitalGoods SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", FileName = @FileName");
                    updateQuery.Append(", FileSize = @FileSize");
                    updateQuery.Append(", MaxDownloads = @MaxDownloads");
                    updateQuery.Append(", DownloadTimeout = @DownloadTimeout");
                    updateQuery.Append(", ActivationTimeout = @ActivationTimeout");
                    updateQuery.Append(", MediaKey = @MediaKey");
                    updateQuery.Append(", ServerFileName = @ServerFileName");
                    updateQuery.Append(", EnableSerialKeys = @EnableSerialKeys");
                    updateQuery.Append(", SerialKeyProviderId = @SerialKeyProviderId");
                    updateQuery.Append(", SerialKeyConfigData = @SerialKeyConfigData");
                    updateQuery.Append(", ActivationModeId = @ActivationModeId");
                    updateQuery.Append(", ActivationEmailId = @ActivationEmailId");
                    updateQuery.Append(", FulfillmentModeId = @FulfillmentModeId");
                    updateQuery.Append(", FulfillmentEmailId = @FulfillmentEmailId");
                    updateQuery.Append(", ReadmeId = @ReadmeId");
                    updateQuery.Append(", LicenseAgreementId = @LicenseAgreementId");
                    updateQuery.Append(", LicenseAgreementModeId = @LicenseAgreementModeId");
                    updateQuery.Append(" WHERE DigitalGoodId = @DigitalGoodId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@DigitalGoodId", System.Data.DbType.Int32, this.DigitalGoodId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@FileName", System.Data.DbType.String, NullableData.DbNullify(this.FileName));
                        database.AddInParameter(updateCommand, "@FileSize", System.Data.DbType.Int32, this.FileSize);
                        database.AddInParameter(updateCommand, "@MaxDownloads", System.Data.DbType.Byte, NullableData.DbNullify(this.MaxDownloads));
                        database.AddInParameter(updateCommand, "@DownloadTimeout", System.Data.DbType.String, NullableData.DbNullify(this.DownloadTimeout));
                        database.AddInParameter(updateCommand, "@ActivationTimeout", System.Data.DbType.String, NullableData.DbNullify(this.ActivationTimeout));
                        database.AddInParameter(updateCommand, "@MediaKey", System.Data.DbType.String, NullableData.DbNullify(this.MediaKey));
                        database.AddInParameter(updateCommand, "@ServerFileName", System.Data.DbType.String, NullableData.DbNullify(this.ServerFileName));
                        database.AddInParameter(updateCommand, "@EnableSerialKeys", System.Data.DbType.Boolean, this.EnableSerialKeys);
                        database.AddInParameter(updateCommand, "@SerialKeyProviderId", System.Data.DbType.String, NullableData.DbNullify(this.SerialKeyProviderId));
                        database.AddInParameter(updateCommand, "@SerialKeyConfigData", System.Data.DbType.String, NullableData.DbNullify(this.SerialKeyConfigData));
                        database.AddInParameter(updateCommand, "@ActivationModeId", System.Data.DbType.Byte, this.ActivationModeId);
                        database.AddInParameter(updateCommand, "@ActivationEmailId", System.Data.DbType.Int32, NullableData.DbNullify(this.ActivationEmailId));
                        database.AddInParameter(updateCommand, "@FulfillmentModeId", System.Data.DbType.Byte, this.FulfillmentModeId);
                        database.AddInParameter(updateCommand, "@FulfillmentEmailId", System.Data.DbType.Int32, NullableData.DbNullify(this.FulfillmentEmailId));
                        database.AddInParameter(updateCommand, "@ReadmeId", System.Data.DbType.Int32, NullableData.DbNullify(this.ReadmeId));
                        database.AddInParameter(updateCommand, "@LicenseAgreementId", System.Data.DbType.Int32, NullableData.DbNullify(this.LicenseAgreementId));
                        database.AddInParameter(updateCommand, "@LicenseAgreementModeId", System.Data.DbType.Byte, this.LicenseAgreementModeId);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_DigitalGoods (StoreId, Name, FileName, FileSize, MaxDownloads, DownloadTimeout, ActivationTimeout, MediaKey, ServerFileName, EnableSerialKeys, SerialKeyProviderId, SerialKeyConfigData, ActivationModeId, ActivationEmailId, FulfillmentModeId, FulfillmentEmailId, ReadmeId, LicenseAgreementId, LicenseAgreementModeId)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @FileName, @FileSize, @MaxDownloads, @DownloadTimeout, @ActivationTimeout, @MediaKey, @ServerFileName, @EnableSerialKeys, @SerialKeyProviderId, @SerialKeyConfigData, @ActivationModeId, @ActivationEmailId, @FulfillmentModeId, @FulfillmentEmailId, @ReadmeId, @LicenseAgreementId, @LicenseAgreementModeId)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@DigitalGoodId", System.Data.DbType.Int32, this.DigitalGoodId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@FileName", System.Data.DbType.String, NullableData.DbNullify(this.FileName));
                        database.AddInParameter(insertCommand, "@FileSize", System.Data.DbType.Int32, this.FileSize);
                        database.AddInParameter(insertCommand, "@MaxDownloads", System.Data.DbType.Byte, NullableData.DbNullify(this.MaxDownloads));
                        database.AddInParameter(insertCommand, "@DownloadTimeout", System.Data.DbType.String, NullableData.DbNullify(this.DownloadTimeout));
                        database.AddInParameter(insertCommand, "@ActivationTimeout", System.Data.DbType.String, NullableData.DbNullify(this.ActivationTimeout));
                        database.AddInParameter(insertCommand, "@MediaKey", System.Data.DbType.String, NullableData.DbNullify(this.MediaKey));
                        database.AddInParameter(insertCommand, "@ServerFileName", System.Data.DbType.String, NullableData.DbNullify(this.ServerFileName));
                        database.AddInParameter(insertCommand, "@EnableSerialKeys", System.Data.DbType.Boolean, this.EnableSerialKeys);
                        database.AddInParameter(insertCommand, "@SerialKeyProviderId", System.Data.DbType.String, NullableData.DbNullify(this.SerialKeyProviderId));
                        database.AddInParameter(insertCommand, "@SerialKeyConfigData", System.Data.DbType.String, NullableData.DbNullify(this.SerialKeyConfigData));
                        database.AddInParameter(insertCommand, "@ActivationModeId", System.Data.DbType.Byte, this.ActivationModeId);
                        database.AddInParameter(insertCommand, "@ActivationEmailId", System.Data.DbType.Int32, NullableData.DbNullify(this.ActivationEmailId));
                        database.AddInParameter(insertCommand, "@FulfillmentModeId", System.Data.DbType.Byte, this.FulfillmentModeId);
                        database.AddInParameter(insertCommand, "@FulfillmentEmailId", System.Data.DbType.Int32, NullableData.DbNullify(this.FulfillmentEmailId));
                        database.AddInParameter(insertCommand, "@ReadmeId", System.Data.DbType.Int32, NullableData.DbNullify(this.ReadmeId));
                        database.AddInParameter(insertCommand, "@LicenseAgreementId", System.Data.DbType.Int32, NullableData.DbNullify(this.LicenseAgreementId));
                        database.AddInParameter(insertCommand, "@LicenseAgreementModeId", System.Data.DbType.Byte, this.LicenseAgreementModeId);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._DigitalGoodId = result;
                    }
                }
                this.SaveChildren();
                MakerShop.Stores.AuditEventDataSource.AuditInfoEnd();
                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this DigitalGood object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.OrderItemDigitalGoodsLoaded) this.OrderItemDigitalGoods.Save();
            if (this.ProductDigitalGoodsLoaded) this.ProductDigitalGoods.Save();
            if (this.SerialKeysLoaded) this.SerialKeys.Save();
        }

     }
}
