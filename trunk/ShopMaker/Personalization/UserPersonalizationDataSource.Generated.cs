//Generated by DataSourceBaseGenerator_AssnWithColumns

using System;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
namespace MakerShop.Personalization
{

    /// <summary>
    /// DataSource class for UserPersonalization objects
    /// </summary>
    public partial class UserPersonalizationDataSource
    {
        /// <summary>
        /// Deletes a UserPersonalization object from the database
        /// </summary>
        /// <param name="userPersonalization">The UserPersonalization object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(UserPersonalization userPersonalization)
        {
            return userPersonalization.Delete();
        }

        /// <summary>
        /// Deletes a UserPersonalization object with given id from the database
        /// </summary>
        /// <param name="personalizationPathId">Value of PersonalizationPathId of the object to delete.</param>
        /// <param name="userId">Value of UserId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 personalizationPathId, Int32 userId)
        {
            UserPersonalization userPersonalization = new UserPersonalization();
            if (userPersonalization.Load(personalizationPathId, userId)) return userPersonalization.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a UserPersonalization object to the database.
        /// </summary>
        /// <param name="userPersonalization">The UserPersonalization object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(UserPersonalization userPersonalization) { return userPersonalization.Save(); }

        /// <summary>
        /// Load a UserPersonalization object for the given primary key from the database.
        /// </summary>
        /// <param name="personalizationPathId">Value of PersonalizationPathId of the object to load.</param>
        /// <param name="userId">Value of UserId of the object to load.</param>
        /// <returns>The loaded UserPersonalization object.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static UserPersonalization Load(Int32 personalizationPathId, Int32 userId)
        {
            UserPersonalization userPersonalization = null;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + UserPersonalization.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_UserPersonalization");
            selectQuery.Append(" WHERE PersonalizationPathId = @personalizationPathId AND UserId = @userId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@personalizationPathId", System.Data.DbType.Int32, personalizationPathId);
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, userId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    userPersonalization = new UserPersonalization();
                    UserPersonalization.LoadDataReader(userPersonalization, dr);
                }
                dr.Close();
            }
            return userPersonalization;
        }

        /// <summary>
        /// Loads a collection of UserPersonalization objects for the given criteria for PersonalizationPath from the database.
        /// </summary>
        /// <param name="personalizationPathId">Value of PersonalizationPathId of the object to load.</param>
        /// <returns>A collection of UserPersonalization objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static UserPersonalizationCollection LoadForPersonalizationPath(Int32 personalizationPathId)
        {
            UserPersonalizationCollection UserPersonalizations = new UserPersonalizationCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT!
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + UserPersonalization.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_UserPersonalization");
            selectQuery.Append(" WHERE PersonalizationPathId = @PersonalizationPathId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@personalizationPathId", System.Data.DbType.Int32, personalizationPathId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    UserPersonalization userPersonalization = new UserPersonalization();
                    UserPersonalization.LoadDataReader(userPersonalization, dr);
                    UserPersonalizations.Add(userPersonalization);
                }
                dr.Close();
            }
            return UserPersonalizations;
        }

        /// <summary>
        /// Loads a collection of UserPersonalization objects for the given criteria for User from the database.
        /// </summary>
        /// <param name="userId">Value of UserId of the object to load.</param>
        /// <returns>A collection of UserPersonalization objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static UserPersonalizationCollection LoadForUser(Int32 userId)
        {
            UserPersonalizationCollection UserPersonalizations = new UserPersonalizationCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT!
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT " + UserPersonalization.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_UserPersonalization");
            selectQuery.Append(" WHERE UserId = @UserId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, userId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    UserPersonalization userPersonalization = new UserPersonalization();
                    UserPersonalization.LoadDataReader(userPersonalization, dr);
                    UserPersonalizations.Add(userPersonalization);
                }
                dr.Close();
            }
            return UserPersonalizations;
        }

        /// <summary>
        /// Updates/Saves the given UserPersonalization object to the database.
        /// </summary>
        /// <param name="userPersonalization">The UserPersonalization object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(UserPersonalization userPersonalization) { return userPersonalization.Save(); }

    }
}
