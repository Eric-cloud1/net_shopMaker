//Generated by DataSourceBaseGenerator_Assn

using System;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using MakerShop.Common;
using MakerShop.Data;
namespace MakerShop.Shipping
{

    /// <summary>
    /// DataSource class for ShipMethodShipZone objects
    /// </summary>
    public partial class ShipMethodShipZoneDataSource
    {
        /// <summary>
        /// Deletes a ShipMethodShipZone object from the database
        /// </summary>
        /// <param name="shipMethodShipZone">The ShipMethodShipZone object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(ShipMethodShipZone shipMethodShipZone)
        {
            return shipMethodShipZone.Delete();
        }

        /// <summary>
        /// Deletes a ShipMethodShipZone object with given id from the database
        /// </summary>
        /// <param name="shipMethodId">Value of ShipMethodId of the object to delete.</param>
        /// <param name="shipZoneId">Value of ShipZoneId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 shipMethodId, Int32 shipZoneId)
        {
            ShipMethodShipZone shipMethodShipZone = new ShipMethodShipZone();
            if (shipMethodShipZone.Load(shipMethodId, shipZoneId)) return shipMethodShipZone.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a ShipMethodShipZone object to the database.
        /// </summary>
        /// <param name="shipMethodShipZone">The ShipMethodShipZone object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(ShipMethodShipZone shipMethodShipZone) { return shipMethodShipZone.Save(); }

        /// <summary>
        /// Load a ShipMethodShipZone object for the given primary key from the database.
        /// </summary>
        /// <param name="shipMethodId">Value of ShipMethodId of the object to load.</param>
        /// <param name="shipZoneId">Value of ShipZoneId of the object to load.</param>
        /// <returns>The loaded ShipMethodShipZone object.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodShipZone Load(Int32 shipMethodId, Int32 shipZoneId)
        {
            ShipMethodShipZone shipMethodShipZone = new ShipMethodShipZone();
            shipMethodShipZone.ShipMethodId = shipMethodId;
            shipMethodShipZone.ShipZoneId = shipZoneId;
            shipMethodShipZone.IsDirty = false;
            return shipMethodShipZone;
        }

        /// <summary>
        /// Loads a collection of ShipMethodShipZone objects for the given criteria for ShipMethod from the database.
        /// </summary>
        /// <param name="shipMethodId">Value of ShipMethodId of the object to load.</param>
        /// <returns>A collection of ShipMethodShipZone objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodShipZoneCollection LoadForShipMethod(Int32 shipMethodId)
        {
            ShipMethodShipZoneCollection ShipMethodShipZones = new ShipMethodShipZoneCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT ShipZoneId");
            selectQuery.Append(" FROM ac_ShipMethodShipZones");
            selectQuery.Append(" WHERE ShipMethodId = @shipMethodId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipMethodId", System.Data.DbType.Int32, shipMethodId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    ShipMethodShipZone shipMethodShipZone = new ShipMethodShipZone();
                    shipMethodShipZone.ShipMethodId = shipMethodId;
                    shipMethodShipZone.ShipZoneId = dr.GetInt32(0);
                    ShipMethodShipZones.Add(shipMethodShipZone);
                }
                dr.Close();
            }
            return ShipMethodShipZones;
        }

        /// <summary>
        /// Loads a collection of ShipMethodShipZone objects for the given criteria for ShipZone from the database.
        /// </summary>
        /// <param name="shipZoneId">Value of ShipZoneId of the object to load.</param>
        /// <returns>A collection of ShipMethodShipZone objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodShipZoneCollection LoadForShipZone(Int32 shipZoneId)
        {
            ShipMethodShipZoneCollection ShipMethodShipZones = new ShipMethodShipZoneCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT ShipMethodId");
            selectQuery.Append(" FROM ac_ShipMethodShipZones");
            selectQuery.Append(" WHERE ShipZoneId = @shipZoneId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipZoneId", System.Data.DbType.Int32, shipZoneId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    ShipMethodShipZone shipMethodShipZone = new ShipMethodShipZone();
                    shipMethodShipZone.ShipZoneId = shipZoneId;
                    shipMethodShipZone.ShipMethodId = dr.GetInt32(0);
                    ShipMethodShipZones.Add(shipMethodShipZone);
                }
                dr.Close();
            }
            return ShipMethodShipZones;
        }

        /// <summary>
        /// Updates/Saves the given ShipMethodShipZone object to the database.
        /// </summary>
        /// <param name="shipMethodShipZone">The ShipMethodShipZone object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(ShipMethodShipZone shipMethodShipZone) { return shipMethodShipZone.Save(); }

    }
}
