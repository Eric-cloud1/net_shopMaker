/*    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD). */

SET QUOTED_IDENTIFIER ON

go

/* Create new table "ac_ProductProductTemplates".                                             */
/* "ac_ProductProductTemplates" : Table of ac_ProductProductTemplates                         */
/* 	"ProductId" : ProductId identifies ac_ProductProductTemplates                             */
/* 	"ProductTemplateId" : ProductTemplateId partly identifies ac_ProductProductTemplates      */  
create table "ac_ProductProductTemplates" ( 
	"ProductId" int not null,
	"ProductTemplateId" int not null)  

go

alter table "ac_ProductProductTemplates"
	add constraint "ac_ProductProductTemplates_PK" primary key ("ProductId", "ProductTemplateId")   


go

/* Create new table "ac_Kits".                                                                */
/* "ac_Kits" : Table of ac_Kits                                                               */
/* 	"ProductId" : ProductId identifies ac_Kits                                                */
/* 	"ItemizeDisplay" : ItemizeDisplay is of ac_Kits                                           */  
create table "ac_Kits" ( 
	"ProductId" int not null,
	"ItemizeDisplay" bit not null)  

go

alter table "ac_Kits"
	add constraint "ac_Kits_PK" primary key ("ProductId")   


go

/* Create new table "ac_TaxRuleGroups".                                                       */
/* "ac_TaxRuleGroups" : Table of ac_TaxRuleGroups                                             */
/* 	"TaxRuleId" : TaxRuleId partly identifies ac_TaxRuleGroups                                */
/* 	"GroupId" : GroupId partly identifies ac_TaxRuleGroups                                    */  
create table "ac_TaxRuleGroups" ( 
	"TaxRuleId" int not null,
	"GroupId" int not null)  

go

alter table "ac_TaxRuleGroups"
	add constraint "ac_TaxRuleGroups_PK" primary key ("GroupId", "TaxRuleId")   


go

/* Create new table "ac_TaxRuleShipZones".                                                    */
/* "ac_TaxRuleShipZones" : Table of ac_TaxRuleShipZones                                       */
/* 	"TaxRuleId" : TaxRuleId identifies ac_TaxRuleShipZones                                    */
/* 	"ShipZoneId" : ShipZoneId partly identifies ac_TaxRuleShipZones                           */  
create table "ac_TaxRuleShipZones" ( 
	"TaxRuleId" int not null,
	"ShipZoneId" int not null)  

go

alter table "ac_TaxRuleShipZones"
	add constraint "ac_TaxRuleShipZones_PK" primary key ("TaxRuleId", "ShipZoneId")   


go

/* Create new table "ac_ProductCustomFields".                                                 */
/* "ac_ProductCustomFields" : Table of ac_ProductCustomFields                                 */
/* 	"ProductFieldId" : ProductFieldId identifies ac_ProductCustomFields                       */
/* 	"ProductId" : ProductId is of ac_ProductCustomFields                                      */
/* 	"IsUserDefined" : Indicates whether the field is defined by the user or by the system     */
/* 	"IsVisible" : Indicates whether the field should be made visible to customers             */
/* 	"FieldName" : Name of hte field                                                           */
/* 	"FieldValue" : Value of the field                                                         */  
create table "ac_ProductCustomFields" ( 
	"ProductFieldId" int identity not null,
	"ProductId" int not null,
	"IsUserDefined" bit not null,
	"IsVisible" bit not null,
	"FieldName" nvarchar(100) not null,
	"FieldValue" nvarchar(4000) null)  

go

alter table "ac_ProductCustomFields"
	add constraint "ac_ProductCustomFields_PK" primary key ("ProductFieldId")   


go

/* Create new table "ac_ProductOptions".                                                      */
/* "ac_ProductOptions" : Table of ac_ProductOptions                                           */
/* 	"ProductId" : ID of the product                                                           */
/* 	"OptionId" : ID of the associated option                                                  */
/* 	"OrderBy" : OrderBy is of ac_ProductOptions                                               */  
create table "ac_ProductOptions" ( 
	"ProductId" int not null,
	"OptionId" int not null,
	"OrderBy" smallint not null)  

go

alter table "ac_ProductOptions"
	add constraint "ac_ProductOptions_PK" primary key ("ProductId", "OptionId")   


go

/* Create new table "ac_ProductDigitalGoods".                                                 */
/* "ac_ProductDigitalGoods" : Table of ac_ProductDigitalGoods                                 */
/* 	"ProductDigitalGoodId" : Unique ID of product digital good association                    */
/* 	"ProductId" : ID of product                                                               */
/* 	"OptionList" : Comma delimited list of option choice ids.                                 */
/* 	"DigitalGoodId" : ID of associated digital good                                           */  
create table "ac_ProductDigitalGoods" ( 
	"ProductDigitalGoodId" int identity not null,
	"ProductId" int not null,
	"OptionList" varchar(255) null,
	"DigitalGoodId" int not null)  

go

alter table "ac_ProductDigitalGoods"
	add constraint "ac_ProductDigitalGoods_PK" primary key ("ProductDigitalGoodId")   


go

/* Create new table "ac_UpsellProducts".                                                      */
/* "ac_UpsellProducts" : Table of ac_UpsellProducts                                           */
/* 	"ProductId" : ID of parent product                                                        */
/* 	"ChildProductId" : ID of upsold child product                                             */
/* 	"OrderBy" : Order of the item                                                             */  
create table "ac_UpsellProducts" ( 
	"ProductId" int not null,
	"ChildProductId" int not null,
	"OrderBy" smallint not null)  

go

alter table "ac_UpsellProducts"
	add constraint "ac_UpsellProducts_PK" primary key ("ProductId", "ChildProductId")   


go

/* Create new table "ac_GroupRoles".                                                          */
/* "ac_GroupRoles" : Table of ac_GroupRoles                                                   */
/* 	"GroupId" : ID of the group                                                               */
/* 	"RoleId" : ID of the role assigned to the group                                           */  
create table "ac_GroupRoles" ( 
	"GroupId" int not null,
	"RoleId" int not null)  

go

alter table "ac_GroupRoles"
	add constraint "ac_GroupRoles_PK" primary key ("GroupId", "RoleId")   


go

/* Create new table "ac_Roles".                                                               */
/* "ac_Roles" : Table of ac_Roles                                                             */
/* 	"RoleId" : Unique ID of the role                                                          */
/* 	"Name" : Name of the role                                                                 */
/* 	"LoweredName" : Lowercased name of the role                                               */  
create table "ac_Roles" ( 
	"RoleId" int identity not null,
	"Name" nvarchar(100) not null,
	"LoweredName" nvarchar(100) not null)  

go

alter table "ac_Roles"
	add constraint "ac_Roles_PK" primary key ("RoleId")   


go

/* Create new table "ac_RelatedProducts".                                                     */
/* "ac_RelatedProducts" : Table of ac_RelatedProducts                                         */
/* 	"ProductId" : Id of product                                                               */
/* 	"OrderBy" : Default sort order of the relationship                                        */
/* 	"ChildProductId" : Id of child product                                                    */  
create table "ac_RelatedProducts" ( 
	"ProductId" int not null,
	"OrderBy" smallint not null,
	"ChildProductId" int not null)  

go

alter table "ac_RelatedProducts"
	add constraint "ac_RelatedProducts_PK" primary key ("ProductId", "ChildProductId")   


go

/* Create new table "ac_IPLocations".                                                         */
/* "ac_IPLocations" : Stores data from IP2Location database (either DB1 or DB3) for use in IP lookups. */
/* 	"IPRangeStart" : Start number of IP block in range.                                       */
/* 	"IPRangeEnd" : End number of IP block in range.                                           */
/* 	"CountryCode" : Two letter ISO-3166 country code that matches IP range.                   */
/* 	"Region" : Name of state, province, or region that matches IP range.                      */
/* 	"City" : Name of city that matches IP range.                                              */  
create table "ac_IPLocations" ( 
	"IPRangeStart" bigint not null,
	"IPRangeEnd" bigint not null,
	"CountryCode" char(2) not null,
	"Region" varchar(128) null,
	"City" varchar(128) null)  

go

alter table "ac_IPLocations"
	add constraint "ac_IPLocations_PK" primary key ("IPRangeStart", "IPRangeEnd")   


go

/* Create new table "ac_ErrorMessages".                                                       */
/* "ac_ErrorMessages" : Table of ac_ErrorMessages                                             */
/* 	"ErrorMessageId" : Unique ID of entry in the error message log.                           */
/* 	"EntryDate" : Date and time of error message entry.                                       */
/* 	"StoreId" : Id of the store the error message applies to.                                 */
/* 	"MessageSeverityId" : MessageSeverityId is of ac_ErrorMessages                            */
/* 	"Text" : Error message to display.                                                        */
/* 	"DebugData" : Optional data that may be used to help troubleshoot the problem.            */  
create table "ac_ErrorMessages" ( 
	"ErrorMessageId" int identity not null,
	"EntryDate" datetime not null,
	"StoreId" int not null,
	"MessageSeverityId" tinyint not null,
	"Text" nvarchar(255) not null,
	"DebugData" nText null)  

go

alter table "ac_ErrorMessages"
	add constraint "ac_ErrorMessages_PK" primary key ("ErrorMessageId")   


go

/* Create new table "ac_Subscriptions".                                                       */
/* "ac_Subscriptions" : Table of ac_Subscriptions                                             */
/* 	"SubscriptionId" : Unique ID of the subscription                                          */
/* 	"ProductId" : ID of the product that the subscription was purchased from.                 */
/* 	"UserId" : User who purchased the subscription.                                           */
/* 	"OrderItemId" : ID of the order item for the subscription purchase.                       */
/* 	"TransactionId" : ID of the associated transaction created for a recurring billing transaction. */
/* 	"IsActive" : Indicates whether the subscription has been activated.                       */
/* 	"ExpirationDate" : The expiration for the subscription.                                   */
/* 	"GroupId" : The group membership that is granted by this subscription                     */  
create table "ac_Subscriptions" ( 
	"SubscriptionId" int identity not null,
	"ProductId" int not null,
	"UserId" int not null,
	"OrderItemId" int null,
	"TransactionId" int null,
	"IsActive" bit not null,
	"ExpirationDate" datetime null,
	"GroupId" int null) ON 'PRIMARY'  

go

alter table "ac_Subscriptions"
	add constraint "ac_Subscriptions_PK" primary key clustered ("SubscriptionId")   


go

/* Create new table "ac_SubscriptionPlans".                                                   */
/* "ac_SubscriptionPlans" : Table of ac_SubscriptionPlans                                     */
/* 	"ProductId" : The product associated with this subscription plan.                         */
/* 	"Name" : Name of the subscription plan.                                                   */
/* 	"NumberOfPayments" : The total number of payment occurrences associated with the subscription plan. This should the initial payment. */
/* 	"PaymentFrequency" : Length of time between recurring payments.                           */
/* 	"PaymentFrequencyUnitId" : Unit of time associated with the payment interval.             */
/* 	"RecurringCharge" : The amount to charge for the recurring transaction, if different from the initial charge (product price). */
/* 	"RecurringChargeSpecified" : Indicates whether a separate recurring charge was specified. */
/* 	"GroupId" : The group to assign to a user who purchases this subscription.                */
/* 	"TaxCodeId" : TaxCodeId is of ac_SubscriptionPlans                                        */  
create table "ac_SubscriptionPlans" ( 
	"ProductId" int not null,
	"Name" nvarchar(100) not null,
	"NumberOfPayments" smallint not null,
	"PaymentFrequency" smallint not null,
	"PaymentFrequencyUnitId" tinyint not null,
	"RecurringCharge" decimal(9,2) not null,
	"RecurringChargeSpecified" bit not null,
	"GroupId" int null,
	"TaxCodeId" int null)  

go

alter table "ac_SubscriptionPlans"
	add constraint "ac_SubscriptionPlans_PK" primary key ("ProductId")   


go

/* Create new table "ac_WrapStyles".                                                          */
/* "ac_WrapStyles" : Table of ac_WrapStyles                                                   */  
create table "ac_WrapStyles" ( 
	"WrapStyleId" int identity not null,
	"WrapGroupId" int not null,
	"Name" nvarchar(50) not null,
	"TaxCodeId" int null,
	"Price" decimal(12,4) not null,
	"ThumbnailUrl" varchar(255) null,
	"ImageUrl" varchar(255) null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_WrapStyles"
	add constraint "ac_WrapStyles_PK" primary key clustered ("WrapStyleId")   


go

/* Create new table "ac_WrapGroups".                                                          */
/* "ac_WrapGroups" : Table of ac_WrapGroups                                                   */  
create table "ac_WrapGroups" ( 
	"WrapGroupId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(50) not null) ON 'PRIMARY'  

go

alter table "ac_WrapGroups"
	add constraint "ac_WrapGroups_PK" primary key clustered ("WrapGroupId")   


go

/* Create new table "ac_Wishlists".                                                           */
/* "ac_Wishlists" : Table of ac_Wishlists                                                     */  
create table "ac_Wishlists" ( 
	"WishlistId" int identity not null,
	"UserId" int not null,
	"Name" nvarchar(50) null,
	"ViewPassword" nvarchar(50) null) ON 'PRIMARY'  

go

alter table "ac_Wishlists"
	add constraint "ac_Wishlists_PK" primary key clustered ("WishlistId")   


go

/* Create new table "ac_WishlistItems".                                                       */
/* "ac_WishlistItems" : Table of ac_WishlistItems                                             */
/* 	"OptionList" : Comma delimited list of option choice ids.                                 */
/* 	"KitList" : Comma delimited list of kit products that are associated with this item.      */
/* 	"Price" : If the wishlist item has a variable price, this is the price desired by the customer. */  
create table "ac_WishlistItems" ( 
	"WishlistItemId" int identity not null,
	"WishlistId" int not null,
	"ProductId" int not null,
	"OptionList" varchar(255) null,
	"KitList" varchar(255) null,
	"Price" decimal(12,4) null,
	"LineMessage" nvarchar(255) null,
	"CreatedDate" datetime not null,
	"LastModifiedDate" datetime not null,
	"Desired" smallint not null,
	"Received" smallint not null,
	"Priority" tinyint not null,
	"Comment" nvarchar(255) null) ON 'PRIMARY'  

go

alter table "ac_WishlistItems"
	add constraint "ac_WishlistItems_PK" primary key clustered ("WishlistItemId")   


go

/* Create new table "ac_WishlistItemInputs".                                                  */
/* "ac_WishlistItemInputs" : Table of ac_WishlistItemInputs                                   */  
create table "ac_WishlistItemInputs" ( 
	"WishlistItemInputId" int identity not null,
	"WishlistItemId" int not null,
	"InputFieldId" int not null,
	"InputValue" nvarchar(4000) not null) ON 'PRIMARY'  

go

alter table "ac_WishlistItemInputs"
	add constraint "ac_WishlistItemInputs_PK" primary key clustered ("WishlistItemInputId")   


go

/* Create new table "ac_Webpages".                                                            */
/* "ac_Webpages" : Table of ac_Webpages                                                       */
/* 	"WebpageId" : Unique ID of the webpage.                                                   */
/* 	"StoreId" : ID of the store that contains the webpage.                                    */
/* 	"Name" : Name of the webpage.                                                             */
/* 	"Summary" : Brief description for the item.                                               */
/* 	"Description" : Detailed description for the item.                                        */
/* 	"ThumbnailUrl" : URL of the thumbnail image to use for this item.                         */
/* 	"ThumbnailAltText" : Alternate text to use with the thumbnail image, or blank if the name should be used. */
/* 	"DisplayPage" : Display page used to show the webpage, if different from the store default. */
/* 	"Theme" : Theme used to display this item, if different from the default.                 */
/* 	"HtmlHead" : Content to add to the HEAD portion of the HTML display page                  */
/* 	"VisibilityId" : Indicates the visibility of this item.                                   */  
create table "ac_Webpages" ( 
	"WebpageId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) null,
	"Summary" nvarchar(1024) null,
	"Description" ntext null,
	"ThumbnailUrl" varchar(255) null,
	"ThumbnailAltText" nvarchar(255) null,
	"DisplayPage" varchar(100) null,
	"Theme" varchar(100) null,
	"HtmlHead" ntext null,
	"VisibilityId" tinyint not null) ON 'PRIMARY'  

go

alter table "ac_Webpages"
	add constraint "ac_Webpages_PK" primary key clustered ("WebpageId")   


go

/* Create new table "ac_Warehouses".                                                          */
/* "ac_Warehouses" : Table of ac_Warehouses                                                   */  
create table "ac_Warehouses" ( 
	"WarehouseId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(50) not null,
	"Address1" nvarchar(255) null,
	"Address2" nvarchar(255) null,
	"City" nvarchar(50) null,
	"Province" nvarchar(50) null,
	"PostalCode" nvarchar(15) null,
	"CountryCode" char(2) null,
	"Phone" nvarchar(50) null,
	"Fax" nvarchar(50) null,
	"Email" nvarchar(255) null) ON 'PRIMARY'  

go

alter table "ac_Warehouses"
	add constraint "ac_Warehouses_PK" primary key clustered ("WarehouseId")   


go

/* Create new table "ac_VolumeDiscounts".                                                     */
/* "ac_VolumeDiscounts" : Table of ac_VolumeDiscounts                                         */
/* 	"VolumeDiscountId" : Unique ID of the volume discount                                     */
/* 	"StoreId" : ID of the store that contains the discount                                    */
/* 	"Name" : Name of the discount                                                             */
/* 	"IsValueBased" : If true the discount is based on item value; if false the discount is based on item quantity */
/* 	"IsGlobal" : Indicates whether the discount is global (applies to all categories)         */  
create table "ac_VolumeDiscounts" ( 
	"VolumeDiscountId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"IsValueBased" bit not null,
	"IsGlobal" bit not null) ON 'PRIMARY'  

go

alter table "ac_VolumeDiscounts"
	add constraint "ac_VolumeDiscounts_PK" primary key clustered ("VolumeDiscountId")   


go

/* Create new table "ac_VolumeDiscountGroups".                                                */
/* "ac_VolumeDiscountGroups" : Table of ac_VolumeDiscountGroups                               */  
create table "ac_VolumeDiscountGroups" ( 
	"VolumeDiscountId" int not null,
	"GroupId" int not null) ON 'PRIMARY'  

go

alter table "ac_VolumeDiscountGroups"
	add constraint "ac_VolumeDiscountGroups_PK" primary key clustered ("GroupId", "VolumeDiscountId")   


go

/* Create new table "ac_VolumeDiscountLevels".                                                */
/* "ac_VolumeDiscountLevels" : Table of ac_VolumeDiscountLevels                               */  
create table "ac_VolumeDiscountLevels" ( 
	"VolumeDiscountLevelId" int identity not null,
	"VolumeDiscountId" int not null,
	"MinValue" decimal(12,4) not null,
	"MaxValue" decimal(12,4) not null,
	"DiscountAmount" decimal(12,4) not null,
	"IsPercent" bit not null) ON 'PRIMARY'  

go

alter table "ac_VolumeDiscountLevels"
	add constraint "ac_VolumeDiscountLevels_PK" primary key clustered ("VolumeDiscountLevelId")   


go

/* Create new table "ac_Vendors".                                                             */
/* "ac_Vendors" : Table of ac_Vendors                                                         */  
create table "ac_Vendors" ( 
	"VendorId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"Email" nvarchar(255) null) ON 'PRIMARY'  

go

alter table "ac_Vendors"
	add constraint "ac_Vendors_PK" primary key clustered ("VendorId")   


go

/* Create new table "ac_UserSettings".                                                        */
/* "ac_UserSettings" : Table of ac_UserSettings                                               */  
create table "ac_UserSettings" ( 
	"UserSettingId" int identity not null,
	"UserId" int not null,
	"FieldName" nvarchar(255) not null,
	"FieldValue" nvarchar(4000) not null) ON 'PRIMARY'  

go

alter table "ac_UserSettings"
	add constraint "ac_UserSettings_PK" primary key clustered ("UserSettingId")   


go

/* Create new table "ac_Users".                                                               */
/* "ac_Users" : Table of ac_Users                                                             */
/* 	"ReferringAffiliateId" : Id of affiliate that referred user on first visit.               */
/* 	"AffiliateId" : Id of affiliate that last referred the user.                              */
/* 	"AffiliateReferralDate" : Date and time the user was last referred by the Affiliate.      */  
create table "ac_Users" ( 
	"UserId" int identity not null,
	"StoreId" int not null,
	"UserName" nvarchar(255) not null,
	"LoweredUserName" nvarchar(255) not null,
	"Email" nvarchar(255) null,
	"LoweredEmail" nvarchar(255) null,
	"ReferringAffiliateId" int null,
	"AffiliateId" int null,
	"AffiliateReferralDate" datetime null,
	"PrimaryAddressId" int null,
	"PrimaryWishlistId" int null,
	"PayPalId" nvarchar(50) null,
	"PasswordQuestion" nvarchar(255) null,
	"PasswordAnswer" nvarchar(255) null,
	"IsApproved" bit not null,
	"IsAnonymous" bit not null,
	"IsLockedOut" bit not null,
	"CreateDate" datetime not null,
	"LastActivityDate" datetime null,
	"LastLoginDate" datetime null,
	"LastPasswordChangedDate" datetime null,
	"LastLockoutDate" datetime null,
	"FailedPasswordAttemptCount" int not null,
	"FailedPasswordAttemptWindowStart" datetime null,
	"FailedPasswordAnswerAttemptCount" int not null,
	"FailedPasswordAnswerAttemptWindowStart" datetime null,
	"Comment" nvarchar(255) null) ON 'PRIMARY'  

go

alter table "ac_Users"
	add constraint "ac_Users_PK" primary key clustered ("UserId")   


go

/* Create new table "ac_UserGroups".                                                          */
/* "ac_UserGroups" : Table of ac_UserGroups                                                   */
/* 	"UserId" : ID of user                                                                     */
/* 	"GroupId" : ID of group associated with user                                              */
/* 	"SubscriptionId" : ID of subscription that owns this association                          */  
create table "ac_UserGroups" ( 
	"UserId" int not null,
	"GroupId" int not null,
	"SubscriptionId" int null) ON 'PRIMARY'  

go

alter table "ac_UserGroups"
	add constraint "ac_UserGroups_PK" primary key clustered ("GroupId", "UserId")   


go

/* Create new table "ac_UserPersonalization".                                                 */
/* "ac_UserPersonalization" : Table of ac_UserPersonalization                                 */  
create table "ac_UserPersonalization" ( 
	"PersonalizationPathId" int not null,
	"UserId" int not null,
	"PageSettings" image null,
	"Theme" varchar(100) null,
	"MasterPageFile" varchar(100) null,
	"LastUpdatedDate" datetime not null) ON 'PRIMARY'  

go

alter table "ac_UserPersonalization"
	add constraint "ac_UserPersonalization_PK" primary key clustered ("UserId", "PersonalizationPathId")   


go

/* Create new table "ac_UserPasswords".                                                       */
/* "ac_UserPasswords" : Table of ac_UserPasswords                                             */
/* 	"ForceExpiration" : If true, the password must be changed at login time.                  */  
create table "ac_UserPasswords" ( 
	"UserId" int not null,
	"PasswordNumber" tinyint not null,
	"Password" nvarchar(255) not null,
	"PasswordFormat" nvarchar(10) null,
	"CreateDate" datetime not null,
	"ForceExpiration" bit not null) ON 'PRIMARY'  

go

alter table "ac_UserPasswords"
	add constraint "ac_UserPasswords_PK" primary key clustered ("UserId", "PasswordNumber")   


go

/* Create new table "ac_UpsOrigin".                                                           */
/* "ac_UpsOrigin" : Table of ac_UpsOrigin                                                     */  
create table "ac_UpsOrigin" ( 
	"CountryCode" char(2) not null,
	"CountryName" nvarchar(100) null,
	"CurrencyName" nvarchar(50) null,
	"CurrencyCode" nvarchar(3) null,
	"EuroAllowed" smallint null,
	"MIVDollar" decimal(12,4) null,
	"MIVEuro" decimal(12,4) null,
	"UOM" smallint null,
	"MaxWeight" decimal(12,4) null,
	"MaxMetricWeight" decimal(12,4) null,
	"EUMember" smallint null) ON 'PRIMARY'  

go

alter table "ac_UpsOrigin"
	add constraint "ac_UpsOrigin_PK" primary key clustered ("CountryCode")   


go

/* Create new table "ac_Transactions".                                                        */
/* "ac_Transactions" : Table of ac_Transactions                                               */
/* 	"AdditionalData" : Contains any gateway specific data in a url style name/value string    */  
create table "ac_Transactions" ( 
	"TransactionId" int identity not null,
	"TransactionTypeId" smallint not null,
	"PaymentId" int not null,
	"PaymentGatewayId" int null,
	"ProviderTransactionId" nvarchar(50) null,
	"TransactionDate" datetime not null,
	"Amount" decimal(12,4) not null,
	"TransactionStatusId" smallint not null,
	"ResponseCode" nvarchar(50) null,
	"ResponseMessage" nvarchar(255) null,
	"AuthorizationCode" nvarchar(255) null,
	"AVSResultCode" char(1) null,
	"CVVResultCode" char(1) null,
	"CAVResultCode" char(1) null,
	"RemoteIP" varchar(39) null,
	"Referrer" nvarchar(255) null,
	"AdditionalData" nvarchar(255) null) ON 'PRIMARY'  

go

alter table "ac_Transactions"
	add constraint "ac_Transactions_PK" primary key clustered ("TransactionId")   


go

/* Create new table "ac_TrackingNumbers".                                                     */
/* "ac_TrackingNumbers" : Table of ac_TrackingNumbers                                         */  
create table "ac_TrackingNumbers" ( 
	"TrackingNumberId" int identity not null,
	"OrderShipmentId" int not null,
	"ShipGatewayId" int null,
	"TrackingNumberData" nvarchar(100) not null) ON 'PRIMARY'  

go

alter table "ac_TrackingNumbers"
	add constraint "ac_TrackingNumbers_PK" primary key clustered ("TrackingNumberId")   


go

/* Create new table "ac_TaxRuleTaxCodes".                                                     */
/* "ac_TaxRuleTaxCodes" : Table of ac_TaxRuleTaxCodes                                         */  
create table "ac_TaxRuleTaxCodes" ( 
	"TaxRuleId" int not null,
	"TaxCodeId" int not null) ON 'PRIMARY'  

go

alter table "ac_TaxRuleTaxCodes"
	add constraint "ac_TaxRuleTaxCodes_PK" primary key clustered ("TaxRuleId", "TaxCodeId")   


go

/* Create new table "ac_TaxRules".                                                            */
/* "ac_TaxRules" : Table of ac_TaxRules                                                       */
/* 	"GroupRuleId" : 0 = all groups, 1 = include linked groups, 2 = exclude linked groups      */
/* 	"TaxCodeId" : Tax code that should be assigned to any line item generated by this tax rule */
/* 	"Priority" : Order this tax rule should be processed in relation to other rules           */
/* 	"RoundingRuleId" : 0 = traditional rounding, 1 = bankers rounding, 2 = always round up    */
/* 	"UsePerItemTax" : If false, tax is applied to the line item cost.  If true, tax is calculated on the each price then multiplied by quantity. */  
create table "ac_TaxRules" ( 
	"TaxRuleId" int identity not null,
	"StoreId" int not null,
	"CountryCode" char(2) null,
	"ProvinceId" int null,
	"Name" nvarchar(100) not null,
	"PostalCodeFilter" nvarchar(255) null,
	"TaxRate" decimal(9,4) not null,
	"UseBillingAddress" bit not null,
	"GroupRuleId" tinyint not null,
	"TaxCodeId" int null,
	"Priority" smallint not null,
	"RoundingRuleId" tinyint not null,
	"UsePerItemTax" bit not null) ON 'PRIMARY'  

go

alter table "ac_TaxRules"
	add constraint "ac_TaxRules_PK" primary key clustered ("TaxRuleId")   


go

/* Create new table "ac_TaxGateways".                                                         */
/* "ac_TaxGateways" : Table of ac_TaxGateways                                                 */
/* 	"ReCrypt" : Indicates whether the config data requires recryption due to a key change.    */  
create table "ac_TaxGateways" ( 
	"TaxGatewayId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"ClassId" varchar(255) not null,
	"ConfigData" nvarchar(4000) null,
	"ReCrypt" bit not null) ON 'PRIMARY'  

go

alter table "ac_TaxGateways"
	add constraint "ac_TaxGateways_PK" primary key clustered ("TaxGatewayId")   


go

/* Create new table "ac_TaxCodes".                                                            */
/* "ac_TaxCodes" : Table of ac_TaxCodes                                                       */
/* 	"TaxCodeId" : Unique ID of the tax code.                                                  */
/* 	"StoreId" : Store that contains the tax code.                                             */
/* 	"Name" : Name of the tax code.                                                            */  
create table "ac_TaxCodes" ( 
	"TaxCodeId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null) ON 'PRIMARY'  

go

alter table "ac_TaxCodes"
	add constraint "ac_TaxCodes_PK" primary key clustered ("TaxCodeId")   


go

/* Create new table "ac_StoreSettings".                                                       */
/* "ac_StoreSettings" : Table of ac_StoreSettings                                             */  
create table "ac_StoreSettings" ( 
	"StoreSettingId" int identity not null,
	"StoreId" int not null,
	"FieldName" nvarchar(255) not null,
	"FieldValue" nvarchar(4000) not null) ON 'PRIMARY'  

go

alter table "ac_StoreSettings"
	add constraint "ac_StoreSettings_PK" primary key clustered ("StoreSettingId")   


go

/* Create new table "ac_Stores".                                                              */
/* "ac_Stores" : Table of ac_Stores                                                           */
/* 	"StoreId" : Unique ID of the store                                                        */
/* 	"Name" : Name of the store                                                                */
/* 	"ApplicationName" : Name of the application (for user / role provider)                    */
/* 	"LoweredApplicationName" : Lowered name of the application (for user / role provider)     */
/* 	"LicenseKey" : License key for the store (Deprecated)                                     */
/* 	"DefaultWarehouseId" : Id of the default warehouse / store address                        */
/* 	"NextOrderId" : Next order number to be assigned for the store                            */
/* 	"OrderIdIncrement" : Increment to add to the last order number that generates the next    */
/* 	"WeightUnitId" : Weight unit in use by the store                                          */
/* 	"MeasurementUnitId" : Measurement unit in use by the store                                */  
create table "ac_Stores" ( 
	"StoreId" int identity not null,
	"Name" nvarchar(100) not null,
	"ApplicationName" nvarchar(255) not null,
	"LoweredApplicationName" nvarchar(255) not null,
	"LicenseKey" text null,
	"DefaultWarehouseId" int null,
	"NextOrderId" int default 1 not null,
	"OrderIdIncrement" smallint default 1 not null,
	"WeightUnitId" smallint not null,
	"MeasurementUnitId" smallint not null) ON 'PRIMARY'  

go

alter table "ac_Stores"
	add constraint "ac_Stores_PK" primary key clustered ("StoreId")   


go

/* Create new table "ac_Specials".                                                            */
/* "ac_Specials" : Table of ac_Specials                                                       */  
create table "ac_Specials" ( 
	"SpecialId" int identity not null,
	"ProductId" int not null,
	"Price" decimal(12,4) not null,
	"StartDate" datetime null,
	"EndDate" datetime null) ON 'PRIMARY'  

go

alter table "ac_Specials"
	add constraint "ac_Specials_PK" primary key clustered ("SpecialId")   


go

/* Create new table "ac_SpecialGroups".                                                       */
/* "ac_SpecialGroups" : Table of ac_SpecialGroups                                             */  
create table "ac_SpecialGroups" ( 
	"SpecialId" int not null,
	"GroupId" int not null) ON 'PRIMARY'  

go

alter table "ac_SpecialGroups"
	add constraint "ac_SpecialGroups_PK" primary key clustered ("SpecialId", "GroupId")   


go

/* Create new table "ac_ShipZones".                                                           */
/* "ac_ShipZones" : Table of ac_ShipZones                                                     */
/* 	"ShipZoneId" : Unique ID of the ship zone                                                 */
/* 	"StoreId" : ID of the store that contains the ship zone                                   */
/* 	"Name" : Name of the ship zone                                                            */
/* 	"CountryRuleId" : Indicates whether associated countries are included or excluded from criteria */
/* 	"ProvinceRuleId" : Indicates whether associated provinces are included or excluded from criteria */
/* 	"PostalCodeFilter" : List of postal codes that are include in this zone                   */
/* 	"ExcludePostalCodeFilter" : List of postal codes that are excluded from this zone         */  
create table "ac_ShipZones" ( 
	"ShipZoneId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(255) not null,
	"CountryRuleId" tinyint not null,
	"ProvinceRuleId" tinyint not null,
	"PostalCodeFilter" nvarchar(255) null,
	"ExcludePostalCodeFilter" nvarchar(255) null) ON 'PRIMARY'  

go

alter table "ac_ShipZones"
	add constraint "ac_ShipZones_PK" primary key clustered ("ShipZoneId")   


go

/* Create new table "ac_ShipZoneProvinces".                                                   */
/* "ac_ShipZoneProvinces" : Table of ac_ShipZoneProvinces                                     */  
create table "ac_ShipZoneProvinces" ( 
	"ShipZoneId" int not null,
	"ProvinceId" int not null) ON 'PRIMARY'  

go

alter table "ac_ShipZoneProvinces"
	add constraint "ac_ShipZoneProvinces_PK" primary key clustered ("ProvinceId", "ShipZoneId")   


go

/* Create new table "ac_ShipZoneCountries".                                                   */
/* "ac_ShipZoneCountries" : Table of ac_ShipZoneCountries                                     */  
create table "ac_ShipZoneCountries" ( 
	"ShipZoneId" int not null,
	"CountryCode" char(2) not null) ON 'PRIMARY'  

go

alter table "ac_ShipZoneCountries"
	add constraint "ac_ShipZoneCountries_PK" primary key clustered ("ShipZoneId", "CountryCode")   


go

/* Create new table "ac_ShipRateMatrix".                                                      */
/* "ac_ShipRateMatrix" : Table of ac_ShipRateMatrix                                           */  
create table "ac_ShipRateMatrix" ( 
	"ShipRateMatrixId" int identity not null,
	"ShipMethodId" int not null,
	"RangeStart" decimal(12,4) null,
	"RangeEnd" decimal(12,4) null,
	"Rate" decimal(12,4) not null,
	"IsPercent" bit default 0 not null) ON 'PRIMARY'  

go

alter table "ac_ShipRateMatrix"
	add constraint "ac_ShipRateMatrix_PK" primary key clustered ("ShipRateMatrixId")   


go

/* Create new table "ac_ShipMethodWarehouses".                                                */
/* "ac_ShipMethodWarehouses" : Table of ac_ShipMethodWarehouses                               */  
create table "ac_ShipMethodWarehouses" ( 
	"ShipMethodId" int not null,
	"WarehouseId" int not null) ON 'PRIMARY'  

go

alter table "ac_ShipMethodWarehouses"
	add constraint "ac_ShipMethodWarehouses_PK" primary key clustered ("ShipMethodId", "WarehouseId")   


go

/* Create new table "ac_ShipMethodShipZones".                                                 */
/* "ac_ShipMethodShipZones" : Table of ac_ShipMethodShipZones                                 */  
create table "ac_ShipMethodShipZones" ( 
	"ShipMethodId" int not null,
	"ShipZoneId" int not null) ON 'PRIMARY'  

go

alter table "ac_ShipMethodShipZones"
	add constraint "ac_ShipMethodShipZones_PK" primary key clustered ("ShipMethodId", "ShipZoneId")   


go

/* Create new table "ac_ShipMethods".                                                         */
/* "ac_ShipMethods" : Table of ac_ShipMethods                                                 */
/* 	"ShipMethodId" : Unique ID of the shipping method                                         */
/* 	"StoreId" : ID of the store that contains the shiping method                              */
/* 	"ShipMethodTypeId" : Type of the shipping method                                          */
/* 	"Name" : Name of the shipping method                                                      */
/* 	"Surcharge" : Additional surcharge or handling fee added to the calculated shipping rate  */
/* 	"ShipGatewayId" : Real time shipping gateway used to calculate rate                       */
/* 	"ServiceCode" : Service code for shipping method (when used with gateway)                 */
/* 	"MinPurchase" : Minimum purchase required to activate this method                         */
/* 	"SurchargeIsVisible" : If true, the surcharge is visible as a separate line item from the shipping charge.  If false, the surcharge is combined with the shipping rate. */
/* 	"SurchargeIsPercent" : If true, surcharge is calculated as a percent of shipping rate     */
/* 	"TaxCodeId" : Tax code applied to the shipping rate (and surcharge, if applicable)        */  
create table "ac_ShipMethods" ( 
	"ShipMethodId" int identity not null,
	"StoreId" int not null,
	"ShipMethodTypeId" smallint not null,
	"Name" nvarchar(255) not null,
	"Surcharge" decimal(12,4) not null,
	"ShipGatewayId" int null,
	"ServiceCode" nvarchar(255) null,
	"MinPurchase" decimal(12,4) not null,
	"SurchargeIsVisible" bit not null,
	"SurchargeIsPercent" bit null,
	"TaxCodeId" int null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_ShipMethods"
	add constraint "ac_ShipMethods_PK" primary key clustered ("ShipMethodId")   


go

/* Create new table "ac_ShipMethodGroups".                                                    */
/* "ac_ShipMethodGroups" : Table of ac_ShipMethodGroups                                       */  
create table "ac_ShipMethodGroups" ( 
	"ShipMethodId" int not null,
	"GroupId" int not null) ON 'PRIMARY'  

go

alter table "ac_ShipMethodGroups"
	add constraint "ac_ShipMethodGroups_PK" primary key clustered ("GroupId", "ShipMethodId")   


go

/* Create new table "ac_ShipGateways".                                                        */
/* "ac_ShipGateways" : Table of ac_ShipGateways                                               */
/* 	"ReCrypt" : Indicates whether the config data requires recryption due to a key change.    */  
create table "ac_ShipGateways" ( 
	"ShipGatewayId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"ClassId" varchar(255) not null,
	"ConfigData" nvarchar(4000) null,
	"ReCrypt" bit not null,
	"Enabled" bit not null) ON 'PRIMARY'  

go

alter table "ac_ShipGateways"
	add constraint "ac_ShipGateways_PK" primary key clustered ("ShipGatewayId")   


go

/* Create new table "ac_SharedPersonalization".                                               */
/* "ac_SharedPersonalization" : Table of ac_SharedPersonalization                             */  
create table "ac_SharedPersonalization" ( 
	"PersonalizationPathId" int not null,
	"PageSettings" image null,
	"Theme" varchar(100) null,
	"MasterPageFile" varchar(100) null,
	"LastUpdatedDate" datetime not null) ON 'PRIMARY'  

go

alter table "ac_SharedPersonalization"
	add constraint "ac_SharedPersonalization_PK" primary key clustered ("PersonalizationPathId")   


go

/* Create new table "ac_VendorGroups".                                                        */
/* "ac_VendorGroups" : Table of ac_VendorGroups                                               */  
create table "ac_VendorGroups" ( 
	"VendorId" int not null,
	"GroupId" int not null) ON 'PRIMARY'  

go

alter table "ac_VendorGroups"
	add constraint "ac_VendorGroups_PK" primary key clustered ("GroupId", "VendorId")   


go

/* Create new table "ac_Groups".                                                              */
/* "ac_Groups" : Table of ac_Groups                                                           */
/* 	"GroupId" : Unique ID of the group                                                        */
/* 	"StoreId" : ID of the store that contains the group                                       */
/* 	"Name" : Name of the gruop                                                                */
/* 	"Description" : Description of the group                                                  */
/* 	"IsTaxExempt" : Indicates whether members of this group are tax exempt                    */
/* 	"IsReadOnly" : Indicates whether the group can be edited from the merchant admin          */  
create table "ac_Groups" ( 
	"GroupId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"Description" nvarchar(255) null,
	"IsTaxExempt" bit not null,
	"IsReadOnly" bit not null) ON 'PRIMARY'  

go

alter table "ac_Groups"
	add constraint "ac_Groups_PK" primary key clustered ("GroupId")   


go

/* Create new table "ac_ReviewerProfiles".                                                    */
/* "ac_ReviewerProfiles" : Table of ac_ReviewerProfiles                                       */
/* 	"ReviewerProfileId" : Unique ID of the reviewer profile                                   */
/* 	"Email" : Email address associated with the review.                                       */
/* 	"DisplayName" : Publicly visible name of the user                                         */
/* 	"Location" : Publicly visible location of the customer                                    */
/* 	"EmailVerified" : Indicates whether the associated user's email address is verified       */
/* 	"EmailVerificationCode" : Code generated to verify the user's email address               */  
create table "ac_ReviewerProfiles" ( 
	"ReviewerProfileId" int identity not null,
	"Email" nvarchar(255) not null,
	"DisplayName" nvarchar(100) not null,
	"Location" nvarchar(50) null,
	"EmailVerified" bit not null,
	"EmailVerificationCode" uniqueidentifier null) ON 'PRIMARY'  

go

alter table "ac_ReviewerProfiles"
	add constraint "ac_ReviewerProfiles_PK" primary key clustered ("ReviewerProfileId")   


go

/* Create new table "ac_Readmes".                                                             */
/* "ac_Readmes" : Table of ac_Readmes                                                         */
/* 	"StoreId" : StoreId is of ac_Readmes                                                      */  
create table "ac_Readmes" ( 
	"ReadmeId" int identity not null,
	"StoreId" int not null,
	"DisplayName" nvarchar(100) not null,
	"ReadmeText" ntext not null,
	"IsHTML" bit not null) ON 'PRIMARY'  

go

alter table "ac_Readmes"
	add constraint "ac_Readmes_PK" primary key clustered ("ReadmeId")   


go

/* Create new table "ac_Provinces".                                                           */
/* "ac_Provinces" : Table of ac_Provinces                                                     */  
create table "ac_Provinces" ( 
	"ProvinceId" int identity not null,
	"CountryCode" char(2) not null,
	"Name" nvarchar(50) not null,
	"LoweredName" nvarchar(50) not null,
	"ProvinceCode" nvarchar(10) null) ON 'PRIMARY'  

go

alter table "ac_Provinces"
	add constraint "ac_Provinces_PK" primary key clustered ("ProvinceId")   


go

/* Create new table "ac_Profiles".                                                            */
/* "ac_Profiles" : Table of ac_Profiles                                                       */  
create table "ac_Profiles" ( 
	"UserId" int not null,
	"PropertyNames" ntext not null,
	"PropertyValuesString" ntext not null,
	"PropertyValuesBinary" image not null,
	"LastUpdatedDate" datetime null) ON 'PRIMARY'  

go

alter table "ac_Profiles"
	add constraint "ac_Profiles_PK" primary key clustered ("UserId")   


go

/* Create new table "ac_ProductVolumeDiscounts".                                              */
/* "ac_ProductVolumeDiscounts" : Table of ac_ProductVolumeDiscounts                           */  
create table "ac_ProductVolumeDiscounts" ( 
	"ProductId" int not null,
	"VolumeDiscountId" int not null) ON 'PRIMARY'  

go

alter table "ac_ProductVolumeDiscounts"
	add constraint "ac_ProductVolumeDiscounts_PK" primary key clustered ("ProductId", "VolumeDiscountId")   


go

/* Create new table "ac_ProductVariants".                                                     */
/* "ac_ProductVariants" : Table of ac_ProductVariants                                         */
/* 	"Option1" : Option1 is of ac_ProductVariants                                              */
/* 	"Option2" : Option2 is of ac_ProductVariants                                              */
/* 	"Option3" : Option3 is of ac_ProductVariants                                              */
/* 	"Option4" : Option4 is of ac_ProductVariants                                              */
/* 	"Option5" : Option5 is of ac_ProductVariants                                              */
/* 	"Option6" : Option6 is of ac_ProductVariants                                              */
/* 	"Option7" : Option7 is of ac_ProductVariants                                              */
/* 	"Option8" : Option8 is of ac_ProductVariants                                              */
/* 	"Available" : Available is of ac_ProductVariants                                          */  
create table "ac_ProductVariants" ( 
	"ProductVariantId" int identity not null,
	"ProductId" int not null,
	"Option1" int not null,
	"Option2" int not null,
	"Option3" int not null,
	"Option4" int not null,
	"Option5" int not null,
	"Option6" int not null,
	"Option7" int not null,
	"Option8" int not null,
	"VariantName" nvarchar(255) null,
	"Sku" nvarchar(100) null,
	"Price" decimal(12,4) null,
	"PriceModeId" tinyint not null,
	"Weight" decimal(12,4) null,
	"WeightModeId" tinyint not null,
	"CostOfGoods" decimal(12,4) null,
	"InStock" int not null,
	"InStockWarningLevel" int not null,
	"Available" bit not null) ON 'PRIMARY'  

go

alter table "ac_ProductVariants"
	add constraint "ac_ProductVariants_PK" primary key clustered ("ProductVariantId")   


go

/* Create new table "ac_ProductTemplates".                                                    */
/* "ac_ProductTemplates" : Table of ac_ProductTemplates                                       */  
create table "ac_ProductTemplates" ( 
	"ProductTemplateId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null) ON 'PRIMARY'  

go

alter table "ac_ProductTemplates"
	add constraint "ac_ProductTemplates_PK" primary key clustered ("ProductTemplateId")   


go

/* Create new table "ac_Products".                                                            */
/* "ac_Products" : Table of ac_Products                                                       */
/* 	"ProductId" : Unique ID of the product.                                                   */
/* 	"StoreId" : ID of the store that contains the item.                                       */
/* 	"Name" : Name of the item.                                                                */
/* 	"Price" : Base price of the product.                                                      */
/* 	"CostOfGoods" : Cost of goods for this product.                                           */
/* 	"MSRP" : Suggested retail price of the product.                                           */
/* 	"Weight" : Shipping weight of the product.                                                */
/* 	"Length" : Shipping length of the product.                                                */
/* 	"Width" : Shipping width of the product.                                                  */
/* 	"Height" : Shipping height of the product.                                                */
/* 	"ManufacturerId" : Manufacturer of the product.                                           */
/* 	"Sku" : SKU or merchant product code for the product.                                     */
/* 	"ModelNumber" : Manufacturer model number for the product.                                */
/* 	"DisplayPage" : Display page used to show the product, if different from the default.     */
/* 	"TaxCodeId" : Tax code associated with this product.                                      */
/* 	"ShippableId" : Indicates whether the product is shippable.                               */
/* 	"WarehouseId" : Warehouse where this product is shipped from.                             */
/* 	"ExtendedDescription" : ExtendedDescription is of ac_Products                             */
/* 	"HtmlHead" : Content to add to the HEAD portion of the HTML display page                  */
/* 	"VisibilityId" : VisibilityId is of ac_Products                                           */
/* 	"Theme" : Theme is of ac_Products                                                         */
/* 	"IconUrl" : IconUrl is of ac_Products                                                     */
/* 	"IconAltText" : IconAltText is of ac_Products                                             */
/* 	"IsGiftCertificate" : IsGiftCertificate is of ac_Products                                 */
/* 	"UseVariablePrice" : Indicates whether the product price is variable                      */
/* 	"MinimumPrice" : Indicates the minimum price of the product                               */
/* 	"MaximumPrice" : Indicates the maximum price of the product                               */
/* 	"SearchKeywords" : SearchKeywords is of ac_Products                                       */
/* 	"HidePrice" : If true, the price should be hidden until the user adds to basket.          */  
create table "ac_Products" ( 
	"ProductId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(255) not null,
	"Price" decimal(12,4) not null,
	"CostOfGoods" decimal(12,4) not null,
	"MSRP" decimal(12,4) not null,
	"Weight" decimal(12,4) not null,
	"Length" decimal(12,4) not null,
	"Width" decimal(12,4) not null,
	"Height" decimal(12,4) not null,
	"ManufacturerId" int null,
	"Sku" nvarchar(40) null,
	"ModelNumber" nvarchar(40) null,
	"DisplayPage" varchar(100) null,
	"TaxCodeId" int null,
	"ShippableId" tinyint default 0 not null,
	"WarehouseId" int null,
	"InventoryModeId" tinyint not null,
	"InStock" int not null,
	"InStockWarningLevel" int not null,
	"ThumbnailUrl" varchar(255) null,
	"ThumbnailAltText" nvarchar(255) null,
	"ImageUrl" varchar(255) null,
	"ImageAltText" nvarchar(255) null,
	"Summary" nvarchar(1024) null,
	"Description" ntext null,
	"ExtendedDescription" ntext null,
	"VendorId" int null,
	"CreatedDate" datetime not null,
	"LastModifiedDate" datetime not null,
	"IsFeatured" bit not null,
	"IsProhibited" bit not null,
	"AllowReviews" bit not null,
	"AllowBackorder" bit not null,
	"WrapGroupId" int null,
	"ExcludeFromFeed" bit not null,
	"HtmlHead" ntext null,
	"DisablePurchase" bit not null,
	"MinQuantity" smallint not null,
	"MaxQuantity" smallint not null,
	"VisibilityId" tinyint not null,
	"Theme" varchar(100) null,
	"IconUrl" varchar(255) null,
	"IconAltText" nvarchar(255) null,
	"IsGiftCertificate" bit not null,
	"UseVariablePrice" bit not null,
	"MinimumPrice" decimal(10,2) null,
	"MaximumPrice" decimal(10,2) null,
	"SearchKeywords" nvarchar(200) null,
	"HidePrice" bit not null) ON 'PRIMARY'  

go

alter table "ac_Products"
	add constraint "ac_Products_PK" primary key clustered ("ProductId")   


go

/* Create new table "ac_ProductReviews".                                                      */
/* "ac_ProductReviews" : Table of ac_ProductReviews                                           */
/* 	"ProductReviewId" : Unique ID of the product review                                       */
/* 	"ProductId" : ID of the product being reviewed                                            */
/* 	"ReviewerProfileId" : ID of the profile of the reviewer                                   */
/* 	"ReviewDate" : Date of the review                                                         */
/* 	"Rating" : Rating given to the product (0 through 10)                                     */
/* 	"ReviewTitle" : Title given to the review                                                 */
/* 	"ReviewBody" : Body of the review                                                         */
/* 	"IsApproved" : Indicates whether or not the review is approved and visible to the public  */  
create table "ac_ProductReviews" ( 
	"ProductReviewId" int identity not null,
	"ProductId" int not null,
	"ReviewerProfileId" int not null,
	"ReviewDate" datetime not null,
	"Rating" tinyint not null,
	"ReviewTitle" nvarchar(100) not null,
	"ReviewBody" nvarchar(4000) not null,
	"IsApproved" bit not null) ON 'PRIMARY'  

go

alter table "ac_ProductReviews"
	add constraint "ac_ProductReviews_PK" primary key clustered ("ProductReviewId")   


go

/* Create new table "ac_ProductKitComponents".                                                */
/* "ac_ProductKitComponents" : Table of ac_ProductKitComponents                               */  
create table "ac_ProductKitComponents" ( 
	"ProductId" int not null,
	"KitComponentId" int not null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_ProductKitComponents"
	add constraint "ac_ProductKitComponents_PK" primary key clustered ("ProductId", "KitComponentId")   


go

/* Create new table "ac_ProductImages".                                                       */
/* "ac_ProductImages" : Table of ac_ProductImages                                             */  
create table "ac_ProductImages" ( 
	"ProductImageId" int identity not null,
	"ProductId" int not null,
	"ImageUrl" varchar(255) not null,
	"ImageAltText" nvarchar(100) null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_ProductImages"
	add constraint "ac_ProductImages_PK" primary key clustered ("ProductImageId")   


go

/* Create new table "ac_ProductTemplateFields".                                               */
/* "ac_ProductTemplateFields" : Table of ac_ProductTemplateFields                             */  
create table "ac_ProductTemplateFields" ( 
	"ProductTemplateFieldId" int identity not null,
	"ProductId" int not null,
	"InputFieldId" int not null,
	"InputValue" nvarchar(4000) not null) ON 'PRIMARY'  

go

alter table "ac_ProductTemplateFields"
	add constraint "ac_ProductTemplateFields_PK" primary key clustered ("ProductTemplateFieldId")   


go

/* Create new table "ac_Options".                                                             */
/* "ac_Options" : Table of ac_Options                                                         */
/* 	"OptionId" : Unique ID of the option                                                      */
/* 	"Name" : Name of the option                                                               */
/* 	"HeaderText" : Text to display as the default (unselected) choice                         */
/* 	"ShowThumbnails" : Indicates whether thumbnails should be displayed for picking option choices. */
/* 	"ThumbnailColumns" : Number of image swatches to show on a single row                     */
/* 	"ThumbnailWidth" : Width of the thumbnail swatch                                          */
/* 	"ThumbnailHeight" : Height of the thumbnail swatch                                        */
/* 	"CreatedDate" : Timestamp for creation of the option for use by the variant matrix        */  
create table "ac_Options" ( 
	"OptionId" int identity not null,
	"Name" nvarchar(100) not null,
	"HeaderText" nvarchar(100) null,
	"ShowThumbnails" bit not null,
	"ThumbnailColumns" tinyint not null,
	"ThumbnailWidth" smallint not null,
	"ThumbnailHeight" smallint not null,
	"CreatedDate" datetime not null) ON 'PRIMARY'  

go

alter table "ac_Options"
	add constraint "ac_ProductAttributes_PK" primary key clustered ("OptionId")   


go

/* Create new table "ac_ProductAssets".                                                       */
/* "ac_ProductAssets" : Table of ac_ProductAssets                                             */  
create table "ac_ProductAssets" ( 
	"ProductAssetId" int identity not null,
	"ProductId" int not null,
	"AssetUrl" nvarchar(255) not null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_ProductAssets"
	add constraint "ac_ProductAssets_PK" primary key clustered ("ProductAssetId")   


go

/* Create new table "ac_PersonalizationPaths".                                                */
/* "ac_PersonalizationPaths" : Table of ac_PersonalizationPaths                               */  
create table "ac_PersonalizationPaths" ( 
	"PersonalizationPathId" int identity not null,
	"StoreId" int not null,
	"Path" nvarchar(255) not null,
	"LoweredPath" nvarchar(255) not null) ON 'PRIMARY'  

go

alter table "ac_PersonalizationPaths"
	add constraint "ac_PersonalizationPaths_PK" primary key clustered ("PersonalizationPathId")   


go

/* Create new table "ac_Payments".                                                            */
/* "ac_Payments" : Table of ac_Payments                                                       */
/* 	"SubscriptionId" : SubscriptionId is of ac_Payments                                       */
/* 	"ReCrypt" : Indicates whether the account data requires reencryption due to a key change. */  
create table "ac_Payments" ( 
	"PaymentId" int identity not null,
	"OrderId" int not null,
	"SubscriptionId" int null,
	"PaymentMethodId" int null,
	"PaymentMethodName" nvarchar(100) null,
	"ReferenceNumber" nvarchar(50) null,
	"Amount" decimal(12,4) not null,
	"CurrencyCode" nvarchar(3) not null,
	"PaymentDate" datetime not null,
	"PaymentStatusId" smallint not null,
	"PaymentStatusReason" nvarchar(255) null,
	"CompletedDate" datetime null,
	"EncryptedAccountData" nvarchar(4000) null,
	"ReCrypt" bit not null) ON 'PRIMARY'  

go

alter table "ac_Payments"
	add constraint "ac_Payments_PK" primary key clustered ("PaymentId")   


go

/* Create new table "ac_PaymentMethods".                                                      */
/* "ac_PaymentMethods" : Table of ac_PaymentMethods                                           */  
create table "ac_PaymentMethods" ( 
	"PaymentMethodId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"PaymentInstrumentId" smallint not null,
	"PaymentGatewayId" int null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_PaymentMethods"
	add constraint "ac_PaymentMethods_PK" primary key clustered ("PaymentMethodId")   


go

/* Create new table "ac_PaymentMethodGroups".                                                 */
/* "ac_PaymentMethodGroups" : Table of ac_PaymentMethodGroups                                 */  
create table "ac_PaymentMethodGroups" ( 
	"PaymentMethodId" int not null,
	"GroupId" int not null) ON 'PRIMARY'  

go

alter table "ac_PaymentMethodGroups"
	add constraint "ac_PaymentMethodGroups_PK" primary key clustered ("PaymentMethodId", "GroupId")   


go

/* Create new table "ac_PaymentGateways".                                                     */
/* "ac_PaymentGateways" : Table of ac_PaymentGateways                                         */
/* 	"ReCrypt" : Indicates whether the config data requires recryption due to a key change.    */  
create table "ac_PaymentGateways" ( 
	"PaymentGatewayId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"ClassId" varchar(255) not null,
	"ConfigData" nvarchar(4000) null,
	"ReCrypt" bit not null) ON 'PRIMARY'  

go

alter table "ac_PaymentGateways"
	add constraint "ac_PaymentGatways_PK" primary key clustered ("PaymentGatewayId")   


go

/* Create new table "ac_PageViews".                                                           */
/* "ac_PageViews" : Table of ac_PageViews                                                     */
/* 	"AffiliateId" : AffiliateId is of ac_PageViews                                            */  
create table "ac_PageViews" ( 
	"PageViewId" int identity not null,
	"StoreId" int not null,
	"ActivityDate" datetime not null,
	"RemoteIP" varchar(39) not null,
	"RequestMethod" nvarchar(4) not null,
	"UserId" int not null,
	"UriStem" nvarchar(255) not null,
	"UriQuery" nvarchar(255) null,
	"TimeTaken" int not null,
	"UserAgent" nvarchar(255) null,
	"Referrer" nvarchar(255) null,
	"CatalogNodeId" int null,
	"CatalogNodeTypeId" smallint null,
	"Browser" nvarchar(150) not null,
	"BrowserName" nvarchar(100) not null,
	"BrowserPlatform" nvarchar(40) not null,
	"BrowserVersion" nvarchar(40) not null,
	"AffiliateId" int not null) ON 'PRIMARY'  

go

alter table "ac_PageViews"
	add constraint "ac_PageViews_PK" primary key clustered ("PageViewId")   


go

/* Create new table "ac_OrderStatusTriggers".                                                 */
/* "ac_OrderStatusTriggers" : Table of ac_OrderStatusTriggers                                 */  
create table "ac_OrderStatusTriggers" ( 
	"StoreEventId" int not null,
	"OrderStatusId" int not null) ON 'PRIMARY'  

go

alter table "ac_OrderStatusTriggers"
	add constraint "ac_OrderStatusTriggers_PK" primary key clustered ("StoreEventId")   


go

/* Create new table "ac_OrderStatuses".                                                       */
/* "ac_OrderStatuses" : Table of ac_OrderStatuses                                             */  
create table "ac_OrderStatuses" ( 
	"OrderStatusId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"DisplayName" nvarchar(100) null,
	"InventoryActionId" smallint not null,
	"IsActive" bit not null,
	"IsValid" bit not null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_OrderStatuses"
	add constraint "ac_OrderStatuses_PK" primary key clustered ("OrderStatusId")   


go

/* Create new table "ac_OrderStatusEmails".                                                   */
/* "ac_OrderStatusEmails" : Table of ac_OrderStatusEmails                                     */  
create table "ac_OrderStatusEmails" ( 
	"OrderStatusId" int not null,
	"EmailTemplateId" int not null) ON 'PRIMARY'  

go

alter table "ac_OrderStatusEmails"
	add constraint "ac_OrderStatusEmails_PK" primary key clustered ("EmailTemplateId", "OrderStatusId")   


go

/* Create new table "ac_OrderStatusActions".                                                  */
/* "ac_OrderStatusActions" : Table of ac_OrderStatusActions                                   */  
create table "ac_OrderStatusActions" ( 
	"OrderStatusId" int not null,
	"OrderActionId" smallint not null) ON 'PRIMARY'  

go

alter table "ac_OrderStatusActions"
	add constraint "ac_OrderStatusActions_PK" primary key clustered ("OrderActionId", "OrderStatusId")   


go

/* Create new table "ac_OrderShipments".                                                      */
/* "ac_OrderShipments" : Table of ac_OrderShipments                                           */  
create table "ac_OrderShipments" ( 
	"OrderShipmentId" int identity not null,
	"OrderId" int not null,
	"WarehouseId" int null,
	"ShipToFirstName" nvarchar(30) null,
	"ShipToLastName" nvarchar(50) null,
	"ShipToCompany" nvarchar(50) null,
	"ShipToAddress1" nvarchar(255) null,
	"ShipToAddress2" nvarchar(255) null,
	"ShipToCity" nvarchar(50) null,
	"ShipToProvince" nvarchar(50) null,
	"ShipToPostalCode" nvarchar(15) null,
	"ShipToCountryCode" nchar(2) null,
	"ShipToPhone" nvarchar(50) null,
	"ShipToFax" nvarchar(50) null,
	"ShipToEmail" nvarchar(255) null,
	"ShipToResidence" bit null,
	"ShipMethodId" int null,
	"ShipMethodName" nvarchar(255) null,
	"ShipMessage" nvarchar(255) null,
	"ShipDate" datetime null) ON 'PRIMARY'  

go

alter table "ac_OrderShipments"
	add constraint "ac_OrderShipments_PK" primary key clustered ("OrderShipmentId")   


go

/* Create new table "ac_Orders".                                                              */
/* "ac_Orders" : Table of ac_Orders                                                           */
/* 	"OrderId" : Unique order identifier                                                       */
/* 	"OrderNumber" : Merchant specified order number                                           */
/* 	"ProductSubtotal" : The total of all products, less any discounts or coupons.             */
/* 	"Referrer" : The referrer of the user for this order.                                     */
/* 	"PaymentStatusId" : Indicates the payment status for this order.                          */
/* 	"ShipmentStatusId" : Indicates the shipment status for this order.                        */  
create table "ac_Orders" ( 
	"OrderId" int identity not null,
	"OrderNumber" int not null,
	"OrderDate" datetime not null,
	"StoreId" int not null,
	"UserId" int null,
	"AffiliateId" int null,
	"BillToFirstName" nvarchar(30) null,
	"BillToLastName" nvarchar(50) null,
	"BillToCompany" nvarchar(50) null,
	"BillToAddress1" nvarchar(255) null,
	"BillToAddress2" nvarchar(255) null,
	"BillToCity" nvarchar(50) null,
	"BillToProvince" nvarchar(50) null,
	"BillToPostalCode" nvarchar(15) null,
	"BillToCountryCode" nchar(2) null,
	"BillToPhone" nvarchar(50) null,
	"BillToFax" nvarchar(50) null,
	"BillToEmail" nvarchar(255) null,
	"ProductSubtotal" decimal(12,4) not null,
	"TotalCharges" decimal(12,4) not null,
	"TotalPayments" decimal(12,4) not null,
	"OrderStatusId" int not null,
	"Exported" bit not null,
	"RemoteIP" varchar(39) null,
	"Referrer" nvarchar(255) null,
	"GoogleOrderNumber" nvarchar(50) null,
	"PaymentStatusId" tinyint not null,
	"ShipmentStatusId" tinyint not null) ON 'PRIMARY'  

go

alter table "ac_Orders"
	add constraint "ac_Orders_PK" primary key clustered ("OrderId")   


go

/* Create new table "ac_OrderNotes".                                                          */
/* "ac_OrderNotes" : Table of ac_OrderNotes                                                   */  
create table "ac_OrderNotes" ( 
	"OrderNoteId" int identity not null,
	"OrderId" int not null,
	"UserId" int null,
	"CreatedDate" datetime not null,
	"Comment" ntext not null,
	"NoteTypeId" tinyint not null) ON 'PRIMARY'  

go

alter table "ac_OrderNotes"
	add constraint "ac_OrderNotes_PK" primary key clustered ("OrderNoteId")   


go

/* Create new table "ac_OrderItems".                                                          */
/* "ac_OrderItems" : Table of ac_OrderItems                                                   */
/* 	"OrderItemId" : Unique ID of the order item.                                              */
/* 	"OrderId" : The order that contains the order item.                                       */
/* 	"ParentItemId" : Associated parent order item (if any).                                   */
/* 	"OrderItemTypeId" : Type of order item                                                    */
/* 	"ShippableId" : Indicates whether the order item is shippable.                            */
/* 	"OrderShipmentId" : The shipment that contains the order item.                            */
/* 	"ProductId" : The product associated with this order item.                                */
/* 	"Name" : The name of the order item.                                                      */
/* 	"OptionList" : Comma delimited list of option choice ids.                                 */
/* 	"VariantName" : Variant name of the item                                                  */
/* 	"Sku" : SKU of the order item                                                             */
/* 	"Price" : Price of the item                                                               */
/* 	"Weight" : Weight of the item                                                             */
/* 	"CostOfGoods" : Cost of goods for the item                                                */
/* 	"Quantity" : Quantity of the item purchased                                               */
/* 	"LineMessage" : Line message for the item                                                 */
/* 	"OrderBy" : Order this item appears in relation to other items in the order               */
/* 	"GiftMessage" : Gift message for this item                                                */
/* 	"TaxCodeId" : Tax code for the item                                                       */
/* 	"WrapStyleId" : Gift wrap style for the item                                              */
/* 	"WishlistItemId" : Wishlist item this item is associated with                             */
/* 	"InventoryStatusId" : Status of inventory for this item                                   */
/* 	"TaxRate" : The total tax rate percentage applied to this item.                           */
/* 	"TaxAmount" : The total tax amount applied to this item.                                  */
/* 	"KitList" : Comma delimited list of kit products that are associated with this item.      */
/* 	"CustomFields" : Additional data tied to this order item.                                 */  
create table "ac_OrderItems" ( 
	"OrderItemId" int identity not null,
	"OrderId" int not null,
	"ParentItemId" int null,
	"OrderItemTypeId" smallint not null,
	"ShippableId" tinyint not null,
	"OrderShipmentId" int null,
	"ProductId" int null,
	"Name" nvarchar(255) not null,
	"OptionList" varchar(255) null,
	"VariantName" nvarchar(255) null,
	"Sku" nvarchar(100) null,
	"Price" decimal(12,4) not null,
	"Weight" decimal(12,4) not null,
	"CostOfGoods" decimal(12,4) not null,
	"Quantity" smallint not null,
	"LineMessage" nvarchar(255) null,
	"OrderBy" smallint default 0 not null,
	"GiftMessage" nvarchar(255) null,
	"TaxCodeId" int null,
	"WrapStyleId" int null,
	"WishlistItemId" int null,
	"InventoryStatusId" smallint not null,
	"TaxRate" decimal(12,4) not null,
	"TaxAmount" decimal(12,4) not null,
	"KitList" varchar(255) null,
	"CustomFields" nvarchar(4000) null) ON 'PRIMARY'  

go

alter table "ac_OrderItems"
	add constraint "ac_OrderItems_PK" primary key clustered ("OrderItemId")   


go

/* Create new table "ac_OrderItemInputs".                                                     */
/* "ac_OrderItemInputs" : Table of ac_OrderItemInputs                                         */
/* 	"IsMerchantField" : True if the field is a merchant field.  False for customer fields.    */  
create table "ac_OrderItemInputs" ( 
	"OrderItemInputId" int identity not null,
	"OrderItemId" int not null,
	"IsMerchantField" bit not null,
	"Name" nvarchar(100) not null,
	"InputValue" nvarchar(4000) not null) ON 'PRIMARY'  

go

alter table "ac_OrderItemInputs"
	add constraint "ac_OrderItemInputs_PK" primary key clustered ("OrderItemInputId")   


go

/* Create new table "ac_OrderItemDigitalGoods".                                               */
/* "ac_OrderItemDigitalGoods" : Table of ac_OrderItemDigitalGoods                             */
/* 	"OrderItemDigitalGoodId" : Unique ID of this purchased digital good                       */
/* 	"OrderItemId" : ID of the order item this digital good was purchased with                 */
/* 	"DigitalGoodId" : ID of the digital good                                                  */
/* 	"Name" : Static name of the digital good that was purchased                               */
/* 	"ActivationDate" : Date the purchased digital good was activated                          */
/* 	"DownloadDate" : First date the digital good was downloaded                               */
/* 	"SerialKeyData" : Serial key associated with this purchased digital good                  */  
create table "ac_OrderItemDigitalGoods" ( 
	"OrderItemDigitalGoodId" int identity not null,
	"OrderItemId" int not null,
	"DigitalGoodId" int null,
	"Name" nvarchar(100) null,
	"ActivationDate" datetime null,
	"DownloadDate" datetime null,
	"SerialKeyData" ntext null) ON 'PRIMARY'  

go

alter table "ac_OrderItemDigitalGoods"
	add constraint "ac_OrderItemDigitalGoods_PK" primary key clustered ("OrderItemDigitalGoodId")   


go

/* Create new table "ac_OrderCoupons".                                                        */
/* "ac_OrderCoupons" : Table of ac_OrderCoupons                                               */  
create table "ac_OrderCoupons" ( 
	"OrderId" int not null,
	"CouponCode" nvarchar(50) not null) ON 'PRIMARY'  

go

alter table "ac_OrderCoupons"
	add constraint "ac_OrderCoupons_PK" primary key clustered ("CouponCode", "OrderId")   


go

/* Create new table "ac_Manufacturers".                                                       */
/* "ac_Manufacturers" : Table of ac_Manufacturers                                             */  
create table "ac_Manufacturers" ( 
	"ManufacturerId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(255) not null) ON 'PRIMARY'  

go

alter table "ac_Manufacturers"
	add constraint "ac_Manufacturers_PK" primary key clustered ("ManufacturerId")   


go

/* Create new table "ac_Links".                                                               */
/* "ac_Links" : Table of ac_Links                                                             */
/* 	"LinkId" : Unique ID of the link.                                                         */
/* 	"StoreId" : ID of the store that contains the item.                                       */
/* 	"Name" : Name of the item.                                                                */
/* 	"TargetUrl" : Target URL to open for this link.                                           */
/* 	"TargetWindow" : Target window for the link when opened.                                  */
/* 	"Summary" : Brief description for the item.                                               */
/* 	"Description" : Detailed description for the item.                                        */
/* 	"ThumbnailUrl" : URL of the thumbnail image to use for this item.                         */
/* 	"ThumbnailAltText" : Alternate text to use with the thumbnail image, or blank if the name should be used. */
/* 	"DisplayPage" : Display page used to show the link, or blank if a direct link is desired. */
/* 	"Theme" : Theme used to display this item, if different from the default.                 */
/* 	"HtmlHead" : Content to add to the HEAD portion of the HTML display page                  */
/* 	"VisibilityId" : Indicates the visibility of this item.                                   */  
create table "ac_Links" ( 
	"LinkId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"TargetUrl" varchar(255) not null,
	"TargetWindow" varchar(40) null,
	"Summary" nvarchar(1024) null,
	"Description" ntext null,
	"ThumbnailUrl" varchar(255) null,
	"ThumbnailAltText" nvarchar(255) null,
	"DisplayPage" varchar(100) null,
	"Theme" varchar(100) null,
	"HtmlHead" ntext null,
	"VisibilityId" tinyint not null) ON 'PRIMARY'  

go

alter table "ac_Links"
	add constraint "ac_Links_PK" primary key clustered ("LinkId")   


go

/* Create new table "ac_SerialKeys".                                                          */
/* "ac_SerialKeys" : Table of ac_SerialKeys                                                   */
/* 	"SerialKeyId" : Unique ID of serial key                                                   */
/* 	"DigitalGoodId" : The digital good this serial key belongs to                             */
/* 	"SerialKeyData" : Content of serial key                                                   */  
create table "ac_SerialKeys" ( 
	"SerialKeyId" int identity not null,
	"DigitalGoodId" int not null,
	"SerialKeyData" ntext not null) ON 'PRIMARY'  

go

alter table "ac_SerialKeys"
	add constraint "ac_LicenseKeys_PK" primary key clustered ("SerialKeyId")   


go

/* Create new table "ac_LicenseAgreements".                                                   */
/* "ac_LicenseAgreements" : Table of ac_LicenseAgreements                                     */
/* 	"StoreId" : StoreId is of ac_LicenseAgreements                                            */  
create table "ac_LicenseAgreements" ( 
	"LicenseAgreementId" int identity not null,
	"StoreId" int not null,
	"DisplayName" nvarchar(100) not null,
	"AgreementText" ntext not null,
	"IsHTML" bit not null) ON 'PRIMARY'  

go

alter table "ac_LicenseAgreements"
	add constraint "ac_LicenseAgreements_PK" primary key clustered ("LicenseAgreementId")   


go

/* Create new table "ac_KitProducts".                                                         */
/* "ac_KitProducts" : Table of ac_KitProducts                                                 */  
create table "ac_KitProducts" ( 
	"KitProductId" int identity not null,
	"KitComponentId" int not null,
	"ProductId" int not null,
	"OptionList" varchar(255) null,
	"Name" nvarchar(255) not null,
	"Quantity" smallint not null,
	"Price" decimal(12,4) not null,
	"PriceModeId" tinyint not null,
	"Weight" decimal(12,4) not null,
	"WeightModeId" tinyint not null,
	"IsSelected" bit not null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_KitProducts"
	add constraint "ac_KitProducts_PK" primary key clustered ("KitProductId")   


go

/* Create new table "ac_KitComponents".                                                       */
/* "ac_KitComponents" : Table of ac_KitComponents                                             */  
create table "ac_KitComponents" ( 
	"KitComponentId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"UserPrompt" nvarchar(255) null,
	"InputTypeId" smallint not null,
	"Columns" tinyint not null,
	"HeaderOption" nvarchar(100) null) ON 'PRIMARY'  

go

alter table "ac_KitComponents"
	add constraint "ac_KitComponents_PK" primary key clustered ("KitComponentId")   


go

/* Create new table "ac_InputFields".                                                         */
/* "ac_InputFields" : Table of ac_InputFields                                                 */
/* 	"IsRequired" : True if field entry is required; false otherwise.                          */
/* 	"RequiredMessage" : Message displayed if required field is not filled in.                 */
/* 	"IsMerchantField" : True if the field is filled in by the merchant, false for customer fields. */
/* 	"PersistWithOrder" : True if the collected data should be persisted with the order        */
/* 	"PromptCssClass" : Css class to apply to the user prompt                                  */
/* 	"ControlCssClass" : Css class to apply to the input control                               */
/* 	"AdditionalData" : Contains any control specific data in a url style name/value string    */  
create table "ac_InputFields" ( 
	"InputFieldId" int identity not null,
	"ProductTemplateId" int not null,
	"Name" nvarchar(100) not null,
	"UserPrompt" nvarchar(255) not null,
	"InputTypeId" smallint not null,
	"Rows" tinyint not null,
	"Columns" tinyint not null,
	"MaxLength" smallint not null,
	"IsRequired" bit not null,
	"RequiredMessage" ntext null,
	"IsMerchantField" bit not null,
	"PersistWithOrder" bit not null,
	"PromptCssClass" nvarchar(100) null,
	"ControlCssClass" nvarchar(100) null,
	"AdditionalData" nvarchar(255) null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_InputFields"
	add constraint "ac_InputFields_PK" primary key clustered ("InputFieldId")   


go

/* Create new table "ac_InputChoices".                                                        */
/* "ac_InputChoices" : Table of ac_InputChoices                                               */  
create table "ac_InputChoices" ( 
	"InputChoiceId" int identity not null,
	"InputFieldId" int not null,
	"ChoiceText" nvarchar(100) not null,
	"ChoiceValue" nvarchar(100) null,
	"IsSelected" bit not null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_InputChoices"
	add constraint "ac_InputChoices_PK" primary key clustered ("InputChoiceId")   


go

/* Create new table "ac_GiftCertificateTransactions".                                         */
/* "ac_GiftCertificateTransactions" : Table of ac_GiftCertificateTransactions                 */  
create table "ac_GiftCertificateTransactions" ( 
	"GiftCertificateTransactionId" int identity not null,
	"GiftCertificateId" int not null,
	"OrderId" int null,
	"TransactionDate" datetime not null,
	"Amount" decimal(12,4) not null,
	"Description" nvarchar(255) null) ON 'PRIMARY'  

go

alter table "ac_GiftCertificateTransactions"
	add constraint "ac_GiftCertificateTransactions_PK" primary key clustered ("GiftCertificateTransactionId")   


go

/* Create new table "ac_GiftCertificates".                                                    */
/* "ac_GiftCertificates" : Table of ac_GiftCertificates                                       */
/* 	"GiftCertificateId" : ID of the gift certificate                                          */
/* 	"StoreId" : Store that the gift certificate belongs to                                    */
/* 	"Name" : Name for the gift certificate, such as $10 gift certificate                      */
/* 	"SerialNumber" : Serial number required to use the gift certificate as payment            */
/* 	"CreatedBy" : ID of the user who created the gift certificate                             */
/* 	"CreateDate" : Date the gift certificate was created                                      */
/* 	"OrderItemId" : ID of order item that was responsible for the creation of this gift certificate */
/* 	"ExpirationDate" : Date the gift certificate expires                                      */
/* 	"Balance" : Current balance of the gift certificate                                       */  
create table "ac_GiftCertificates" ( 
	"GiftCertificateId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) null,
	"SerialNumber" nvarchar(40) not null,
	"CreatedBy" int not null,
	"CreateDate" datetime not null,
	"OrderItemId" int null,
	"ExpirationDate" datetime null,
	"Balance" decimal(12,4) not null) ON 'PRIMARY'  

go

alter table "ac_GiftCertificates"
	add constraint "ac_GiftCertificates_PK" primary key clustered ("GiftCertificateId")   


go

/* Create new table "ac_EmailTemplateTriggers".                                               */
/* "ac_EmailTemplateTriggers" : Table of ac_EmailTemplateTriggers                             */  
create table "ac_EmailTemplateTriggers" ( 
	"EmailTemplateId" int not null,
	"StoreEventId" int not null) ON 'PRIMARY'  

go

alter table "ac_EmailTemplateTriggers"
	add constraint "ac_EmailTemplateTriggers_PK" primary key clustered ("EmailTemplateId", "StoreEventId")   


go

/* Create new table "ac_EmailTemplates".                                                      */
/* "ac_EmailTemplates" : Table of ac_EmailTemplates                                           */  
create table "ac_EmailTemplates" ( 
	"EmailTemplateId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"ToAddress" nvarchar(255) not null,
	"FromAddress" nvarchar(255) not null,
	"ReplyToAddress" nvarchar(255) null,
	"CCList" nvarchar(255) null,
	"BCCList" nvarchar(255) null,
	"Subject" nvarchar(255) null,
	"ContentFileName" nvarchar(100) null,
	"IsHTML" bit not null) ON 'PRIMARY'  

go

alter table "ac_EmailTemplates"
	add constraint "ac_EmailTemplates_PK" primary key clustered ("EmailTemplateId")   


go

/* Create new table "ac_EmailListUsers".                                                      */
/* "ac_EmailListUsers" : Table of ac_EmailListUsers                                           */
/* 	"EmailListId" : ID of the list the member belongs to                                      */
/* 	"Email" : Email address of list member                                                    */
/* 	"SignupDate" : Date and time the user signed up for the list                              */
/* 	"SignupIP" : IP used to sign the user up to the list                                      */
/* 	"LastSendDate" : Last time an email was sent to this member                               */
/* 	"FailureCount" : Number of times send to this address failed                              */  
create table "ac_EmailListUsers" ( 
	"EmailListId" int not null,
	"Email" nvarchar(255) not null,
	"SignupDate" datetime not null,
	"SignupIP" varchar(39) null,
	"LastSendDate" datetime null,
	"FailureCount" smallint not null) ON 'PRIMARY'  

go

alter table "ac_EmailListUsers"
	add constraint "ac_EmailListUsers_PK" primary key clustered ("EmailListId", "Email")   


go

/* Create new table "ac_EmailListSignups".                                                    */
/* "ac_EmailListSignups" : Table of ac_EmailListSignups                                       */
/* 	"EmailListSignupId" : Unique ID of the signup request                                     */
/* 	"EmailListId" : Email list the customer wishes to be added to                             */
/* 	"Email" : Email address of the customer                                                   */
/* 	"SignupDate" : Date and time of the signup request                                        */  
create table "ac_EmailListSignups" ( 
	"EmailListSignupId" int identity not null,
	"EmailListId" int not null,
	"Email" nvarchar(255) not null,
	"SignupDate" datetime not null) ON 'PRIMARY'  

go

alter table "ac_EmailListSignups"
	add constraint "ac_EmailListSignups_PK" primary key clustered ("EmailListSignupId")   


go

/* Create new table "ac_EmailLists".                                                          */
/* "ac_EmailLists" : Table of ac_EmailLists                                                   */  
create table "ac_EmailLists" ( 
	"EmailListId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"Description" nvarchar(255) null,
	"IsPublic" bit not null,
	"SignupRuleId" smallint not null,
	"SignupEmailTemplateId" int null,
	"LastSendDate" datetime null) ON 'PRIMARY'  

go

alter table "ac_EmailLists"
	add constraint "ac_EmailLists_PK" primary key clustered ("EmailListId")   


go

/* Create new table "ac_Downloads".                                                           */
/* "ac_Downloads" : Table of ac_Downloads                                                     */  
create table "ac_Downloads" ( 
	"DownloadId" int identity not null,
	"OrderItemDigitalGoodId" int not null,
	"DownloadDate" datetime not null,
	"RemoteAddr" nvarchar(39) not null,
	"UserAgent" nvarchar(255) not null,
	"Referrer" nvarchar(255) not null) ON 'PRIMARY'  

go

alter table "ac_Downloads"
	add constraint "ac_Downloads_PK" primary key nonclustered ("DownloadId")   


go

/* Create new table "ac_DigitalGoods".                                                        */
/* "ac_DigitalGoods" : Table of ac_DigitalGoods                                               */
/* 	"DigitalGoodId" : Unique ID of the digital good                                           */
/* 	"StoreId" : Store that contains the digital good                                          */
/* 	"Name" : Name of the digital good                                                         */
/* 	"FileName" : Name of the file to save as when downloaded                                  */
/* 	"FileSize" : Size of the file (in bytes)                                                  */
/* 	"MaxDownloads" : Maximum number of times this file can be downloaded, or 0 for no limit.  */
/* 	"DownloadTimeout" : Indicates when download ability for the digital good will time out, relative to the first download. */
/* 	"ActivationTimeout" : Indicates when download ability for the digital good will time out, relative to the activation (purchase) time. */
/* 	"MediaKey" : Key required to unzip or open the download.                                  */
/* 	"ServerFileName" : Name of the file on the server associated with this digital good       */
/* 	"EnableSerialKeys" : Indicates whether the digital good supports serial keys              */
/* 	"SerialKeyProviderId" : Fully qualified .NET class ID of the serial key provider          */
/* 	"SerialKeyConfigData" : Serial key provider specific configuration data                   */
/* 	"ActivationModeId" : Indicates when a download should be activated: 0 = manual activation, 1 = activate on order, 2 = activate on paid order. */
/* 	"ActivationEmailId" : ID of email template that should be sent at activation              */
/* 	"FulfillmentModeId" : Indicates when the download should be assigned a serial key, 0 = manual fulfillment, 1 = fulfill on order, 2 = fulfill on paid order. */
/* 	"FulfillmentEmailId" : ID of email template that should be sent at fulfillment            */
/* 	"ReadmeId" : ReadmeId is of ac_DigitalGoods                                               */
/* 	"LicenseAgreementId" : LicenseAgreementId is of ac_DigitalGoods                           */
/* 	"LicenseAgreementModeId" : LicenseAgreementModeId is of ac_DigitalGoods                   */  
create table "ac_DigitalGoods" ( 
	"DigitalGoodId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"FileName" nvarchar(100) null,
	"FileSize" int not null,
	"MaxDownloads" tinyint null,
	"DownloadTimeout" nvarchar(15) null,
	"ActivationTimeout" nvarchar(15) null,
	"MediaKey" nvarchar(100) null,
	"ServerFileName" varchar(255) null,
	"EnableSerialKeys" bit not null,
	"SerialKeyProviderId" varchar(255) null,
	"SerialKeyConfigData" nvarchar(4000) null,
	"ActivationModeId" tinyint not null,
	"ActivationEmailId" int null,
	"FulfillmentModeId" tinyint not null,
	"FulfillmentEmailId" int null,
	"ReadmeId" int null,
	"LicenseAgreementId" int null,
	"LicenseAgreementModeId" tinyint not null) ON 'PRIMARY'  

go

alter table "ac_DigitalGoods"
	add constraint "ac_DigitalGoods_PK" primary key clustered ("DigitalGoodId")   


go

/* Create new table "ac_CustomFields".                                                        */
/* "ac_CustomFields" : Table of ac_CustomFields                                               */  
create table "ac_CustomFields" ( 
	"CustomFieldId" int identity not null,
	"StoreId" int not null,
	"TableName" nvarchar(50) not null,
	"ForeignKeyId" int not null,
	"FieldName" nvarchar(255) not null,
	"FieldValue" nvarchar(4000) not null) ON 'PRIMARY'  

go

alter table "ac_CustomFields"
	add constraint "ac_CustomFields_PK" primary key clustered ("CustomFieldId")   


go

/* Create new table "ac_Currencies".                                                          */
/* "ac_Currencies" : Table of ac_Currencies                                                   */
/* 	"CurrencyId" : Unique ID of currency                                                      */
/* 	"StoreId" : Store that contains the currency                                              */
/* 	"Name" : Name of the currency                                                             */
/* 	"CurrencySymbol" : Symbol used to indicate the currency, such as $, USD, or US Dollars    */
/* 	"DecimalDigits" : Number of digits to display to the right of the decimal separator       */
/* 	"DecimalSeparator" : String used to seperate whole and fractional part of number          */
/* 	"GroupSeparator" : String used to seperate groups                                         */
/* 	"GroupSizes" : Comma separated list of group sizes                                        */
/* 	"NegativePattern" : Pattern used to display negative values, from 0 to 15                 */
/* 	"NegativeSign" : Symbol used to indicate a negative number, such as -                     */
/* 	"PositivePattern" : Pattern used to display positive values, from 0 to 3                  */
/* 	"ISOCode" : 3 letter ISO 4217 currency code                                               */
/* 	"ISOCodePattern" : Pattern used to include ISO code in the formatted display, from 0 to 3 */
/* 	"ExchangeRate" : Exchange rate for the currency, in the form of 1.0 of base = #.# of this currency */
/* 	"AutoUpdate" : Indicates whether exchange rates should be automatically updated           */
/* 	"LastUpdate" : Last date and time the rate was updated                                    */  
create table "ac_Currencies" ( 
	"CurrencyId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(50) not null,
	"CurrencySymbol" nvarchar(40) null,
	"DecimalDigits" int not null,
	"DecimalSeparator" nvarchar(4) null,
	"GroupSeparator" nvarchar(4) null,
	"GroupSizes" varchar(8) null,
	"NegativePattern" tinyint not null,
	"NegativeSign" varchar(4) null,
	"PositivePattern" tinyint not null,
	"ISOCode" varchar(3) not null,
	"ISOCodePattern" tinyint null,
	"ExchangeRate" decimal(12,4) default 1 not null,
	"AutoUpdate" bit not null,
	"LastUpdate" datetime null) ON 'PRIMARY'  

go

alter table "ac_Currencies"
	add constraint "ac_Currencies_PK" primary key clustered ("CurrencyId")   


go

/* Create new table "ac_CouponShipMethods".                                                   */
/* "ac_CouponShipMethods" : Table of ac_CouponShipMethods                                     */  
create table "ac_CouponShipMethods" ( 
	"CouponId" int not null,
	"ShipMethodId" int not null) ON 'PRIMARY'  

go

alter table "ac_CouponShipMethods"
	add constraint "ac_CouponShipMethods_PK" primary key clustered ("ShipMethodId", "CouponId")   


go

/* Create new table "ac_Coupons".                                                             */
/* "ac_Coupons" : Table of ac_Coupons                                                         */
/* 	"CouponId" : Unique ID of the coupon                                                      */
/* 	"StoreId" : ID of the store                                                               */
/* 	"AllowCombine" : Indicates whether or not the coupon can be combined with others in the same order */  
create table "ac_Coupons" ( 
	"CouponId" int identity not null,
	"StoreId" int not null,
	"CouponTypeId" tinyint null,
	"Name" nvarchar(100) not null,
	"CouponCode" nvarchar(50) not null,
	"DiscountAmount" decimal(12,4) not null,
	"IsPercent" bit not null,
	"MaxValue" decimal(12,4) not null,
	"MinPurchase" decimal(12,4) not null,
	"MinQuantity" smallint not null,
	"MaxQuantity" smallint not null,
	"QuantityInterval" smallint not null,
	"MaxUses" smallint not null,
	"MaxUsesPerCustomer" smallint not null,
	"StartDate" datetime null,
	"EndDate" datetime null,
	"ProductRuleId" tinyint not null,
	"AllowCombine" bit not null) ON 'PRIMARY'  

go

alter table "ac_Coupons"
	add constraint "ac_Coupons_PK" primary key clustered ("CouponId")   


go

/* Create new table "ac_CouponGroups".                                                        */
/* "ac_CouponGroups" : Table of ac_CouponGroups                                               */  
create table "ac_CouponGroups" ( 
	"CouponId" int not null,
	"GroupId" int not null) ON 'PRIMARY'  

go

alter table "ac_CouponGroups"
	add constraint "ac_CouponGroups_PK" primary key clustered ("CouponId", "GroupId")   


go

/* Create new table "ac_CouponProducts".                                                      */
/* "ac_CouponProducts" : Table of ac_CouponProducts                                           */  
create table "ac_CouponProducts" ( 
	"CouponId" int not null,
	"ProductId" int not null) ON 'PRIMARY'  

go

alter table "ac_CouponProducts"
	add constraint "ac_CouponProducts_PK" primary key clustered ("CouponId", "ProductId")   


go

/* Create new table "ac_CouponCombos".                                                        */
/* "ac_CouponCombos" : Table of ac_CouponCombos                                               */  
create table "ac_CouponCombos" ( 
	"CouponId" int not null,
	"ComboCouponId" int not null) ON 'PRIMARY'  

go

alter table "ac_CouponCombos"
	add constraint "ac_CouponCombos_PK" primary key clustered ("CouponId", "ComboCouponId")   


go

/* Create new table "ac_Countries".                                                           */
/* "ac_Countries" : Table of ac_Countries                                                     */  
create table "ac_Countries" ( 
	"CountryCode" char(2) not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"AddressFormat" nvarchar(255) null) ON 'PRIMARY'  

go

alter table "ac_Countries"
	add constraint "ac_Countries_PK" primary key clustered ("CountryCode")   


go

/* Create new table "ac_CategoryVolumeDiscounts".                                             */
/* "ac_CategoryVolumeDiscounts" : Table of ac_CategoryVolumeDiscounts                         */  
create table "ac_CategoryVolumeDiscounts" ( 
	"CategoryId" int not null,
	"VolumeDiscountId" int not null) ON 'PRIMARY'  

go

alter table "ac_CategoryVolumeDiscounts"
	add constraint "ac_CategoryVolumeDiscounts_PK" primary key nonclustered ("CategoryId", "VolumeDiscountId")   


go

/* Create new table "ac_CategoryParents".                                                     */
/* "ac_CategoryParents" : Table of ac_CategoryParents                                         */  
create table "ac_CategoryParents" ( 
	"CategoryId" int not null,
	"ParentId" int not null,
	"ParentLevel" tinyint null,
	"ParentNumber" tinyint null) ON 'PRIMARY'  

go

alter table "ac_CategoryParents"
	add constraint "ac_CategoryParents_PK" primary key clustered ("CategoryId", "ParentId")   


go

/* Create new table "ac_Categories".                                                          */
/* "ac_Categories" : Table of ac_Categories                                                   */
/* 	"CategoryId" : Unique ID of the category.                                                 */
/* 	"StoreId" : ID of the store that contains the category.                                   */
/* 	"ParentId" : ID of the parent category, or 0 if this is a top level category.             */
/* 	"Name" : Name of the category.                                                            */
/* 	"Summary" : Brief description of the category.                                            */
/* 	"Description" : Detailed description of the category.                                     */
/* 	"ThumbnailUrl" : URL of the thumbnail image to use for this item.                         */
/* 	"ThumbnailAltText" : Alternate text to use with the thumbnail image, or blank if the name should be used. */
/* 	"DisplayPage" : Display page used to show the category, if different from the store default. */
/* 	"Theme" : Theme used to display the category, if different from the store default.        */
/* 	"HtmlHead" : Content to add to the HEAD portion of the HTML display page                  */
/* 	"VisibilityId" : Indicates the visibility of this item.                                   */  
create table "ac_Categories" ( 
	"CategoryId" int identity not null,
	"StoreId" int not null,
	"ParentId" int not null,
	"Name" nvarchar(100) not null,
	"Summary" nvarchar(1024) null,
	"Description" ntext null,
	"ThumbnailUrl" varchar(255) null,
	"ThumbnailAltText" nvarchar(255) null,
	"DisplayPage" varchar(100) null,
	"Theme" varchar(100) null,
	"HtmlHead" ntext null,
	"VisibilityId" tinyint not null) ON 'PRIMARY'  

go

alter table "ac_Categories"
	add constraint "ac_Categories_PK" primary key clustered ("CategoryId")   


go

/* Create new table "ac_CatalogNodes".                                                        */
/* "ac_CatalogNodes" : Table of ac_CatalogNodes                                               */
/* 	"CategoryId" : Id of the Category                                                         */
/* 	"CatalogNodeId" : Id of the associated object                                             */
/* 	"CatalogNodeTypeId" : Type of the associated object                                       */
/* 	"OrderBy" : Default sort order of the object within the category                          */  
create table "ac_CatalogNodes" ( 
	"CategoryId" int not null,
	"CatalogNodeId" int not null,
	"CatalogNodeTypeId" tinyint not null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_CatalogNodes"
	add constraint "ac_CatalogNodes_PK" primary key clustered ("CatalogNodeId", "CategoryId", "CatalogNodeTypeId")   


go

/* Create new table "ac_BasketShipments".                                                     */
/* "ac_BasketShipments" : Table of ac_BasketShipments                                         */  
create table "ac_BasketShipments" ( 
	"BasketShipmentId" int identity not null,
	"BasketId" int not null,
	"WarehouseId" int null,
	"ShipMethodId" int null,
	"AddressId" int null,
	"ShipMessage" nvarchar(255) null) ON 'PRIMARY'  

go

alter table "ac_BasketShipments"
	add constraint "ac_BasketShipments_PK" primary key clustered ("BasketShipmentId")   


go

/* Create new table "ac_Baskets".                                                             */
/* "ac_Baskets" : Table of ac_Baskets                                                         */  
create table "ac_Baskets" ( 
	"BasketId" int identity not null,
	"UserId" int not null,
	"ContentHash" nvarchar(32) null) ON 'PRIMARY'  

go

alter table "ac_Baskets"
	add constraint "ac_Baskets_PK" primary key clustered ("BasketId")   


go

/* Create new table "ac_BasketItems".                                                         */
/* "ac_BasketItems" : Table of ac_BasketItems                                                 */
/* 	"TaxRate" : The total tax rate percentage applied to this item.                           */
/* 	"TaxAmount" : The total tax amount applied to this item.                                  */
/* 	"KitList" : Comma delimited list of kit products that are associated with this item.      */
/* 	"CustomFields" : Additional data tied to this item.                                       */  
create table "ac_BasketItems" ( 
	"BasketItemId" int identity not null,
	"ParentItemId" int not null,
	"BasketId" int not null,
	"BasketShipmentId" int null,
	"ProductId" int not null,
	"OptionList" varchar(255) null,
	"TaxCodeId" int null,
	"Name" nvarchar(255) not null,
	"Sku" nvarchar(100) null,
	"Price" decimal(12,4) not null,
	"Weight" decimal(12,4) not null,
	"Quantity" smallint not null,
	"LineMessage" nvarchar(255) null,
	"OrderItemTypeId" smallint not null,
	"OrderBy" smallint default 0 not null,
	"WrapStyleId" int null,
	"GiftMessage" nvarchar(255) null,
	"WishlistItemId" int null,
	"ShippableId" tinyint not null,
	"LastModifiedDate" datetime not null,
	"TaxRate" decimal(12,4) not null,
	"TaxAmount" decimal(12,4) not null,
	"KitList" varchar(255) null,
	"CustomFields" nvarchar(4000) null) ON 'PRIMARY'  

go

alter table "ac_BasketItems"
	add constraint "ac_BasketItems_PK" primary key clustered ("BasketItemId")   


go

/* Create new table "ac_BasketItemInputs".                                                    */
/* "ac_BasketItemInputs" : Table of ac_BasketItemInputs                                       */  
create table "ac_BasketItemInputs" ( 
	"BasketItemInputId" int identity not null,
	"BasketItemId" int not null,
	"InputFieldId" int not null,
	"InputValue" nvarchar(4000) not null) ON 'PRIMARY'  

go

alter table "ac_BasketItemInputs"
	add constraint "ac_BasketItemInputs_PK" primary key clustered ("BasketItemInputId")   


go

/* Create new table "ac_BasketCoupons".                                                       */
/* "ac_BasketCoupons" : Table of ac_BasketCoupons                                             */  
create table "ac_BasketCoupons" ( 
	"BasketId" int not null,
	"CouponId" int not null,
	"AppliedDate" datetime not null) ON 'PRIMARY'  

go

alter table "ac_BasketCoupons"
	add constraint "ac_BasketCoupons_PK" primary key clustered ("CouponId", "BasketId")   


go

/* Create new table "ac_BannedIPs".                                                           */
/* "ac_BannedIPs" : Table of ac_BannedIPs                                                     */
/* 	"BannedIPId" : Unique id of the banned IP range.                                          */
/* 	"StoreId" : ID of the store that bans this IP range.                                      */
/* 	"IPRangeStart" : Starting IP number of the banned range.                                  */
/* 	"IPRangeEnd" : Ending IP number of the banned range.                                      */
/* 	"Comment" : A comment regarding the banned range.                                         */  
create table "ac_BannedIPs" ( 
	"BannedIPId" int identity not null,
	"StoreId" int not null,
	"IPRangeStart" bigint not null,
	"IPRangeEnd" bigint not null,
	"Comment" nvarchar(100) null) ON 'PRIMARY'  

go

alter table "ac_BannedIPs"
	add constraint "ac_BannedIPs_PK" primary key clustered ("BannedIPId")   


go

/* Create new table "ac_AuditEvents".                                                         */
/* "ac_AuditEvents" : Table of ac_AuditEvents                                                 */
/* 	"AuditEventId" : Unique ID of the audit event                                             */
/* 	"StoreId" : ID of the store that this event belongs to                                    */
/* 	"EventDate" : Date and time of the audit event                                            */
/* 	"EventTypeId" : Type of the event being audited                                           */
/* 	"Successful" : True if the action was successful; false otherwise                         */
/* 	"UserId" : ID of the user who requested the action                                        */
/* 	"RelatedId" : ID of any data related to the requested action                              */
/* 	"RemoteIP" : Remote IP of the user who requested the action                               */
/* 	"Comment" : Comment or note about the event                                               */  
create table "ac_AuditEvents" ( 
	"AuditEventId" int identity not null,
	"StoreId" int not null,
	"EventDate" datetime not null,
	"EventTypeId" int not null,
	"Successful" bit not null,
	"UserId" int null,
	"RelatedId" int null,
	"RemoteIP" varchar(39) null,
	"Comment" nvarchar(4000) null) ON 'PRIMARY'  

go

alter table "ac_AuditEvents"
	add constraint "ac_AuditLog_PK" primary key nonclustered ("AuditEventId")   


go

/* Create new table "ac_OptionChoices".                                                       */
/* "ac_OptionChoices" : Table of ac_OptionChoices                                             */
/* 	"OptionChoiceId" : Unique ID of the option choice                                         */
/* 	"OptionId" : Option this choice belongs to                                                */
/* 	"Name" : Name of the option choice                                                        */
/* 	"ThumbnailUrl" : Thumbnail image to display for the option choice                         */
/* 	"ImageUrl" : Product sized image to represent the option choice                           */
/* 	"PriceModifier" : Amount that this option choice modifies the base product price          */
/* 	"CogsModifier" : CogsModifier is of ac_OptionChoices                                      */
/* 	"WeightModifier" : Amount that this option choice modifies the base product weight        */
/* 	"SkuModifier" : String appended to the base SKU when this option is selected              */
/* 	"OrderBy" : Sort order of the choice within the option                                    */  
create table "ac_OptionChoices" ( 
	"OptionChoiceId" int identity not null,
	"OptionId" int not null,
	"Name" nvarchar(100) not null,
	"ThumbnailUrl" varchar(255) null,
	"ImageUrl" varchar(255) null,
	"PriceModifier" decimal(10,2) null,
	"CogsModifier" decimal(10,2) null,
	"WeightModifier" decimal(10,2) null,
	"SkuModifier" nvarchar(20) null,
	"OrderBy" smallint default 0 not null) ON 'PRIMARY'  

go

alter table "ac_OptionChoices"
	add constraint "ac_AttributeOptions_PK" primary key clustered ("OptionChoiceId")   


go

/* Create new table "ac_Affiliates".                                                          */
/* "ac_Affiliates" : Table of ac_Affiliates                                                   */
/* 	"AffiliateId" : Unique ID of the affiliate.                                               */
/* 	"StoreId" : ID of the store that the affiliate belongs to.                                */
/* 	"Name" : Name of the affiliate.                                                           */
/* 	"PayeeName" : Name that should be printed on a check for affiliate payments.              */
/* 	"FirstName" : First name of the contact person for the affiliate.                         */
/* 	"LastName" : Last name of the contact person for the affiliate.                           */
/* 	"Company" : Company name for the affiliate.                                               */
/* 	"Address1" : Street address of the affiliate.                                             */
/* 	"Address2" : Street address of the affiliate.                                             */
/* 	"City" : City for the afffiliate.                                                         */
/* 	"Province" : State or province for the affiliate.                                         */
/* 	"PostalCode" : ZIP or postal code for the affiliate.                                      */
/* 	"CountryCode" : Country code for the affiliate.                                           */
/* 	"PhoneNumber" : Phone number for the affiliate.                                           */
/* 	"FaxNumber" : Fax number for the affiliate.                                               */
/* 	"MobileNumber" : Mobile or cellular number for the affiliate.                             */
/* 	"WebsiteUrl" : Website URL for the affiliate.                                             */
/* 	"Email" : Email address for the affiliate.                                                */
/* 	"CommissionRate" : Indicates the commission rate on sales.                                */
/* 	"CommissionIsPercent" : Indicates whether commission rate is a percentage of sale.        */
/* 	"CommissionOnTotal" : Indicates whether commission is calculated on total (true) or subtotal (false). */
/* 	"ReferralDays" : Number of days an affiliate referral is valid for commissions.           */  
create table "ac_Affiliates" ( 
	"AffiliateId" int identity not null,
	"StoreId" int not null,
	"Name" nvarchar(100) not null,
	"PayeeName" nvarchar(100) null,
	"FirstName" nvarchar(30) null,
	"LastName" nvarchar(50) null,
	"Company" nvarchar(50) null,
	"Address1" nvarchar(100) null,
	"Address2" nvarchar(100) null,
	"City" nvarchar(50) null,
	"Province" nvarchar(50) null,
	"PostalCode" nvarchar(15) null,
	"CountryCode" char(2) null,
	"PhoneNumber" nvarchar(50) null,
	"FaxNumber" nvarchar(50) null,
	"MobileNumber" nvarchar(50) null,
	"WebsiteUrl" nvarchar(255) null,
	"Email" nvarchar(255) null,
	"CommissionRate" decimal(9,4) not null,
	"CommissionIsPercent" bit not null,
	"CommissionOnTotal" bit not null,
	"ReferralDays" smallint not null) ON 'PRIMARY'  

go

alter table "ac_Affiliates"
	add constraint "ac_Affiliates_PK" primary key clustered ("AffiliateId")   


go

/* Create new table "ac_Addresses".                                                           */
/* "ac_Addresses" : Table of ac_Addresses                                                     */  
create table "ac_Addresses" ( 
	"AddressId" int identity not null,
	"UserId" int not null,
	"Nickname" nvarchar(100) null,
	"FirstName" nvarchar(30) null,
	"LastName" nvarchar(50) null,
	"Company" nvarchar(50) null,
	"Address1" nvarchar(255) null,
	"Address2" nvarchar(255) null,
	"City" nvarchar(50) null,
	"Province" nvarchar(50) null,
	"PostalCode" nvarchar(15) null,
	"CountryCode" char(2) null,
	"Phone" nvarchar(50) null,
	"Fax" nvarchar(50) null,
	"Email" nvarchar(255) null,
	"Residence" bit not null,
	"Validated" bit not null) ON 'PRIMARY'  

go

alter table "ac_Addresses"
	add constraint "ac_Addresses_PK" primary key clustered ("AddressId")   


go

/* Add foreign key constraints to table "ac_ProductProductTemplates".                         */
alter table "ac_ProductProductTemplates"
	add constraint "ac_Products_ac_ProductProductTemplates_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

alter table "ac_ProductProductTemplates"
	add constraint "ac_ProductTemplates_ac_ProductProductTemplates_FK1" foreign key (
		"ProductTemplateId")
	 references "ac_ProductTemplates" (
		"ProductTemplateId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Kits".                                            */
alter table "ac_Kits"
	add constraint "ac_Products_ac_Kits_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_TaxRuleGroups".                                   */
alter table "ac_TaxRuleGroups"
	add constraint "ac_TaxRules_ac_TaxRuleGroups_FK1" foreign key (
		"TaxRuleId")
	 references "ac_TaxRules" (
		"TaxRuleId") on update no action on delete cascade  

go

alter table "ac_TaxRuleGroups"
	add constraint "ac_Groups_ac_TaxRuleGroups_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_TaxRuleShipZones".                                */
alter table "ac_TaxRuleShipZones"
	add constraint "ac_ShipZones_ac_TaxRuleShipZones_FK1" foreign key (
		"ShipZoneId")
	 references "ac_ShipZones" (
		"ShipZoneId") on update no action on delete cascade  

go

alter table "ac_TaxRuleShipZones"
	add constraint "ac_TaxRules_ac_TaxRuleShipZones_FK1" foreign key (
		"TaxRuleId")
	 references "ac_TaxRules" (
		"TaxRuleId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ProductCustomFields".                             */
alter table "ac_ProductCustomFields"
	add constraint "ac_Products_ac_ProductCustomFields_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ProductOptions".                                  */
alter table "ac_ProductOptions"
	add constraint "ac_Products_ac_ProductOptions_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

alter table "ac_ProductOptions"
	add constraint "ac_Options_ac_ProductOptions_FK1" foreign key (
		"OptionId")
	 references "ac_Options" (
		"OptionId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ProductDigitalGoods".                             */
alter table "ac_ProductDigitalGoods"
	add constraint "ac_Products_ac_DigitalGoods_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

alter table "ac_ProductDigitalGoods"
	add constraint "ac_DigitalGoods_ac_ProductDigitalGoods_FK1" foreign key (
		"DigitalGoodId")
	 references "ac_DigitalGoods" (
		"DigitalGoodId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_UpsellProducts".                                  */
alter table "ac_UpsellProducts"
	add constraint "ac_Products_ac_UpsellProducts_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_GroupRoles".                                      */
alter table "ac_GroupRoles"
	add constraint "ac_Groups_ac_GroupRoles_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action on delete cascade  

go

alter table "ac_GroupRoles"
	add constraint "ac_Roles_ac_GroupRoles_FK1" foreign key (
		"RoleId")
	 references "ac_Roles" (
		"RoleId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_RelatedProducts".                                 */
alter table "ac_RelatedProducts"
	add constraint "ac_Products_ac_RelatedProducts_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete no action  

go

alter table "ac_RelatedProducts"
	add constraint "ac_Products_ac_RelatedProducts_FK2" foreign key (
		"ChildProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_ErrorMessages".                                   */
alter table "ac_ErrorMessages"
	add constraint "ac_Stores_ac_ErrorMessages_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Subscriptions".                                   */
alter table "ac_Subscriptions"
	add constraint "ac_Users_ac_Subscriptions_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action on delete cascade  

go

alter table "ac_Subscriptions"
	add constraint "ac_SubscriptionPlans_ac_Subscriptions_FK1" foreign key (
		"ProductId")
	 references "ac_SubscriptionPlans" (
		"ProductId") on update no action on delete cascade  

go

alter table "ac_Subscriptions"
	add constraint "ac_OrderItems_ac_Subscriptions_FK1" foreign key (
		"OrderItemId")
	 references "ac_OrderItems" (
		"OrderItemId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Subscriptions" nocheck constraint "ac_OrderItems_ac_Subscriptions_FK1" 

go

alter table "ac_Subscriptions"
	add constraint "ac_Transactions_ac_Subscriptions_FK1" foreign key (
		"TransactionId")
	 references "ac_Transactions" (
		"TransactionId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_SubscriptionPlans".                               */
alter table "ac_SubscriptionPlans"
	add constraint "ac_Products_ac_SubscriptionPlans_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

alter table "ac_SubscriptionPlans"
	add constraint "ac_Groups_ac_SubscriptionPlans_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_SubscriptionPlans" nocheck constraint "ac_Groups_ac_SubscriptionPlans_FK1" 

go

alter table "ac_SubscriptionPlans"
	add constraint "ac_TaxCodes_ac_SubscriptionPlans_FK1" foreign key (
		"TaxCodeId")
	 references "ac_TaxCodes" (
		"TaxCodeId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_SubscriptionPlans" nocheck constraint "ac_TaxCodes_ac_SubscriptionPlans_FK1" 

go

/* Add foreign key constraints to table "ac_WrapStyles".                                      */
alter table "ac_WrapStyles"
	add constraint "ac_TaxCodes_ac_WrapStyles_FK1" foreign key (
		"TaxCodeId")
	 references "ac_TaxCodes" (
		"TaxCodeId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_WrapStyles" nocheck constraint "ac_TaxCodes_ac_WrapStyles_FK1" 

go

alter table "ac_WrapStyles"
	add constraint "ac_WrapGroups_ac_WrapStyles_FK1" foreign key (
		"WrapGroupId")
	 references "ac_WrapGroups" (
		"WrapGroupId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_WrapGroups".                                      */
alter table "ac_WrapGroups"
	add constraint "ac_Stores_ac_WrapGroups_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Wishlists".                                       */
alter table "ac_Wishlists"
	add constraint "ac_Users_ac_Wishlists_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_WishlistItems".                                   */
alter table "ac_WishlistItems"
	add constraint "ac_Products_ac_WishlistItems_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete no action  

go

alter table "ac_WishlistItems"
	add constraint "ac_Wishlists_ac_WishlistItems_FK1" foreign key (
		"WishlistId")
	 references "ac_Wishlists" (
		"WishlistId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_WishlistItemInputs".                              */
alter table "ac_WishlistItemInputs"
	add constraint "ac_InputFields_ac_WishlistItemInputs_FK1" foreign key (
		"InputFieldId")
	 references "ac_InputFields" (
		"InputFieldId") on update no action on delete cascade  

go

alter table "ac_WishlistItemInputs"
	add constraint "ac_WishlistItems_ac_WishlistItemInputs_FK1" foreign key (
		"WishlistItemId")
	 references "ac_WishlistItems" (
		"WishlistItemId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Webpages".                                        */
alter table "ac_Webpages"
	add constraint "ac_Stores_ac_Webpages_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Warehouses".                                      */
alter table "ac_Warehouses"
	add constraint "ac_Countries_ac_Warehouses_FK1" foreign key (
		"CountryCode")
	 references "ac_Countries" (
		"CountryCode") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Warehouses" nocheck constraint "ac_Countries_ac_Warehouses_FK1" 

go

alter table "ac_Warehouses"
	add constraint "ac_Stores_ac_Warehouses_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_VolumeDiscounts".                                 */
alter table "ac_VolumeDiscounts"
	add constraint "ac_Stores_ac_Discounts_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_VolumeDiscountGroups".                            */
alter table "ac_VolumeDiscountGroups"
	add constraint "ac_Groups_ac_VolumeDiscountGroups_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action on delete cascade  

go

alter table "ac_VolumeDiscountGroups"
	add constraint "ac_VolumeDiscounts_ac_VolumeDiscountGroups_FK1" foreign key (
		"VolumeDiscountId")
	 references "ac_VolumeDiscounts" (
		"VolumeDiscountId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_VolumeDiscountLevels".                            */
alter table "ac_VolumeDiscountLevels"
	add constraint "ac_Discounts_ac_DiscountMatrix_FK1" foreign key (
		"VolumeDiscountId")
	 references "ac_VolumeDiscounts" (
		"VolumeDiscountId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Vendors".                                         */
alter table "ac_Vendors"
	add constraint "ac_Stores_ac_Vendors_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_UserSettings".                                    */
alter table "ac_UserSettings"
	add constraint "ac_Users_ac_UserSettings_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Users".                                           */
alter table "ac_Users"
	add constraint "ac_Affiliates_ac_Users_FK1" foreign key (
		"AffiliateId")
	 references "ac_Affiliates" (
		"AffiliateId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Users" nocheck constraint "ac_Affiliates_ac_Users_FK1" 

go

alter table "ac_Users"
	add constraint "ac_Stores_ac_Users_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_UserGroups".                                      */
alter table "ac_UserGroups"
	add constraint "ac_Groups_ac_UserGroups_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action on delete cascade  

go

alter table "ac_UserGroups"
	add constraint "ac_Users_ac_UserGroups_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action on delete cascade  

go

alter table "ac_UserGroups"
	add constraint "ac_Subscriptions_ac_UserGroups_FK1" foreign key (
		"SubscriptionId")
	 references "ac_Subscriptions" (
		"SubscriptionId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_UserPersonalization".                             */
alter table "ac_UserPersonalization"
	add constraint "ac_Paths_ac_UserPersonalization_FK1" foreign key (
		"PersonalizationPathId")
	 references "ac_PersonalizationPaths" (
		"PersonalizationPathId") on update no action on delete cascade  

go

alter table "ac_UserPersonalization"
	add constraint "ac_Users_ac_UserPersonalization_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_UserPasswords".                                   */
alter table "ac_UserPasswords"
	add constraint "ac_Users_ac_UserPasswords_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Transactions".                                    */
alter table "ac_Transactions"
	add constraint "ac_PaymentGateways_ac_Transactions_FK1" foreign key (
		"PaymentGatewayId")
	 references "ac_PaymentGateways" (
		"PaymentGatewayId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Transactions" nocheck constraint "ac_PaymentGateways_ac_Transactions_FK1" 

go

alter table "ac_Transactions"
	add constraint "ac_Payments_ac_Transactions_FK1" foreign key (
		"PaymentId")
	 references "ac_Payments" (
		"PaymentId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_TrackingNumbers".                                 */
alter table "ac_TrackingNumbers"
	add constraint "ac_Shipments_ac_Tracking_FK1" foreign key (
		"OrderShipmentId")
	 references "ac_OrderShipments" (
		"OrderShipmentId") on update no action on delete cascade  

go

alter table "ac_TrackingNumbers"
	add constraint "ac_ShipGateways_ac_Tracking_FK1" foreign key (
		"ShipGatewayId")
	 references "ac_ShipGateways" (
		"ShipGatewayId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_TrackingNumbers" nocheck constraint "ac_ShipGateways_ac_Tracking_FK1" 

go

/* Add foreign key constraints to table "ac_TaxRuleTaxCodes".                                 */
alter table "ac_TaxRuleTaxCodes"
	add constraint "ac_TaxCodes_ac_TaxRuleTaxCodeAssn_FK1" foreign key (
		"TaxCodeId")
	 references "ac_TaxCodes" (
		"TaxCodeId") on update no action on delete cascade  

go

alter table "ac_TaxRuleTaxCodes"
	add constraint "ac_TaxRules_ac_TaxRuleTaxCodeAssn_FK1" foreign key (
		"TaxRuleId")
	 references "ac_TaxRules" (
		"TaxRuleId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_TaxRules".                                        */
alter table "ac_TaxRules"
	add constraint "ac_Countries_ac_TaxRules_FK1" foreign key (
		"CountryCode")
	 references "ac_Countries" (
		"CountryCode") on update no action on delete no action  

go

alter table "ac_TaxRules"
	add constraint "ac_Provinces_ac_TaxRules_FK1" foreign key (
		"ProvinceId")
	 references "ac_Provinces" (
		"ProvinceId") on update no action on delete no action  

go

alter table "ac_TaxRules"
	add constraint "ac_Stores_ac_TaxRules_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_TaxGateways".                                     */
alter table "ac_TaxGateways"
	add constraint "ac_Stores_ac_TaxGateways_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_TaxCodes".                                        */
alter table "ac_TaxCodes"
	add constraint "ac_Stores_ac_TaxCodes_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_StoreSettings".                                   */
alter table "ac_StoreSettings"
	add constraint "ac_Stores_ac_StoreSettings_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Specials".                                        */
alter table "ac_Specials"
	add constraint "ac_Products_ac_Specials_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId")  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Specials" nocheck constraint "ac_Products_ac_Specials_FK1" 

go

/* Add foreign key constraints to table "ac_SpecialGroups".                                   */
alter table "ac_SpecialGroups"
	add constraint "ac_Groups_ac_SpecialGroups_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action on delete cascade  

go

alter table "ac_SpecialGroups"
	add constraint "ac_Specials_ac_SpecialGroups_FK1" foreign key (
		"SpecialId")
	 references "ac_Specials" (
		"SpecialId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ShipZones".                                       */
alter table "ac_ShipZones"
	add constraint "ac_Stores_ac_ShipZones_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_ShipZoneProvinces".                               */
alter table "ac_ShipZoneProvinces"
	add constraint "ac_Provinces_ac_ShipZoneProvinces_FK1" foreign key (
		"ProvinceId")
	 references "ac_Provinces" (
		"ProvinceId") on update no action on delete cascade  

go

alter table "ac_ShipZoneProvinces"
	add constraint "ac_ShipZones_ac_ShipZoneProvinces_FK1" foreign key (
		"ShipZoneId")
	 references "ac_ShipZones" (
		"ShipZoneId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ShipZoneCountries".                               */
alter table "ac_ShipZoneCountries"
	add constraint "ac_Countries_ac_ShipZoneCountries_FK1" foreign key (
		"CountryCode")
	 references "ac_Countries" (
		"CountryCode") on update no action on delete cascade  

go

alter table "ac_ShipZoneCountries"
	add constraint "ac_ShipZones_ac_ShipZoneCountries_FK1" foreign key (
		"ShipZoneId")
	 references "ac_ShipZones" (
		"ShipZoneId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ShipRateMatrix".                                  */
alter table "ac_ShipRateMatrix"
	add constraint "ac_ShipMethods_ac_ShipMatrix_FK1" foreign key (
		"ShipMethodId")
	 references "ac_ShipMethods" (
		"ShipMethodId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ShipMethodWarehouses".                            */
alter table "ac_ShipMethodWarehouses"
	add constraint "ac_ShipMethods_ac_ShipMethodWarehouses_FK1" foreign key (
		"ShipMethodId")
	 references "ac_ShipMethods" (
		"ShipMethodId") on update no action on delete cascade  

go

alter table "ac_ShipMethodWarehouses"
	add constraint "ac_Warehouses_ac_ShipMethodWarehouses_FK1" foreign key (
		"WarehouseId")
	 references "ac_Warehouses" (
		"WarehouseId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ShipMethodShipZones".                             */
alter table "ac_ShipMethodShipZones"
	add constraint "ac_ShipMethods_ac_ShipMethodShipZones_FK1" foreign key (
		"ShipMethodId")
	 references "ac_ShipMethods" (
		"ShipMethodId") on update no action on delete cascade  

go

alter table "ac_ShipMethodShipZones"
	add constraint "ac_ShipZones_ac_ShipMethodShipZones_FK1" foreign key (
		"ShipZoneId")
	 references "ac_ShipZones" (
		"ShipZoneId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_ShipMethods".                                     */
alter table "ac_ShipMethods"
	add constraint "ac_ShipGateways_ac_ShipMethods_FK1" foreign key (
		"ShipGatewayId")
	 references "ac_ShipGateways" (
		"ShipGatewayId") on update no action on delete cascade  

go

alter table "ac_ShipMethods"
	add constraint "ac_Stores_ac_ShipMethods_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

alter table "ac_ShipMethods"
	add constraint "ac_TaxCodes_ac_ShipMethods_FK1" foreign key (
		"TaxCodeId")
	 references "ac_TaxCodes" (
		"TaxCodeId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_ShipMethods" nocheck constraint "ac_TaxCodes_ac_ShipMethods_FK1" 

go

/* Add foreign key constraints to table "ac_ShipMethodGroups".                                */
alter table "ac_ShipMethodGroups"
	add constraint "ac_Groups_ac_ShipMethodGroups_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action on delete no action  

go

alter table "ac_ShipMethodGroups"
	add constraint "ac_ShipMethods_ac_ShipMethodGroups_FK1" foreign key (
		"ShipMethodId")
	 references "ac_ShipMethods" (
		"ShipMethodId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_ShipGateways".                                    */
alter table "ac_ShipGateways"
	add constraint "ac_Stores_ac_ShipGateways_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_SharedPersonalization".                           */
alter table "ac_SharedPersonalization"
	add constraint "ac_Paths_ac_SharedPersonalization_FK1" foreign key (
		"PersonalizationPathId")
	 references "ac_PersonalizationPaths" (
		"PersonalizationPathId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_VendorGroups".                                    */
alter table "ac_VendorGroups"
	add constraint "ac_Groups_ac_VendorGroups_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action on delete no action  

go

alter table "ac_VendorGroups"
	add constraint "ac_Vendors_ac_VendorGroups_FK1" foreign key (
		"VendorId")
	 references "ac_Vendors" (
		"VendorId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Groups".                                          */
alter table "ac_Groups"
	add constraint "ac_Stores_ac_Groups_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Readmes".                                         */
alter table "ac_Readmes"
	add constraint "ac_Stores_ac_Readmes_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Provinces".                                       */
alter table "ac_Provinces"
	add constraint "ac_Countries_ac_Provinces_FK1" foreign key (
		"CountryCode")
	 references "ac_Countries" (
		"CountryCode") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Profiles".                                        */
alter table "ac_Profiles"
	add constraint "ac_Users_ac_Profiles_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ProductVolumeDiscounts".                          */
alter table "ac_ProductVolumeDiscounts"
	add constraint "ac_Products_ac_ProductDiscountAssn_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

alter table "ac_ProductVolumeDiscounts"
	add constraint "ac_Discounts_ac_ProductDiscountAssn_FK1" foreign key (
		"VolumeDiscountId")
	 references "ac_VolumeDiscounts" (
		"VolumeDiscountId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ProductVariants".                                 */
alter table "ac_ProductVariants"
	add constraint "ac_Products_ac_ProductVariations_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_ProductTemplates".                                */
alter table "ac_ProductTemplates"
	add constraint "ac_Stores_ac_ProductTemplates_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Products".                                        */
alter table "ac_Products"
	add constraint "ac_Manufacturers_ac_Products_FK1" foreign key (
		"ManufacturerId")
	 references "ac_Manufacturers" (
		"ManufacturerId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Products" nocheck constraint "ac_Manufacturers_ac_Products_FK1" 

go

alter table "ac_Products"
	add constraint "ac_Stores_ac_Products_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

alter table "ac_Products"
	add constraint "ac_TaxCodes_ac_Products_FK1" foreign key (
		"TaxCodeId")
	 references "ac_TaxCodes" (
		"TaxCodeId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Products" nocheck constraint "ac_TaxCodes_ac_Products_FK1" 

go

alter table "ac_Products"
	add constraint "ac_Vendors_ac_Products_FK1" foreign key (
		"VendorId")
	 references "ac_Vendors" (
		"VendorId") on update no action on delete no action  

go

alter table "ac_Products"
	add constraint "ac_Warehouses_ac_Products_FK1" foreign key (
		"WarehouseId")
	 references "ac_Warehouses" (
		"WarehouseId") on update no action on delete no action  

go

alter table "ac_Products"
	add constraint "ac_WrapGroups_ac_Products_FK1" foreign key (
		"WrapGroupId")
	 references "ac_WrapGroups" (
		"WrapGroupId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Products" nocheck constraint "ac_WrapGroups_ac_Products_FK1" 

go

/* Add foreign key constraints to table "ac_ProductReviews".                                  */
alter table "ac_ProductReviews"
	add constraint "ac_Products_ac_ProductReviews_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete no action  

go

alter table "ac_ProductReviews"
	add constraint "ac_ReviewerProfiles_ac_ProductReviews_FK1" foreign key (
		"ReviewerProfileId")
	 references "ac_ReviewerProfiles" (
		"ReviewerProfileId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ProductKitComponents".                            */
alter table "ac_ProductKitComponents"
	add constraint "ac_KitComponents_ac_ProductKitComponents_FK1" foreign key (
		"KitComponentId")
	 references "ac_KitComponents" (
		"KitComponentId") on update no action on delete cascade  

go

alter table "ac_ProductKitComponents"
	add constraint "ac_Products_ac_ProductKitComponents_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ProductImages".                                   */
alter table "ac_ProductImages"
	add constraint "ac_Products_ac_ProductImages_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ProductTemplateFields".                           */
alter table "ac_ProductTemplateFields"
	add constraint "ac_InputFields_ac_ProductTemplateFields_FK1" foreign key (
		"InputFieldId")
	 references "ac_InputFields" (
		"InputFieldId") on update no action on delete cascade  

go

alter table "ac_ProductTemplateFields"
	add constraint "ac_Products_ac_ProductTemplateFields_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_ProductAssets".                                   */
alter table "ac_ProductAssets"
	add constraint "ac_Products_ac_ProductAssets_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_PersonalizationPaths".                            */
alter table "ac_PersonalizationPaths"
	add constraint "ac_Stores_ac_Paths_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Payments".                                        */
alter table "ac_Payments"
	add constraint "ac_Orders_ac_Payments_FK1" foreign key (
		"OrderId")
	 references "ac_Orders" (
		"OrderId") on update no action on delete cascade  

go

alter table "ac_Payments"
	add constraint "ac_PaymentMethods_ac_Payments_FK1" foreign key (
		"PaymentMethodId")
	 references "ac_PaymentMethods" (
		"PaymentMethodId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Payments" nocheck constraint "ac_PaymentMethods_ac_Payments_FK1" 

go

alter table "ac_Payments"
	add constraint "ac_Subscriptions_ac_Payments_FK1" foreign key (
		"SubscriptionId")
	 references "ac_Subscriptions" (
		"SubscriptionId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Payments" nocheck constraint "ac_Subscriptions_ac_Payments_FK1" 

go

/* Add foreign key constraints to table "ac_PaymentMethods".                                  */
alter table "ac_PaymentMethods"
	add constraint "ac_PaymentGateways_ac_PaymentMethods_FK1" foreign key (
		"PaymentGatewayId")
	 references "ac_PaymentGateways" (
		"PaymentGatewayId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_PaymentMethods" nocheck constraint "ac_PaymentGateways_ac_PaymentMethods_FK1" 

go

alter table "ac_PaymentMethods"
	add constraint "ac_Stores_ac_PaymentMethods_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_PaymentMethodGroups".                             */
alter table "ac_PaymentMethodGroups"
	add constraint "ac_PaymentMethods_ac_PaymentMethodsGroups_FK1" foreign key (
		"PaymentMethodId")
	 references "ac_PaymentMethods" (
		"PaymentMethodId") on update no action on delete cascade  

go

alter table "ac_PaymentMethodGroups"
	add constraint "ac_Groups_ac_PaymentMethodGroups_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_PaymentGateways".                                 */
alter table "ac_PaymentGateways"
	add constraint "ac_Stores_ac_PaymentGateways_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_PageViews".                                       */
alter table "ac_PageViews"
	add constraint "ac_Stores_ac_PageViews_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

alter table "ac_PageViews"
	add constraint "ac_Users_ac_PageViews_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId")  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_PageViews" nocheck constraint "ac_Users_ac_PageViews_FK1" 

go

/* Add foreign key constraints to table "ac_OrderStatusTriggers".                             */
alter table "ac_OrderStatusTriggers"
	add constraint "ac_OrderStatuses_ac_OrderStatusTriggers_FK1" foreign key (
		"OrderStatusId")
	 references "ac_OrderStatuses" (
		"OrderStatusId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_OrderStatuses".                                   */
alter table "ac_OrderStatuses"
	add constraint "ac_Stores_ac_OrderStatuses_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_OrderStatusEmails".                               */
alter table "ac_OrderStatusEmails"
	add constraint "ac_Emails_ac_OrderStatusEmails_FK1" foreign key (
		"EmailTemplateId")
	 references "ac_EmailTemplates" (
		"EmailTemplateId") on update no action on delete no action  

go

alter table "ac_OrderStatusEmails"
	add constraint "ac_OrderStatuses_ac_OrderStatusEmails_FK1" foreign key (
		"OrderStatusId")
	 references "ac_OrderStatuses" (
		"OrderStatusId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_OrderStatusActions".                              */
alter table "ac_OrderStatusActions"
	add constraint "ac_OrderStatuses_ac_OrderStatusActions_FK1" foreign key (
		"OrderStatusId")
	 references "ac_OrderStatuses" (
		"OrderStatusId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_OrderShipments".                                  */
alter table "ac_OrderShipments"
	add constraint "ac_Orders_ac_Shipments_FK1" foreign key (
		"OrderId")
	 references "ac_Orders" (
		"OrderId") on update no action on delete cascade  

go

alter table "ac_OrderShipments"
	add constraint "ac_ShipMethods_ac_OrderShipments_FK1" foreign key (
		"ShipMethodId")
	 references "ac_ShipMethods" (
		"ShipMethodId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_OrderShipments" nocheck constraint "ac_ShipMethods_ac_OrderShipments_FK1" 

go

alter table "ac_OrderShipments"
	add constraint "ac_Warehouses_ac_Shipments_FK1" foreign key (
		"WarehouseId")
	 references "ac_Warehouses" (
		"WarehouseId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_OrderShipments" nocheck constraint "ac_Warehouses_ac_Shipments_FK1" 

go

/* Add foreign key constraints to table "ac_Orders".                                          */
alter table "ac_Orders"
	add constraint "ac_Affiliates_ac_Orders_FK1" foreign key (
		"AffiliateId")
	 references "ac_Affiliates" (
		"AffiliateId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Orders" nocheck constraint "ac_Affiliates_ac_Orders_FK1" 

go

alter table "ac_Orders"
	add constraint "ac_OrderStatuses_ac_Orders_FK1" foreign key (
		"OrderStatusId")
	 references "ac_OrderStatuses" (
		"OrderStatusId") on update no action on delete no action  

go

alter table "ac_Orders"
	add constraint "ac_Stores_ac_Orders_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

alter table "ac_Orders"
	add constraint "ac_Users_ac_Orders_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Orders" nocheck constraint "ac_Users_ac_Orders_FK1" 

go

/* Add foreign key constraints to table "ac_OrderNotes".                                      */
alter table "ac_OrderNotes"
	add constraint "ac_Orders_ac_OrderNotes_FK1" foreign key (
		"OrderId")
	 references "ac_Orders" (
		"OrderId") on update no action on delete cascade  

go

alter table "ac_OrderNotes"
	add constraint "ac_Users_ac_OrderNotes_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_OrderNotes" nocheck constraint "ac_Users_ac_OrderNotes_FK1" 

go

/* Add foreign key constraints to table "ac_OrderItems".                                      */
alter table "ac_OrderItems"
	add constraint "ac_Orders_ac_OrderItems_FK1" foreign key (
		"OrderId")
	 references "ac_Orders" (
		"OrderId") on update no action on delete cascade  

go

alter table "ac_OrderItems"
	add constraint "ac_OrderShipments_ac_OrderItems_FK1" foreign key (
		"OrderShipmentId")
	 references "ac_OrderShipments" (
		"OrderShipmentId") on update no action on delete no action  

go

alter table "ac_OrderItems"
	add constraint "ac_Products_ac_OrderItems_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_OrderItems" nocheck constraint "ac_Products_ac_OrderItems_FK1" 

go

alter table "ac_OrderItems"
	add constraint "ac_TaxCodes_ac_OrderItems_FK1" foreign key (
		"TaxCodeId")
	 references "ac_TaxCodes" (
		"TaxCodeId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_OrderItems" nocheck constraint "ac_TaxCodes_ac_OrderItems_FK1" 

go

alter table "ac_OrderItems"
	add constraint "ac_WishlistItems_ac_OrderItems_FK1" foreign key (
		"WishlistItemId")
	 references "ac_WishlistItems" (
		"WishlistItemId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_OrderItems" nocheck constraint "ac_WishlistItems_ac_OrderItems_FK1" 

go

alter table "ac_OrderItems"
	add constraint "ac_WrapStyles_ac_OrderItems_FK1" foreign key (
		"WrapStyleId")
	 references "ac_WrapStyles" (
		"WrapStyleId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_OrderItems" nocheck constraint "ac_WrapStyles_ac_OrderItems_FK1" 

go

/* Add foreign key constraints to table "ac_OrderItemInputs".                                 */
alter table "ac_OrderItemInputs"
	add constraint "ac_OrderItems_ac_OrderItemInputs_FK1" foreign key (
		"OrderItemId")
	 references "ac_OrderItems" (
		"OrderItemId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_OrderItemDigitalGoods".                           */
alter table "ac_OrderItemDigitalGoods"
	add constraint "ac_OrderItemDigitalGoods_ac_DigitalGoods_FK1" foreign key (
		"DigitalGoodId")
	 references "ac_DigitalGoods" (
		"DigitalGoodId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_OrderItemDigitalGoods" nocheck constraint "ac_OrderItemDigitalGoods_ac_DigitalGoods_FK1" 

go

alter table "ac_OrderItemDigitalGoods"
	add constraint "ac_OrderItems_ac_OrderItemDigitalGoods_FK1" foreign key (
		"OrderItemId")
	 references "ac_OrderItems" (
		"OrderItemId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_OrderCoupons".                                    */
alter table "ac_OrderCoupons"
	add constraint "ac_Orders_ac_OrderCoupons_FK1" foreign key (
		"OrderId")
	 references "ac_Orders" (
		"OrderId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Manufacturers".                                   */
alter table "ac_Manufacturers"
	add constraint "ac_Stores_ac_Manufacturers_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Links".                                           */
alter table "ac_Links"
	add constraint "ac_Stores_ac_Links_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_SerialKeys".                                      */
alter table "ac_SerialKeys"
	add constraint "ac_DigitalGoods_ac_SerialKeys_FK1" foreign key (
		"DigitalGoodId")
	 references "ac_DigitalGoods" (
		"DigitalGoodId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_LicenseAgreements".                               */
alter table "ac_LicenseAgreements"
	add constraint "ac_Stores_ac_LicenseAgreements_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_KitProducts".                                     */
alter table "ac_KitProducts"
	add constraint "ac_KitComponents_ac_KitProduct_FK1" foreign key (
		"KitComponentId")
	 references "ac_KitComponents" (
		"KitComponentId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_KitComponents".                                   */
alter table "ac_KitComponents"
	add constraint "ac_Stores_ac_KitComponents_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_InputFields".                                     */
alter table "ac_InputFields"
	add constraint "ac_ProductTemplates_ac_InputFields_FK1" foreign key (
		"ProductTemplateId")
	 references "ac_ProductTemplates" (
		"ProductTemplateId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_InputChoices".                                    */
alter table "ac_InputChoices"
	add constraint "ac_InputFields_ac_InputChoices_FK1" foreign key (
		"InputFieldId")
	 references "ac_InputFields" (
		"InputFieldId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_GiftCertificateTransactions".                     */
alter table "ac_GiftCertificateTransactions"
	add constraint "ac_GiftCertificates_ac_GiftCertificateTransactions_FK1" foreign key (
		"GiftCertificateId")
	 references "ac_GiftCertificates" (
		"GiftCertificateId") on update no action on delete cascade  

go

alter table "ac_GiftCertificateTransactions"
	add constraint "ac_Orders_ac_GiftCertificateTransactions_FK1" foreign key (
		"OrderId")
	 references "ac_Orders" (
		"OrderId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_GiftCertificateTransactions" nocheck constraint "ac_Orders_ac_GiftCertificateTransactions_FK1" 

go

/* Add foreign key constraints to table "ac_GiftCertificates".                                */
alter table "ac_GiftCertificates"
	add constraint "ac_Stores_ac_GiftCertificates_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

alter table "ac_GiftCertificates"
	add constraint "ac_OrderItems_ac_GiftCertificates_FK1" foreign key (
		"OrderItemId")
	 references "ac_OrderItems" (
		"OrderItemId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_GiftCertificates" nocheck constraint "ac_OrderItems_ac_GiftCertificates_FK1" 

go

/* Add foreign key constraints to table "ac_EmailTemplateTriggers".                           */
alter table "ac_EmailTemplateTriggers"
	add constraint "ac_Emails_ac_EmailEventAssn_FK1" foreign key (
		"EmailTemplateId")
	 references "ac_EmailTemplates" (
		"EmailTemplateId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_EmailTemplates".                                  */
alter table "ac_EmailTemplates"
	add constraint "ac_Stores_ac_Emails_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_EmailListUsers".                                  */
alter table "ac_EmailListUsers"
	add constraint "ac_EmailLists_ac_EmailListUsers_FK1" foreign key (
		"EmailListId")
	 references "ac_EmailLists" (
		"EmailListId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_EmailListSignups".                                */
alter table "ac_EmailListSignups"
	add constraint "ac_EmailLists_ac_EmailListSignups_FK1" foreign key (
		"EmailListId")
	 references "ac_EmailLists" (
		"EmailListId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_EmailLists".                                      */
alter table "ac_EmailLists"
	add constraint "ac_Stores_ac_EmailLists_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Downloads".                                       */
alter table "ac_Downloads"
	add constraint "ac_OrderFiles_ac_Downloads_FK1" foreign key (
		"OrderItemDigitalGoodId")
	 references "ac_OrderItemDigitalGoods" (
		"OrderItemDigitalGoodId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_DigitalGoods".                                    */
alter table "ac_DigitalGoods"
	add constraint "ac_Readmes_ac_DigitalGoods_FK1" foreign key (
		"ReadmeId")
	 references "ac_Readmes" (
		"ReadmeId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_DigitalGoods" nocheck constraint "ac_Readmes_ac_DigitalGoods_FK1" 

go

alter table "ac_DigitalGoods"
	add constraint "ac_LicenseAgreements_ac_DigitalGoods_FK1" foreign key (
		"LicenseAgreementId")
	 references "ac_LicenseAgreements" (
		"LicenseAgreementId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_DigitalGoods" nocheck constraint "ac_LicenseAgreements_ac_DigitalGoods_FK1" 

go

alter table "ac_DigitalGoods"
	add constraint "ac_Stores_ac_DigitalGoods_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_CustomFields".                                    */
alter table "ac_CustomFields"
	add constraint "ac_Stores_ac_CustomFields_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Currencies".                                      */
alter table "ac_Currencies"
	add constraint "ac_Stores_ac_Currencies_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_CouponShipMethods".                               */
alter table "ac_CouponShipMethods"
	add constraint "ac_Coupons_ac_CouponShipMethods_FK1" foreign key (
		"CouponId")
	 references "ac_Coupons" (
		"CouponId") on update no action on delete cascade  

go

alter table "ac_CouponShipMethods"
	add constraint "ac_ShipMethods_ac_CouponShipMethods_FK1" foreign key (
		"ShipMethodId")
	 references "ac_ShipMethods" (
		"ShipMethodId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Coupons".                                         */
alter table "ac_Coupons"
	add constraint "ac_Stores_ac_Coupons_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_CouponGroups".                                    */
alter table "ac_CouponGroups"
	add constraint "ac_Coupons_ac_CouponGroups_FK1" foreign key (
		"CouponId")
	 references "ac_Coupons" (
		"CouponId") on update no action on delete cascade  

go

alter table "ac_CouponGroups"
	add constraint "ac_Groups_ac_CouponGroups_FK1" foreign key (
		"GroupId")
	 references "ac_Groups" (
		"GroupId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_CouponProducts".                                  */
alter table "ac_CouponProducts"
	add constraint "ac_Coupons_ac_CouponProductAssn_FK1" foreign key (
		"CouponId")
	 references "ac_Coupons" (
		"CouponId") on update no action on delete cascade  

go

alter table "ac_CouponProducts"
	add constraint "ac_Products_ac_CouponProductAssn_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_CouponCombos".                                    */
alter table "ac_CouponCombos"
	add constraint "ac_Coupons_ac_CouponCombos_FK1" foreign key (
		"CouponId")
	 references "ac_Coupons" (
		"CouponId") on update no action on delete cascade  

go

alter table "ac_CouponCombos"
	add constraint "ac_Coupons_ac_CouponCombos_FK2" foreign key (
		"ComboCouponId")
	 references "ac_Coupons" (
		"CouponId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Countries".                                       */
alter table "ac_Countries"
	add constraint "ac_Stores_ac_Countries_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_CategoryVolumeDiscounts".                         */
alter table "ac_CategoryVolumeDiscounts"
	add constraint "ac_Categories_ac_CategoryDiscountAssn_FK1" foreign key (
		"CategoryId")
	 references "ac_Categories" (
		"CategoryId") on update no action on delete cascade  

go

alter table "ac_CategoryVolumeDiscounts"
	add constraint "ac_Discounts_ac_CategoryDiscountAssn_FK1" foreign key (
		"VolumeDiscountId")
	 references "ac_VolumeDiscounts" (
		"VolumeDiscountId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_CategoryParents".                                 */
alter table "ac_CategoryParents"
	add constraint "ac_Categories_ac_CategoryAssn_FK1" foreign key (
		"CategoryId")
	 references "ac_Categories" (
		"CategoryId")  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_CategoryParents" nocheck constraint "ac_Categories_ac_CategoryAssn_FK1" 

go

/* Add foreign key constraints to table "ac_Categories".                                      */
alter table "ac_Categories"
	add constraint "ac_Stores_ac_Categories_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_CatalogNodes".                                    */
alter table "ac_CatalogNodes"
	add constraint "ac_Categories_ac_CatalogNodes_FK1" foreign key (
		"CategoryId")
	 references "ac_Categories" (
		"CategoryId")  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_CatalogNodes" nocheck constraint "ac_Categories_ac_CatalogNodes_FK1" 

go

/* Add foreign key constraints to table "ac_BasketShipments".                                 */
alter table "ac_BasketShipments"
	add constraint "ac_Addresses_ac_BasketShipments_FK1" foreign key (
		"AddressId")
	 references "ac_Addresses" (
		"AddressId") on update no action on delete no action  

go

alter table "ac_BasketShipments"
	add constraint "ac_Baskets_ac_BasketShipments_FK1" foreign key (
		"BasketId")
	 references "ac_Baskets" (
		"BasketId") on update no action on delete cascade  

go

alter table "ac_BasketShipments"
	add constraint "ac_ShipMethods_ac_BasketShipments_FK1" foreign key (
		"ShipMethodId")
	 references "ac_ShipMethods" (
		"ShipMethodId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_BasketShipments" nocheck constraint "ac_ShipMethods_ac_BasketShipments_FK1" 

go

alter table "ac_BasketShipments"
	add constraint "ac_Warehouses_ac_BasketShipments_FK1" foreign key (
		"WarehouseId")
	 references "ac_Warehouses" (
		"WarehouseId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Baskets".                                         */
alter table "ac_Baskets"
	add constraint "ac_Users_ac_Baskets_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_BasketItems".                                     */
alter table "ac_BasketItems"
	add constraint "ac_Baskets_ac_BasketItems_FK1" foreign key (
		"BasketId")
	 references "ac_Baskets" (
		"BasketId") on update no action on delete cascade  

go

alter table "ac_BasketItems"
	add constraint "ac_Products_ac_BasketItems_FK1" foreign key (
		"ProductId")
	 references "ac_Products" (
		"ProductId")  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_BasketItems" nocheck constraint "ac_Products_ac_BasketItems_FK1" 

go

alter table "ac_BasketItems"
	add constraint "ac_TaxCodes_ac_BasketItems_FK1" foreign key (
		"TaxCodeId")
	 references "ac_TaxCodes" (
		"TaxCodeId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_BasketItems" nocheck constraint "ac_TaxCodes_ac_BasketItems_FK1" 

go

alter table "ac_BasketItems"
	add constraint "ac_WishlistItems_ac_BasketItems_FK1" foreign key (
		"WishlistItemId")
	 references "ac_WishlistItems" (
		"WishlistItemId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_BasketItems" nocheck constraint "ac_WishlistItems_ac_BasketItems_FK1" 

go

alter table "ac_BasketItems"
	add constraint "ac_WrapStyles_ac_BasketItems_FK1" foreign key (
		"WrapStyleId")
	 references "ac_WrapStyles" (
		"WrapStyleId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_BasketItems" nocheck constraint "ac_WrapStyles_ac_BasketItems_FK1" 

go

/* Add foreign key constraints to table "ac_BasketItemInputs".                                */
alter table "ac_BasketItemInputs"
	add constraint "ac_BasketItems_ac_BasketItemInputs_FK1" foreign key (
		"BasketItemId")
	 references "ac_BasketItems" (
		"BasketItemId") on update no action on delete cascade  

go

alter table "ac_BasketItemInputs"
	add constraint "ac_InputFields_ac_BasketItemInputs_FK1" foreign key (
		"InputFieldId")
	 references "ac_InputFields" (
		"InputFieldId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_BasketCoupons".                                   */
alter table "ac_BasketCoupons"
	add constraint "ac_Baskets_ac_BasketCoupons_FK1" foreign key (
		"BasketId")
	 references "ac_Baskets" (
		"BasketId") on update no action on delete cascade  

go

alter table "ac_BasketCoupons"
	add constraint "ac_Coupons_ac_OrderCouponAssn_FK1" foreign key (
		"CouponId")
	 references "ac_Coupons" (
		"CouponId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_BannedIPs".                                       */
alter table "ac_BannedIPs"
	add constraint "ac_Stores_ac_BannedIPs_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_AuditEvents".                                     */
alter table "ac_AuditEvents"
	add constraint "ac_Users_ac_Auditlog_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_AuditEvents" nocheck constraint "ac_Users_ac_Auditlog_FK1" 

go

alter table "ac_AuditEvents"
	add constraint "ac_Stores_ac_AuditEvents_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_OptionChoices".                                   */
alter table "ac_OptionChoices"
	add constraint "ac_ProductAttributes_ac_AttributeOptions_FK1" foreign key (
		"OptionId")
	 references "ac_Options" (
		"OptionId") on update no action on delete cascade  

go

/* Add foreign key constraints to table "ac_Affiliates".                                      */
alter table "ac_Affiliates"
	add constraint "ac_Stores_ac_Affiliates_FK1" foreign key (
		"StoreId")
	 references "ac_Stores" (
		"StoreId") on update no action on delete no action  

go

/* Add foreign key constraints to table "ac_Addresses".                                       */
alter table "ac_Addresses"
	add constraint "ac_Countries_ac_Addresses_FK1" foreign key (
		"CountryCode")
	 references "ac_Countries" (
		"CountryCode") on update no action  

go

/* Disable the foreign key constraint.                                                        */
alter table "ac_Addresses" nocheck constraint "ac_Countries_ac_Addresses_FK1" 

go

alter table "ac_Addresses"
	add constraint "ac_Users_ac_Addresses_FK1" foreign key (
		"UserId")
	 references "ac_Users" (
		"UserId") on update no action on delete cascade  

go

/* Create procedure/function acsp_MergeUserGroupMembers.                                      */
/* MERGES MEMBERS OF SOURCE GROUP TO TARGET GROUP                                             */
create procedure acsp_MergeUserGroupMembers
	@sourceGroupId int,
	@targetGroupId int
as
begin
    /* BUILD TEMP TABLE FOR SOURCE GROUP */
    SELECT UG.UserId, UG.GroupId, S.SubscriptionId, S.ExpirationDate
    INTO #sourceGroup
    FROM ac_UserGroups AS UG LEFT JOIN ac_Subscriptions AS S
    ON UG.SubscriptionId = S.SubscriptionId
    WHERE UG.GroupId = @sourceGroupId;

    /* BUILD TEMP TABLE FOR TARGET GROUP */
    SELECT UG.UserId, UG.GroupId, S.SubscriptionId, S.ExpirationDate
    INTO #targetGroup
    FROM ac_UserGroups AS UG LEFT JOIN ac_Subscriptions AS S
    ON UG.SubscriptionId = S.SubscriptionId
    WHERE UG.GroupId = @targetGroupId;

    /* IF BOTH ASSIGNMENTS HAVE NULL EXPRIATIONS, FAVOR TARGET GROUP */
    DELETE #sourceGroup
    FROM #sourceGroup INNER JOIN #targetGroup ON #sourceGroup.UserId = #targetGroup.UserId
    WHERE #sourceGroup.ExpirationDate IS NULL AND #targetGroup.ExpirationDate IS NULL;

    /* IF SOURCE GROUP EXPIRES BEFORE TARGET GROUP, FAVOR TARGET GROUP */
    DELETE #sourceGroup
    FROM #sourceGroup INNER JOIN #targetGroup ON #sourceGroup.UserId = #targetGroup.UserId
    WHERE #sourceGroup.ExpirationDate IS NOT NULL 
    AND (#targetGroup.ExpirationDate IS NULL OR #sourceGroup.ExpirationDate < #targetGroup.ExpirationDate);

    /* IF SOURCE GROUP EXPIRES AFTER TARGET GROUP, FAVOR SOURCE GROUP */
    DELETE #targetGroup
    FROM #targetGroup INNER JOIN #sourceGroup ON #targetGroup.UserId = #sourceGroup.UserId
    WHERE #targetGroup.ExpirationDate IS NOT NULL 
    AND (#sourceGroup.ExpirationDate IS NULL OR #targetGroup.ExpirationDate < #sourceGroup.ExpirationDate);

    /* ANY RECORD NOT APPEARING IN SOURCEGROUP TEMP TABLE SHOULD BE REMOVED */
    DELETE FROM ac_UserGroups
    WHERE UserId NOT IN (SELECT UserId FROM #sourceGroup)
    AND GroupID = @sourceGroupId;

    /* ANY RECORD NOT APPEARING IN TARGETGROUP TEMP TABLE SHOULD BE REMOVED */
    DELETE FROM ac_UserGroups
    WHERE UserId NOT IN (SELECT UserId FROM #targetGroup)
    AND GroupID = @targetGroupId;

    /* RENUMBER ALL SOURCE GROUP RECORDS TO TO TARGET GROUP */
    UPDATE ac_UserGroups
    SET GroupId = @targetGroupId
    WHERE GroupId = @sourceGroupId;

    /* DROP TEMP TABLES */
    DROP TABLE #sourceGroup;
    DROP TABLE #targetGroup;
end


go

/* Create triggers to enforce referential integrity.                                          */

Create trigger "ac_Addressesinsert" on "ac_Addresses" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("CountryCode")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."CountryCode" is null 

      select @validRows = count(*)
      from inserted, "ac_Countries"
      where inserted."CountryCode" = "ac_Countries"."CountryCode"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Addresses" because the values entered for "CountryCode" in "ac_Addresses" must correspond to the values of primary key column(s) of the table "ac_Countries"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Addressesupdate" on "ac_Addresses" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("CountryCode")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."CountryCode" is null 

      select @validRows = count(*)
      from inserted, "ac_Countries"
      where inserted."CountryCode" = "ac_Countries"."CountryCode"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Addresses" because the values entered for "CountryCode" in "ac_Addresses" must correspond to the values of primary key column(s) of the table "ac_Countries"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Affiliatesdelete" on "ac_Affiliates" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Orders"
  set "ac_Orders"."AffiliateId" = NULL
  from deleted,"ac_Orders"
  where "ac_Orders"."AffiliateId" = deleted."AffiliateId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Users"
  set "ac_Users"."AffiliateId" = NULL
  from deleted,"ac_Users"
  where "ac_Users"."AffiliateId" = deleted."AffiliateId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Affiliatesupdate" on "ac_Affiliates" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("AffiliateId")
    begin
      if exists(
        select * from deleted, "ac_Orders"
        where "ac_Orders"."AffiliateId" = deleted."AffiliateId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "AffiliateId" in "ac_Affiliates" because there are dependent values in "ac_Orders"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("AffiliateId")
    begin
      if exists(
        select * from deleted, "ac_Users"
        where "ac_Users"."AffiliateId" = deleted."AffiliateId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "AffiliateId" in "ac_Affiliates" because there are dependent values in "ac_Users"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_AuditEventsinsert" on "ac_AuditEvents" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("UserId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."UserId" is null 

      select @validRows = count(*)
      from inserted, "ac_Users"
      where inserted."UserId" = "ac_Users"."UserId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_AuditEvents" because the values entered for "UserId" in "ac_AuditEvents" must correspond to the values of primary key column(s) of the table "ac_Users"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_AuditEventsupdate" on "ac_AuditEvents" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("UserId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."UserId" is null 

      select @validRows = count(*)
      from inserted, "ac_Users"
      where inserted."UserId" = "ac_Users"."UserId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_AuditEvents" because the values entered for "UserId" in "ac_AuditEvents" must correspond to the values of primary key column(s) of the table "ac_Users"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_BasketItemsinsert" on "ac_BasketItems" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_BasketItems" because the values entered for "TaxCodeId" in "ac_BasketItems" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("WishlistItemId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WishlistItemId" is null 

      select @validRows = count(*)
      from inserted, "ac_WishlistItems"
      where inserted."WishlistItemId" = "ac_WishlistItems"."WishlistItemId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_BasketItems" because the values entered for "WishlistItemId" in "ac_BasketItems" must correspond to the values of primary key column(s) of the table "ac_WishlistItems"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("WrapStyleId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WrapStyleId" is null 

      select @validRows = count(*)
      from inserted, "ac_WrapStyles"
      where inserted."WrapStyleId" = "ac_WrapStyles"."WrapStyleId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_BasketItems" because the values entered for "WrapStyleId" in "ac_BasketItems" must correspond to the values of primary key column(s) of the table "ac_WrapStyles"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_BasketItemsupdate" on "ac_BasketItems" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_BasketItems" because the values entered for "TaxCodeId" in "ac_BasketItems" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("WishlistItemId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WishlistItemId" is null 

      select @validRows = count(*)
      from inserted, "ac_WishlistItems"
      where inserted."WishlistItemId" = "ac_WishlistItems"."WishlistItemId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_BasketItems" because the values entered for "WishlistItemId" in "ac_BasketItems" must correspond to the values of primary key column(s) of the table "ac_WishlistItems"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("WrapStyleId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WrapStyleId" is null 

      select @validRows = count(*)
      from inserted, "ac_WrapStyles"
      where inserted."WrapStyleId" = "ac_WrapStyles"."WrapStyleId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_BasketItems" because the values entered for "WrapStyleId" in "ac_BasketItems" must correspond to the values of primary key column(s) of the table "ac_WrapStyles"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_BasketShipmentsinsert" on "ac_BasketShipments" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("ShipMethodId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ShipMethodId" is null 

      select @validRows = count(*)
      from inserted, "ac_ShipMethods"
      where inserted."ShipMethodId" = "ac_ShipMethods"."ShipMethodId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_BasketShipments" because the values entered for "ShipMethodId" in "ac_BasketShipments" must correspond to the values of primary key column(s) of the table "ac_ShipMethods"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_BasketShipmentsupdate" on "ac_BasketShipments" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("ShipMethodId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ShipMethodId" is null 

      select @validRows = count(*)
      from inserted, "ac_ShipMethods"
      where inserted."ShipMethodId" = "ac_ShipMethods"."ShipMethodId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_BasketShipments" because the values entered for "ShipMethodId" in "ac_BasketShipments" must correspond to the values of primary key column(s) of the table "ac_ShipMethods"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Countriesdelete" on "ac_Countries" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Addresses"
  set "ac_Addresses"."CountryCode" = NULL
  from deleted,"ac_Addresses"
  where "ac_Addresses"."CountryCode" = deleted."CountryCode"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Warehouses"
  set "ac_Warehouses"."CountryCode" = NULL
  from deleted,"ac_Warehouses"
  where "ac_Warehouses"."CountryCode" = deleted."CountryCode"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Countriesupdate" on "ac_Countries" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("CountryCode")
    begin
      if exists(
        select * from deleted, "ac_Addresses"
        where "ac_Addresses"."CountryCode" = deleted."CountryCode")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "CountryCode" in "ac_Countries" because there are dependent values in "ac_Addresses"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("CountryCode")
    begin
      if exists(
        select * from deleted, "ac_Warehouses"
        where "ac_Warehouses"."CountryCode" = deleted."CountryCode")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "CountryCode" in "ac_Countries" because there are dependent values in "ac_Warehouses"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_DigitalGoodsdelete" on "ac_DigitalGoods" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_OrderItemDigitalGoods"
  set "ac_OrderItemDigitalGoods"."DigitalGoodId" = NULL
  from deleted,"ac_OrderItemDigitalGoods"
  where "ac_OrderItemDigitalGoods"."DigitalGoodId" = deleted."DigitalGoodId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_DigitalGoodsinsert" on "ac_DigitalGoods" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("ReadmeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ReadmeId" is null 

      select @validRows = count(*)
      from inserted, "ac_Readmes"
      where inserted."ReadmeId" = "ac_Readmes"."ReadmeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_DigitalGoods" because the values entered for "ReadmeId" in "ac_DigitalGoods" must correspond to the values of primary key column(s) of the table "ac_Readmes"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("LicenseAgreementId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."LicenseAgreementId" is null 

      select @validRows = count(*)
      from inserted, "ac_LicenseAgreements"
      where inserted."LicenseAgreementId" = "ac_LicenseAgreements"."LicenseAgreementId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_DigitalGoods" because the values entered for "LicenseAgreementId" in "ac_DigitalGoods" must correspond to the values of primary key column(s) of the table "ac_LicenseAgreements"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_DigitalGoodsupdate" on "ac_DigitalGoods" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("ReadmeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ReadmeId" is null 

      select @validRows = count(*)
      from inserted, "ac_Readmes"
      where inserted."ReadmeId" = "ac_Readmes"."ReadmeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_DigitalGoods" because the values entered for "ReadmeId" in "ac_DigitalGoods" must correspond to the values of primary key column(s) of the table "ac_Readmes"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("LicenseAgreementId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."LicenseAgreementId" is null 

      select @validRows = count(*)
      from inserted, "ac_LicenseAgreements"
      where inserted."LicenseAgreementId" = "ac_LicenseAgreements"."LicenseAgreementId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_DigitalGoods" because the values entered for "LicenseAgreementId" in "ac_DigitalGoods" must correspond to the values of primary key column(s) of the table "ac_LicenseAgreements"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("DigitalGoodId")
    begin
      if exists(
        select * from deleted, "ac_OrderItemDigitalGoods"
        where "ac_OrderItemDigitalGoods"."DigitalGoodId" = deleted."DigitalGoodId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "DigitalGoodId" in "ac_DigitalGoods" because there are dependent values in "ac_OrderItemDigitalGoods"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_GiftCertificatesinsert" on "ac_GiftCertificates" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("OrderItemId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."OrderItemId" is null 

      select @validRows = count(*)
      from inserted, "ac_OrderItems"
      where inserted."OrderItemId" = "ac_OrderItems"."OrderItemId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_GiftCertificates" because the values entered for "OrderItemId" in "ac_GiftCertificates" must correspond to the values of primary key column(s) of the table "ac_OrderItems"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_GiftCertificatesupdate" on "ac_GiftCertificates" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("OrderItemId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."OrderItemId" is null 

      select @validRows = count(*)
      from inserted, "ac_OrderItems"
      where inserted."OrderItemId" = "ac_OrderItems"."OrderItemId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_GiftCertificates" because the values entered for "OrderItemId" in "ac_GiftCertificates" must correspond to the values of primary key column(s) of the table "ac_OrderItems"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_GiftCertificateTransactionsinsert" on "ac_GiftCertificateTransactions" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("OrderId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."OrderId" is null 

      select @validRows = count(*)
      from inserted, "ac_Orders"
      where inserted."OrderId" = "ac_Orders"."OrderId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_GiftCertificateTransactions" because the values entered for "OrderId" in "ac_GiftCertificateTransactions" must correspond to the values of primary key column(s) of the table "ac_Orders"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_GiftCertificateTransactionsupdate" on "ac_GiftCertificateTransactions" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("OrderId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."OrderId" is null 

      select @validRows = count(*)
      from inserted, "ac_Orders"
      where inserted."OrderId" = "ac_Orders"."OrderId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_GiftCertificateTransactions" because the values entered for "OrderId" in "ac_GiftCertificateTransactions" must correspond to the values of primary key column(s) of the table "ac_Orders"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Groupsdelete" on "ac_Groups" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_SubscriptionPlans"
  set "ac_SubscriptionPlans"."GroupId" = NULL
  from deleted,"ac_SubscriptionPlans"
  where "ac_SubscriptionPlans"."GroupId" = deleted."GroupId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Groupsupdate" on "ac_Groups" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("GroupId")
    begin
      if exists(
        select * from deleted, "ac_SubscriptionPlans"
        where "ac_SubscriptionPlans"."GroupId" = deleted."GroupId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "GroupId" in "ac_Groups" because there are dependent values in "ac_SubscriptionPlans"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_LicenseAgreementsdelete" on "ac_LicenseAgreements" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_DigitalGoods"
  set "ac_DigitalGoods"."LicenseAgreementId" = NULL
  from deleted,"ac_DigitalGoods"
  where "ac_DigitalGoods"."LicenseAgreementId" = deleted."LicenseAgreementId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_LicenseAgreementsupdate" on "ac_LicenseAgreements" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("LicenseAgreementId")
    begin
      if exists(
        select * from deleted, "ac_DigitalGoods"
        where "ac_DigitalGoods"."LicenseAgreementId" = deleted."LicenseAgreementId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "LicenseAgreementId" in "ac_LicenseAgreements" because there are dependent values in "ac_DigitalGoods"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Manufacturersdelete" on "ac_Manufacturers" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Products"
  set "ac_Products"."ManufacturerId" = NULL
  from deleted,"ac_Products"
  where "ac_Products"."ManufacturerId" = deleted."ManufacturerId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Manufacturersupdate" on "ac_Manufacturers" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("ManufacturerId")
    begin
      if exists(
        select * from deleted, "ac_Products"
        where "ac_Products"."ManufacturerId" = deleted."ManufacturerId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "ManufacturerId" in "ac_Manufacturers" because there are dependent values in "ac_Products"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_OrderItemDigitalGoodsinsert" on "ac_OrderItemDigitalGoods" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("DigitalGoodId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."DigitalGoodId" is null 

      select @validRows = count(*)
      from inserted, "ac_DigitalGoods"
      where inserted."DigitalGoodId" = "ac_DigitalGoods"."DigitalGoodId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItemDigitalGoods" because the values entered for "DigitalGoodId" in "ac_OrderItemDigitalGoods" must correspond to the values of primary key column(s) of the table "ac_DigitalGoods"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_OrderItemDigitalGoodsupdate" on "ac_OrderItemDigitalGoods" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("DigitalGoodId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."DigitalGoodId" is null 

      select @validRows = count(*)
      from inserted, "ac_DigitalGoods"
      where inserted."DigitalGoodId" = "ac_DigitalGoods"."DigitalGoodId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItemDigitalGoods" because the values entered for "DigitalGoodId" in "ac_OrderItemDigitalGoods" must correspond to the values of primary key column(s) of the table "ac_DigitalGoods"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_OrderItemsdelete" on "ac_OrderItems" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Subscriptions"
  set "ac_Subscriptions"."OrderItemId" = NULL
  from deleted,"ac_Subscriptions"
  where "ac_Subscriptions"."OrderItemId" = deleted."OrderItemId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_GiftCertificates"
  set "ac_GiftCertificates"."OrderItemId" = NULL
  from deleted,"ac_GiftCertificates"
  where "ac_GiftCertificates"."OrderItemId" = deleted."OrderItemId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_OrderItemsinsert" on "ac_OrderItems" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("ProductId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ProductId" is null 

      select @validRows = count(*)
      from inserted, "ac_Products"
      where inserted."ProductId" = "ac_Products"."ProductId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItems" because the values entered for "ProductId" in "ac_OrderItems" must correspond to the values of primary key column(s) of the table "ac_Products"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItems" because the values entered for "TaxCodeId" in "ac_OrderItems" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("WishlistItemId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WishlistItemId" is null 

      select @validRows = count(*)
      from inserted, "ac_WishlistItems"
      where inserted."WishlistItemId" = "ac_WishlistItems"."WishlistItemId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItems" because the values entered for "WishlistItemId" in "ac_OrderItems" must correspond to the values of primary key column(s) of the table "ac_WishlistItems"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("WrapStyleId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WrapStyleId" is null 

      select @validRows = count(*)
      from inserted, "ac_WrapStyles"
      where inserted."WrapStyleId" = "ac_WrapStyles"."WrapStyleId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItems" because the values entered for "WrapStyleId" in "ac_OrderItems" must correspond to the values of primary key column(s) of the table "ac_WrapStyles"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_OrderItemsupdate" on "ac_OrderItems" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("ProductId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ProductId" is null 

      select @validRows = count(*)
      from inserted, "ac_Products"
      where inserted."ProductId" = "ac_Products"."ProductId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItems" because the values entered for "ProductId" in "ac_OrderItems" must correspond to the values of primary key column(s) of the table "ac_Products"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItems" because the values entered for "TaxCodeId" in "ac_OrderItems" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("WishlistItemId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WishlistItemId" is null 

      select @validRows = count(*)
      from inserted, "ac_WishlistItems"
      where inserted."WishlistItemId" = "ac_WishlistItems"."WishlistItemId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItems" because the values entered for "WishlistItemId" in "ac_OrderItems" must correspond to the values of primary key column(s) of the table "ac_WishlistItems"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("WrapStyleId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WrapStyleId" is null 

      select @validRows = count(*)
      from inserted, "ac_WrapStyles"
      where inserted."WrapStyleId" = "ac_WrapStyles"."WrapStyleId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderItems" because the values entered for "WrapStyleId" in "ac_OrderItems" must correspond to the values of primary key column(s) of the table "ac_WrapStyles"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("OrderItemId")
    begin
      if exists(
        select * from deleted, "ac_Subscriptions"
        where "ac_Subscriptions"."OrderItemId" = deleted."OrderItemId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "OrderItemId" in "ac_OrderItems" because there are dependent values in "ac_Subscriptions"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("OrderItemId")
    begin
      if exists(
        select * from deleted, "ac_GiftCertificates"
        where "ac_GiftCertificates"."OrderItemId" = deleted."OrderItemId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "OrderItemId" in "ac_OrderItems" because there are dependent values in "ac_GiftCertificates"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_OrderNotesinsert" on "ac_OrderNotes" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("UserId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."UserId" is null 

      select @validRows = count(*)
      from inserted, "ac_Users"
      where inserted."UserId" = "ac_Users"."UserId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderNotes" because the values entered for "UserId" in "ac_OrderNotes" must correspond to the values of primary key column(s) of the table "ac_Users"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_OrderNotesupdate" on "ac_OrderNotes" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("UserId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."UserId" is null 

      select @validRows = count(*)
      from inserted, "ac_Users"
      where inserted."UserId" = "ac_Users"."UserId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderNotes" because the values entered for "UserId" in "ac_OrderNotes" must correspond to the values of primary key column(s) of the table "ac_Users"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Ordersdelete" on "ac_Orders" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_GiftCertificateTransactions"
  set "ac_GiftCertificateTransactions"."OrderId" = NULL
  from deleted,"ac_GiftCertificateTransactions"
  where "ac_GiftCertificateTransactions"."OrderId" = deleted."OrderId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_OrderShipmentsinsert" on "ac_OrderShipments" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("ShipMethodId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ShipMethodId" is null 

      select @validRows = count(*)
      from inserted, "ac_ShipMethods"
      where inserted."ShipMethodId" = "ac_ShipMethods"."ShipMethodId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderShipments" because the values entered for "ShipMethodId" in "ac_OrderShipments" must correspond to the values of primary key column(s) of the table "ac_ShipMethods"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("WarehouseId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WarehouseId" is null 

      select @validRows = count(*)
      from inserted, "ac_Warehouses"
      where inserted."WarehouseId" = "ac_Warehouses"."WarehouseId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderShipments" because the values entered for "WarehouseId" in "ac_OrderShipments" must correspond to the values of primary key column(s) of the table "ac_Warehouses"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_OrderShipmentsupdate" on "ac_OrderShipments" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("ShipMethodId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ShipMethodId" is null 

      select @validRows = count(*)
      from inserted, "ac_ShipMethods"
      where inserted."ShipMethodId" = "ac_ShipMethods"."ShipMethodId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderShipments" because the values entered for "ShipMethodId" in "ac_OrderShipments" must correspond to the values of primary key column(s) of the table "ac_ShipMethods"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("WarehouseId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WarehouseId" is null 

      select @validRows = count(*)
      from inserted, "ac_Warehouses"
      where inserted."WarehouseId" = "ac_Warehouses"."WarehouseId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_OrderShipments" because the values entered for "WarehouseId" in "ac_OrderShipments" must correspond to the values of primary key column(s) of the table "ac_Warehouses"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Ordersinsert" on "ac_Orders" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("AffiliateId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."AffiliateId" is null 

      select @validRows = count(*)
      from inserted, "ac_Affiliates"
      where inserted."AffiliateId" = "ac_Affiliates"."AffiliateId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Orders" because the values entered for "AffiliateId" in "ac_Orders" must correspond to the values of primary key column(s) of the table "ac_Affiliates"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("UserId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."UserId" is null 

      select @validRows = count(*)
      from inserted, "ac_Users"
      where inserted."UserId" = "ac_Users"."UserId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Orders" because the values entered for "UserId" in "ac_Orders" must correspond to the values of primary key column(s) of the table "ac_Users"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Ordersupdate" on "ac_Orders" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("AffiliateId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."AffiliateId" is null 

      select @validRows = count(*)
      from inserted, "ac_Affiliates"
      where inserted."AffiliateId" = "ac_Affiliates"."AffiliateId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Orders" because the values entered for "AffiliateId" in "ac_Orders" must correspond to the values of primary key column(s) of the table "ac_Affiliates"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("UserId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."UserId" is null 

      select @validRows = count(*)
      from inserted, "ac_Users"
      where inserted."UserId" = "ac_Users"."UserId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Orders" because the values entered for "UserId" in "ac_Orders" must correspond to the values of primary key column(s) of the table "ac_Users"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("OrderId")
    begin
      if exists(
        select * from deleted, "ac_GiftCertificateTransactions"
        where "ac_GiftCertificateTransactions"."OrderId" = deleted."OrderId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "OrderId" in "ac_Orders" because there are dependent values in "ac_GiftCertificateTransactions"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_PaymentGatewaysdelete" on "ac_PaymentGateways" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_PaymentMethods"
  set "ac_PaymentMethods"."PaymentGatewayId" = NULL
  from deleted,"ac_PaymentMethods"
  where "ac_PaymentMethods"."PaymentGatewayId" = deleted."PaymentGatewayId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Transactions"
  set "ac_Transactions"."PaymentGatewayId" = NULL
  from deleted,"ac_Transactions"
  where "ac_Transactions"."PaymentGatewayId" = deleted."PaymentGatewayId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_PaymentGatewaysupdate" on "ac_PaymentGateways" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("PaymentGatewayId")
    begin
      if exists(
        select * from deleted, "ac_PaymentMethods"
        where "ac_PaymentMethods"."PaymentGatewayId" = deleted."PaymentGatewayId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "PaymentGatewayId" in "ac_PaymentGateways" because there are dependent values in "ac_PaymentMethods"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("PaymentGatewayId")
    begin
      if exists(
        select * from deleted, "ac_Transactions"
        where "ac_Transactions"."PaymentGatewayId" = deleted."PaymentGatewayId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "PaymentGatewayId" in "ac_PaymentGateways" because there are dependent values in "ac_Transactions"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_PaymentMethodsdelete" on "ac_PaymentMethods" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Payments"
  set "ac_Payments"."PaymentMethodId" = NULL
  from deleted,"ac_Payments"
  where "ac_Payments"."PaymentMethodId" = deleted."PaymentMethodId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_PaymentMethodsinsert" on "ac_PaymentMethods" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("PaymentGatewayId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."PaymentGatewayId" is null 

      select @validRows = count(*)
      from inserted, "ac_PaymentGateways"
      where inserted."PaymentGatewayId" = "ac_PaymentGateways"."PaymentGatewayId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_PaymentMethods" because the values entered for "PaymentGatewayId" in "ac_PaymentMethods" must correspond to the values of primary key column(s) of the table "ac_PaymentGateways"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_PaymentMethodsupdate" on "ac_PaymentMethods" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("PaymentGatewayId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."PaymentGatewayId" is null 

      select @validRows = count(*)
      from inserted, "ac_PaymentGateways"
      where inserted."PaymentGatewayId" = "ac_PaymentGateways"."PaymentGatewayId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_PaymentMethods" because the values entered for "PaymentGatewayId" in "ac_PaymentMethods" must correspond to the values of primary key column(s) of the table "ac_PaymentGateways"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("PaymentMethodId")
    begin
      if exists(
        select * from deleted, "ac_Payments"
        where "ac_Payments"."PaymentMethodId" = deleted."PaymentMethodId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "PaymentMethodId" in "ac_PaymentMethods" because there are dependent values in "ac_Payments"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Paymentsinsert" on "ac_Payments" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("PaymentMethodId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."PaymentMethodId" is null 

      select @validRows = count(*)
      from inserted, "ac_PaymentMethods"
      where inserted."PaymentMethodId" = "ac_PaymentMethods"."PaymentMethodId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Payments" because the values entered for "PaymentMethodId" in "ac_Payments" must correspond to the values of primary key column(s) of the table "ac_PaymentMethods"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("SubscriptionId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."SubscriptionId" is null 

      select @validRows = count(*)
      from inserted, "ac_Subscriptions"
      where inserted."SubscriptionId" = "ac_Subscriptions"."SubscriptionId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Payments" because the values entered for "SubscriptionId" in "ac_Payments" must correspond to the values of primary key column(s) of the table "ac_Subscriptions"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Paymentsupdate" on "ac_Payments" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("PaymentMethodId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."PaymentMethodId" is null 

      select @validRows = count(*)
      from inserted, "ac_PaymentMethods"
      where inserted."PaymentMethodId" = "ac_PaymentMethods"."PaymentMethodId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Payments" because the values entered for "PaymentMethodId" in "ac_Payments" must correspond to the values of primary key column(s) of the table "ac_PaymentMethods"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("SubscriptionId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."SubscriptionId" is null 

      select @validRows = count(*)
      from inserted, "ac_Subscriptions"
      where inserted."SubscriptionId" = "ac_Subscriptions"."SubscriptionId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Payments" because the values entered for "SubscriptionId" in "ac_Payments" must correspond to the values of primary key column(s) of the table "ac_Subscriptions"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Productsdelete" on "ac_Products" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_OrderItems"
  set "ac_OrderItems"."ProductId" = NULL
  from deleted,"ac_OrderItems"
  where "ac_OrderItems"."ProductId" = deleted."ProductId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Productsinsert" on "ac_Products" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("ManufacturerId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ManufacturerId" is null 

      select @validRows = count(*)
      from inserted, "ac_Manufacturers"
      where inserted."ManufacturerId" = "ac_Manufacturers"."ManufacturerId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Products" because the values entered for "ManufacturerId" in "ac_Products" must correspond to the values of primary key column(s) of the table "ac_Manufacturers"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Products" because the values entered for "TaxCodeId" in "ac_Products" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("WrapGroupId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WrapGroupId" is null 

      select @validRows = count(*)
      from inserted, "ac_WrapGroups"
      where inserted."WrapGroupId" = "ac_WrapGroups"."WrapGroupId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Products" because the values entered for "WrapGroupId" in "ac_Products" must correspond to the values of primary key column(s) of the table "ac_WrapGroups"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Productsupdate" on "ac_Products" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("ManufacturerId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ManufacturerId" is null 

      select @validRows = count(*)
      from inserted, "ac_Manufacturers"
      where inserted."ManufacturerId" = "ac_Manufacturers"."ManufacturerId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Products" because the values entered for "ManufacturerId" in "ac_Products" must correspond to the values of primary key column(s) of the table "ac_Manufacturers"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Products" because the values entered for "TaxCodeId" in "ac_Products" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("WrapGroupId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."WrapGroupId" is null 

      select @validRows = count(*)
      from inserted, "ac_WrapGroups"
      where inserted."WrapGroupId" = "ac_WrapGroups"."WrapGroupId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Products" because the values entered for "WrapGroupId" in "ac_Products" must correspond to the values of primary key column(s) of the table "ac_WrapGroups"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("ProductId")
    begin
      if exists(
        select * from deleted, "ac_OrderItems"
        where "ac_OrderItems"."ProductId" = deleted."ProductId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "ProductId" in "ac_Products" because there are dependent values in "ac_OrderItems"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Readmesdelete" on "ac_Readmes" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_DigitalGoods"
  set "ac_DigitalGoods"."ReadmeId" = NULL
  from deleted,"ac_DigitalGoods"
  where "ac_DigitalGoods"."ReadmeId" = deleted."ReadmeId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Readmesupdate" on "ac_Readmes" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("ReadmeId")
    begin
      if exists(
        select * from deleted, "ac_DigitalGoods"
        where "ac_DigitalGoods"."ReadmeId" = deleted."ReadmeId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "ReadmeId" in "ac_Readmes" because there are dependent values in "ac_DigitalGoods"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_ShipGatewaysdelete" on "ac_ShipGateways" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_TrackingNumbers"
  set "ac_TrackingNumbers"."ShipGatewayId" = NULL
  from deleted,"ac_TrackingNumbers"
  where "ac_TrackingNumbers"."ShipGatewayId" = deleted."ShipGatewayId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_ShipGatewaysupdate" on "ac_ShipGateways" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("ShipGatewayId")
    begin
      if exists(
        select * from deleted, "ac_TrackingNumbers"
        where "ac_TrackingNumbers"."ShipGatewayId" = deleted."ShipGatewayId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "ShipGatewayId" in "ac_ShipGateways" because there are dependent values in "ac_TrackingNumbers"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_ShipMethodsdelete" on "ac_ShipMethods" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_BasketShipments"
  set "ac_BasketShipments"."ShipMethodId" = NULL
  from deleted,"ac_BasketShipments"
  where "ac_BasketShipments"."ShipMethodId" = deleted."ShipMethodId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_OrderShipments"
  set "ac_OrderShipments"."ShipMethodId" = NULL
  from deleted,"ac_OrderShipments"
  where "ac_OrderShipments"."ShipMethodId" = deleted."ShipMethodId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_ShipMethodsinsert" on "ac_ShipMethods" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_ShipMethods" because the values entered for "TaxCodeId" in "ac_ShipMethods" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_ShipMethodsupdate" on "ac_ShipMethods" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_ShipMethods" because the values entered for "TaxCodeId" in "ac_ShipMethods" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("ShipMethodId")
    begin
      if exists(
        select * from deleted, "ac_BasketShipments"
        where "ac_BasketShipments"."ShipMethodId" = deleted."ShipMethodId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "ShipMethodId" in "ac_ShipMethods" because there are dependent values in "ac_BasketShipments"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("ShipMethodId")
    begin
      if exists(
        select * from deleted, "ac_OrderShipments"
        where "ac_OrderShipments"."ShipMethodId" = deleted."ShipMethodId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "ShipMethodId" in "ac_ShipMethods" because there are dependent values in "ac_OrderShipments"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_SubscriptionPlansinsert" on "ac_SubscriptionPlans" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("GroupId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."GroupId" is null 

      select @validRows = count(*)
      from inserted, "ac_Groups"
      where inserted."GroupId" = "ac_Groups"."GroupId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_SubscriptionPlans" because the values entered for "GroupId" in "ac_SubscriptionPlans" must correspond to the values of primary key column(s) of the table "ac_Groups"'
          goto errorHandler
        end
    end

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_SubscriptionPlans" because the values entered for "TaxCodeId" in "ac_SubscriptionPlans" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_SubscriptionPlansupdate" on "ac_SubscriptionPlans" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("GroupId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."GroupId" is null 

      select @validRows = count(*)
      from inserted, "ac_Groups"
      where inserted."GroupId" = "ac_Groups"."GroupId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_SubscriptionPlans" because the values entered for "GroupId" in "ac_SubscriptionPlans" must correspond to the values of primary key column(s) of the table "ac_Groups"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_SubscriptionPlans" because the values entered for "TaxCodeId" in "ac_SubscriptionPlans" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Subscriptionsdelete" on "ac_Subscriptions" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Payments"
  set "ac_Payments"."SubscriptionId" = NULL
  from deleted,"ac_Payments"
  where "ac_Payments"."SubscriptionId" = deleted."SubscriptionId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Subscriptionsinsert" on "ac_Subscriptions" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("OrderItemId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."OrderItemId" is null 

      select @validRows = count(*)
      from inserted, "ac_OrderItems"
      where inserted."OrderItemId" = "ac_OrderItems"."OrderItemId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Subscriptions" because the values entered for "OrderItemId" in "ac_Subscriptions" must correspond to the values of primary key column(s) of the table "ac_OrderItems"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Subscriptionsupdate" on "ac_Subscriptions" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("OrderItemId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."OrderItemId" is null 

      select @validRows = count(*)
      from inserted, "ac_OrderItems"
      where inserted."OrderItemId" = "ac_OrderItems"."OrderItemId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Subscriptions" because the values entered for "OrderItemId" in "ac_Subscriptions" must correspond to the values of primary key column(s) of the table "ac_OrderItems"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("SubscriptionId")
    begin
      if exists(
        select * from deleted, "ac_Payments"
        where "ac_Payments"."SubscriptionId" = deleted."SubscriptionId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "SubscriptionId" in "ac_Subscriptions" because there are dependent values in "ac_Payments"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_TaxCodesdelete" on "ac_TaxCodes" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_BasketItems"
  set "ac_BasketItems"."TaxCodeId" = NULL
  from deleted,"ac_BasketItems"
  where "ac_BasketItems"."TaxCodeId" = deleted."TaxCodeId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_OrderItems"
  set "ac_OrderItems"."TaxCodeId" = NULL
  from deleted,"ac_OrderItems"
  where "ac_OrderItems"."TaxCodeId" = deleted."TaxCodeId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Products"
  set "ac_Products"."TaxCodeId" = NULL
  from deleted,"ac_Products"
  where "ac_Products"."TaxCodeId" = deleted."TaxCodeId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_WrapStyles"
  set "ac_WrapStyles"."TaxCodeId" = NULL
  from deleted,"ac_WrapStyles"
  where "ac_WrapStyles"."TaxCodeId" = deleted."TaxCodeId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_ShipMethods"
  set "ac_ShipMethods"."TaxCodeId" = NULL
  from deleted,"ac_ShipMethods"
  where "ac_ShipMethods"."TaxCodeId" = deleted."TaxCodeId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_SubscriptionPlans"
  set "ac_SubscriptionPlans"."TaxCodeId" = NULL
  from deleted,"ac_SubscriptionPlans"
  where "ac_SubscriptionPlans"."TaxCodeId" = deleted."TaxCodeId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_TaxCodesupdate" on "ac_TaxCodes" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("TaxCodeId")
    begin
      if exists(
        select * from deleted, "ac_BasketItems"
        where "ac_BasketItems"."TaxCodeId" = deleted."TaxCodeId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "TaxCodeId" in "ac_TaxCodes" because there are dependent values in "ac_BasketItems"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("TaxCodeId")
    begin
      if exists(
        select * from deleted, "ac_OrderItems"
        where "ac_OrderItems"."TaxCodeId" = deleted."TaxCodeId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "TaxCodeId" in "ac_TaxCodes" because there are dependent values in "ac_OrderItems"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("TaxCodeId")
    begin
      if exists(
        select * from deleted, "ac_Products"
        where "ac_Products"."TaxCodeId" = deleted."TaxCodeId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "TaxCodeId" in "ac_TaxCodes" because there are dependent values in "ac_Products"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("TaxCodeId")
    begin
      if exists(
        select * from deleted, "ac_WrapStyles"
        where "ac_WrapStyles"."TaxCodeId" = deleted."TaxCodeId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "TaxCodeId" in "ac_TaxCodes" because there are dependent values in "ac_WrapStyles"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("TaxCodeId")
    begin
      if exists(
        select * from deleted, "ac_ShipMethods"
        where "ac_ShipMethods"."TaxCodeId" = deleted."TaxCodeId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "TaxCodeId" in "ac_TaxCodes" because there are dependent values in "ac_ShipMethods"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("TaxCodeId")
    begin
      if exists(
        select * from deleted, "ac_SubscriptionPlans"
        where "ac_SubscriptionPlans"."TaxCodeId" = deleted."TaxCodeId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "TaxCodeId" in "ac_TaxCodes" because there are dependent values in "ac_SubscriptionPlans"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_TrackingNumbersinsert" on "ac_TrackingNumbers" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("ShipGatewayId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ShipGatewayId" is null 

      select @validRows = count(*)
      from inserted, "ac_ShipGateways"
      where inserted."ShipGatewayId" = "ac_ShipGateways"."ShipGatewayId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_TrackingNumbers" because the values entered for "ShipGatewayId" in "ac_TrackingNumbers" must correspond to the values of primary key column(s) of the table "ac_ShipGateways"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_TrackingNumbersupdate" on "ac_TrackingNumbers" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("ShipGatewayId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."ShipGatewayId" is null 

      select @validRows = count(*)
      from inserted, "ac_ShipGateways"
      where inserted."ShipGatewayId" = "ac_ShipGateways"."ShipGatewayId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_TrackingNumbers" because the values entered for "ShipGatewayId" in "ac_TrackingNumbers" must correspond to the values of primary key column(s) of the table "ac_ShipGateways"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Transactionsinsert" on "ac_Transactions" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("PaymentGatewayId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."PaymentGatewayId" is null 

      select @validRows = count(*)
      from inserted, "ac_PaymentGateways"
      where inserted."PaymentGatewayId" = "ac_PaymentGateways"."PaymentGatewayId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Transactions" because the values entered for "PaymentGatewayId" in "ac_Transactions" must correspond to the values of primary key column(s) of the table "ac_PaymentGateways"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Transactionsupdate" on "ac_Transactions" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("PaymentGatewayId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."PaymentGatewayId" is null 

      select @validRows = count(*)
      from inserted, "ac_PaymentGateways"
      where inserted."PaymentGatewayId" = "ac_PaymentGateways"."PaymentGatewayId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Transactions" because the values entered for "PaymentGatewayId" in "ac_Transactions" must correspond to the values of primary key column(s) of the table "ac_PaymentGateways"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Usersdelete" on "ac_Users" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_AuditEvents"
  set "ac_AuditEvents"."UserId" = NULL
  from deleted,"ac_AuditEvents"
  where "ac_AuditEvents"."UserId" = deleted."UserId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_OrderNotes"
  set "ac_OrderNotes"."UserId" = NULL
  from deleted,"ac_OrderNotes"
  where "ac_OrderNotes"."UserId" = deleted."UserId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Orders"
  set "ac_Orders"."UserId" = NULL
  from deleted,"ac_Orders"
  where "ac_Orders"."UserId" = deleted."UserId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Usersinsert" on "ac_Users" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("AffiliateId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."AffiliateId" is null 

      select @validRows = count(*)
      from inserted, "ac_Affiliates"
      where inserted."AffiliateId" = "ac_Affiliates"."AffiliateId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Users" because the values entered for "AffiliateId" in "ac_Users" must correspond to the values of primary key column(s) of the table "ac_Affiliates"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Usersupdate" on "ac_Users" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("AffiliateId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."AffiliateId" is null 

      select @validRows = count(*)
      from inserted, "ac_Affiliates"
      where inserted."AffiliateId" = "ac_Affiliates"."AffiliateId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Users" because the values entered for "AffiliateId" in "ac_Users" must correspond to the values of primary key column(s) of the table "ac_Affiliates"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("UserId")
    begin
      if exists(
        select * from deleted, "ac_AuditEvents"
        where "ac_AuditEvents"."UserId" = deleted."UserId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "UserId" in "ac_Users" because there are dependent values in "ac_AuditEvents"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("UserId")
    begin
      if exists(
        select * from deleted, "ac_OrderNotes"
        where "ac_OrderNotes"."UserId" = deleted."UserId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "UserId" in "ac_Users" because there are dependent values in "ac_OrderNotes"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("UserId")
    begin
      if exists(
        select * from deleted, "ac_Orders"
        where "ac_Orders"."UserId" = deleted."UserId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "UserId" in "ac_Users" because there are dependent values in "ac_Orders"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Warehousesdelete" on "ac_Warehouses" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_OrderShipments"
  set "ac_OrderShipments"."WarehouseId" = NULL
  from deleted,"ac_OrderShipments"
  where "ac_OrderShipments"."WarehouseId" = deleted."WarehouseId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Warehousesinsert" on "ac_Warehouses" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("CountryCode")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."CountryCode" is null 

      select @validRows = count(*)
      from inserted, "ac_Countries"
      where inserted."CountryCode" = "ac_Countries"."CountryCode"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Warehouses" because the values entered for "CountryCode" in "ac_Warehouses" must correspond to the values of primary key column(s) of the table "ac_Countries"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_Warehousesupdate" on "ac_Warehouses" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("CountryCode")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."CountryCode" is null 

      select @validRows = count(*)
      from inserted, "ac_Countries"
      where inserted."CountryCode" = "ac_Countries"."CountryCode"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_Warehouses" because the values entered for "CountryCode" in "ac_Warehouses" must correspond to the values of primary key column(s) of the table "ac_Countries"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("WarehouseId")
    begin
      if exists(
        select * from deleted, "ac_OrderShipments"
        where "ac_OrderShipments"."WarehouseId" = deleted."WarehouseId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "WarehouseId" in "ac_Warehouses" because there are dependent values in "ac_OrderShipments"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_WishlistItemsdelete" on "ac_WishlistItems" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_BasketItems"
  set "ac_BasketItems"."WishlistItemId" = NULL
  from deleted,"ac_BasketItems"
  where "ac_BasketItems"."WishlistItemId" = deleted."WishlistItemId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_OrderItems"
  set "ac_OrderItems"."WishlistItemId" = NULL
  from deleted,"ac_OrderItems"
  where "ac_OrderItems"."WishlistItemId" = deleted."WishlistItemId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_WishlistItemsupdate" on "ac_WishlistItems" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("WishlistItemId")
    begin
      if exists(
        select * from deleted, "ac_BasketItems"
        where "ac_BasketItems"."WishlistItemId" = deleted."WishlistItemId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "WishlistItemId" in "ac_WishlistItems" because there are dependent values in "ac_BasketItems"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("WishlistItemId")
    begin
      if exists(
        select * from deleted, "ac_OrderItems"
        where "ac_OrderItems"."WishlistItemId" = deleted."WishlistItemId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "WishlistItemId" in "ac_WishlistItems" because there are dependent values in "ac_OrderItems"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_WrapGroupsdelete" on "ac_WrapGroups" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_Products"
  set "ac_Products"."WrapGroupId" = NULL
  from deleted,"ac_Products"
  where "ac_Products"."WrapGroupId" = deleted."WrapGroupId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_WrapGroupsupdate" on "ac_WrapGroups" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("WrapGroupId")
    begin
      if exists(
        select * from deleted, "ac_Products"
        where "ac_Products"."WrapGroupId" = deleted."WrapGroupId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "WrapGroupId" in "ac_WrapGroups" because there are dependent values in "ac_Products"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_WrapStylesdelete" on "ac_WrapStyles" 
for delete 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@errorNumber int,
	@errorMsg varchar(255)

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_BasketItems"
  set "ac_BasketItems"."WrapStyleId" = NULL
  from deleted,"ac_BasketItems"
  where "ac_BasketItems"."WrapStyleId" = deleted."WrapStyleId"

  /* Clause for ON DELETE to referenced table SET NULL */
  update "ac_OrderItems"
  set "ac_OrderItems"."WrapStyleId" = NULL
  from deleted,"ac_OrderItems"
  where "ac_OrderItems"."WrapStyleId" = deleted."WrapStyleId"

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_WrapStylesinsert" on "ac_WrapStyles" 
for insert 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON INSERT to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_WrapStyles" because the values entered for "TaxCodeId" in "ac_WrapStyles" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go

Create trigger "ac_WrapStylesupdate" on "ac_WrapStyles" 
for update 
as
/* Microsoft Visual Studio generated code. */
BEGIN
  declare
	@rowsAffected int,
	@nullRows int,
	@validRows int, 
	@errorNumber int,
	@errorMsg varchar(255)

  select @rowsAffected = @@rowcount

  /* Clause for ON UPDATE to referencing table : NO ACTION. */
  if update("TaxCodeId")
    begin
      select @nullRows = 0

      select @nullRows = count(*)
      from inserted
      where inserted."TaxCodeId" is null 

      select @validRows = count(*)
      from inserted, "ac_TaxCodes"
      where inserted."TaxCodeId" = "ac_TaxCodes"."TaxCodeId"

      if @nullRows + @validRows != @rowsAffected
        begin
          select @errorNumber = 30001,
                 @errorMsg = 'Cannot insert/update into table "ac_WrapStyles" because the values entered for "TaxCodeId" in "ac_WrapStyles" must correspond to the values of primary key column(s) of the table "ac_TaxCodes"'
          goto errorHandler
        end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("WrapStyleId")
    begin
      if exists(
        select * from deleted, "ac_BasketItems"
        where "ac_BasketItems"."WrapStyleId" = deleted."WrapStyleId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "WrapStyleId" in "ac_WrapStyles" because there are dependent values in "ac_BasketItems"'
        goto errorHandler
      end
    end

  /* Clause for ON UPDATE to referenced table : NO ACTION */
  if update("WrapStyleId")
    begin
      if exists(
        select * from deleted, "ac_OrderItems"
        where "ac_OrderItems"."WrapStyleId" = deleted."WrapStyleId")
      begin
        select @errorNumber = 30002,
               @errorMsg = 'Cannot modify values "WrapStyleId" in "ac_WrapStyles" because there are dependent values in "ac_OrderItems"'
        goto errorHandler
      end
    end

  return
  errorHandler:
    raiserror @errorNumber @errorMsg
  rollback transaction
END


go


/* This is the end of the Microsoft Visual Studio generated SQL DDL script.                   */
